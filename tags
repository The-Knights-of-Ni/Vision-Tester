!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CImg	.\CImg.h	/^    CImg():_width(0),_height(0),_depth(0),_spectrum(0),_is_shared(false),_data(0) {}$/;"	f	struct:cimg_library_suffixed::CImg
CImg	.\CImg.h	/^    CImg(CImg<T>&& img):_width(0),_height(0),_depth(0),_spectrum(0),_is_shared(false),_data(0) {$/;"	f	struct:cimg_library_suffixed::CImg
CImg	.\CImg.h	/^    CImg(const CImg<T>& img) {$/;"	f	struct:cimg_library_suffixed::CImg
CImg	.\CImg.h	/^    CImg(const CImg<T>& img, const bool is_shared) {$/;"	f	struct:cimg_library_suffixed::CImg
CImg	.\CImg.h	/^    CImg(const CImg<t>& img):_is_shared(false) {$/;"	f	struct:cimg_library_suffixed::CImg
CImg	.\CImg.h	/^    CImg(const CImg<t>& img, const bool is_shared):_is_shared(false) {$/;"	f	struct:cimg_library_suffixed::CImg
CImg	.\CImg.h	/^    CImg(const CImg<t>& img, const char *const dimensions):$/;"	f	struct:cimg_library_suffixed::CImg
CImg	.\CImg.h	/^    CImg(const CImg<t>& img, const char *const dimensions, const T& value):$/;"	f	struct:cimg_library_suffixed::CImg
CImg	.\CImg.h	/^    CImg(const T *const values, const unsigned int size_x, const unsigned int size_y=1,$/;"	f	struct:cimg_library_suffixed::CImg
CImg	.\CImg.h	/^    CImg(const std::initializer_list<t> values):$/;"	f	struct:cimg_library_suffixed::CImg
CImg	.\CImg.h	/^    CImg(const t *const values, const unsigned int size_x, const unsigned int size_y=1,$/;"	f	struct:cimg_library_suffixed::CImg
CImg	.\CImg.h	/^    CImg(const unsigned int size_x, const unsigned int size_y, const unsigned int size_z, const unsigned int size_c,$/;"	f	struct:cimg_library_suffixed::CImg
CImg	.\CImg.h	/^    CImg(const unsigned int size_x, const unsigned int size_y, const unsigned int size_z,$/;"	f	struct:cimg_library_suffixed::CImg
CImg	.\CImg.h	/^    CImg(const unsigned int size_x, const unsigned int size_y,$/;"	f	struct:cimg_library_suffixed::CImg
CImg	.\CImg.h	/^    CImg(const unsigned int size_x,$/;"	f	struct:cimg_library_suffixed::CImg
CImg	.\CImg.h	/^    explicit CImg(const CImgDisplay &disp):_width(0),_height(0),_depth(0),_spectrum(0),_is_shared(false),_data(0) {$/;"	f	struct:cimg_library_suffixed::CImg
CImg	.\CImg.h	/^    explicit CImg(const char *const filename):_width(0),_height(0),_depth(0),_spectrum(0),_is_shared(false),_data(0) {$/;"	f	struct:cimg_library_suffixed::CImg
CImg	.\CImg.h	/^    explicit CImg(const unsigned int size_x, const unsigned int size_y=1,$/;"	f	struct:cimg_library_suffixed::CImg
CImg	.\CImg.h	/^  struct CImg {$/;"	s	namespace:cimg_library_suffixed
CImg3dtoobject3d	.\CImg.h	/^    CImg<T>& CImg3dtoobject3d(CImgList<tp>& primitives,$/;"	f	struct:cimg_library_suffixed::CImg
CImgAbortException	.\CImg.h	/^    CImgAbortException() { _message = new char[1]; *_message = 0; }$/;"	f	struct:cimg_library_suffixed::CImgAbortException
CImgAbortException	.\CImg.h	/^    CImgAbortException(const CImgAbortException& e) {$/;"	f	struct:cimg_library_suffixed::CImgAbortException
CImgAbortException	.\CImg.h	/^    CImgAbortException(const char *const format, ...):_message(0) { _cimg_exception_err("CImgAbortException",true); }$/;"	f	struct:cimg_library_suffixed::CImgAbortException
CImgAbortException	.\CImg.h	/^  struct CImgAbortException : public std::exception {$/;"	s	namespace:cimg_library_suffixed
CImgArgumentException	.\CImg.h	/^    CImgArgumentException(const char *const format, ...) { _cimg_exception_err("CImgArgumentException",true); }$/;"	f	struct:cimg_library_suffixed::CImgArgumentException
CImgArgumentException	.\CImg.h	/^  struct CImgArgumentException : public CImgException {$/;"	s	namespace:cimg_library_suffixed
CImgDisplay	.\CImg.h	/^    CImgDisplay():$/;"	f	struct:cimg_library_suffixed::CImgDisplay
CImgDisplay	.\CImg.h	/^    CImgDisplay(const CImgDisplay& disp):$/;"	f	struct:cimg_library_suffixed::CImgDisplay
CImgDisplay	.\CImg.h	/^    CImgDisplay(const unsigned int width, const unsigned int height,$/;"	f	struct:cimg_library_suffixed::CImgDisplay
CImgDisplay	.\CImg.h	/^    explicit CImgDisplay(const CImg<T>& img,$/;"	f	struct:cimg_library_suffixed::CImgDisplay
CImgDisplay	.\CImg.h	/^    explicit CImgDisplay(const CImgList<T>& list,$/;"	f	struct:cimg_library_suffixed::CImgDisplay
CImgDisplay	.\CImg.h	/^  struct CImgDisplay {$/;"	s	namespace:cimg_library_suffixed
CImgDisplayException	.\CImg.h	/^    CImgDisplayException(const char *const format, ...) { _cimg_exception_err("CImgDisplayException",false); }$/;"	f	struct:cimg_library_suffixed::CImgDisplayException
CImgDisplayException	.\CImg.h	/^  struct CImgDisplayException : public CImgException {$/;"	s	namespace:cimg_library_suffixed
CImgException	.\CImg.h	/^    CImgException() { _message = new char[1]; *_message = 0; }$/;"	f	struct:cimg_library_suffixed::CImgException
CImgException	.\CImg.h	/^    CImgException(const CImgException& e) {$/;"	f	struct:cimg_library_suffixed::CImgException
CImgException	.\CImg.h	/^    CImgException(const char *const format, ...):_message(0) { _cimg_exception_err("CImgException",true); }$/;"	f	struct:cimg_library_suffixed::CImgException
CImgException	.\CImg.h	/^  struct CImgException : public std::exception {$/;"	s	namespace:cimg_library_suffixed
CImgIOException	.\CImg.h	/^    CImgIOException(const char *const format, ...) { _cimg_exception_err("CImgIOException",true); }$/;"	f	struct:cimg_library_suffixed::CImgIOException
CImgIOException	.\CImg.h	/^  struct CImgIOException : public CImgException {$/;"	s	namespace:cimg_library_suffixed
CImgInstanceException	.\CImg.h	/^    CImgInstanceException(const char *const format, ...) { _cimg_exception_err("CImgInstanceException",true); }$/;"	f	struct:cimg_library_suffixed::CImgInstanceException
CImgInstanceException	.\CImg.h	/^  struct CImgInstanceException : public CImgException {$/;"	s	namespace:cimg_library_suffixed
CImgList	.\CImg.h	/^    CImgList():$/;"	f	struct:cimg_library_suffixed::CImgList
CImgList	.\CImg.h	/^    CImgList(const CImg<t1>& img1, const CImg<t2>& img2, const CImg<t3>& img3, const CImg<t4>& img4,$/;"	f	struct:cimg_library_suffixed::CImgList
CImgList	.\CImg.h	/^    CImgList(const CImg<t1>& img1, const CImg<t2>& img2, const CImg<t3>& img3, const bool is_shared=false):$/;"	f	struct:cimg_library_suffixed::CImgList
CImgList	.\CImg.h	/^    CImgList(const CImg<t1>& img1, const CImg<t2>& img2, const bool is_shared=false):$/;"	f	struct:cimg_library_suffixed::CImgList
CImgList	.\CImg.h	/^    CImgList(const CImgList<T>& list):_width(0),_allocated_width(0),_data(0) {$/;"	f	struct:cimg_library_suffixed::CImgList
CImgList	.\CImg.h	/^    CImgList(const CImgList<t>& list):_width(0),_allocated_width(0),_data(0) {$/;"	f	struct:cimg_library_suffixed::CImgList
CImgList	.\CImg.h	/^    CImgList(const CImgList<t>& list, const bool is_shared):_width(0),_allocated_width(0),_data(0) {$/;"	f	struct:cimg_library_suffixed::CImgList
CImgList	.\CImg.h	/^    CImgList(const unsigned int n, const CImg<t>& img, const bool is_shared=false):$/;"	f	struct:cimg_library_suffixed::CImgList
CImgList	.\CImg.h	/^    CImgList(const unsigned int n, const unsigned int width, const unsigned int height,$/;"	f	struct:cimg_library_suffixed::CImgList
CImgList	.\CImg.h	/^    CImgList(const unsigned int n, const unsigned int width, const unsigned int height=1,$/;"	f	struct:cimg_library_suffixed::CImgList
CImgList	.\CImg.h	/^    explicit CImgList(const CImg<t>& img, const bool is_shared=false):$/;"	f	struct:cimg_library_suffixed::CImgList
CImgList	.\CImg.h	/^    explicit CImgList(const CImgDisplay& disp):_width(0),_allocated_width(0),_data(0) {$/;"	f	struct:cimg_library_suffixed::CImgList
CImgList	.\CImg.h	/^    explicit CImgList(const char *const filename):_width(0),_allocated_width(0),_data(0) {$/;"	f	struct:cimg_library_suffixed::CImgList
CImgList	.\CImg.h	/^    explicit CImgList(const unsigned int n):_width(n) {$/;"	f	struct:cimg_library_suffixed::CImgList
CImgList	.\CImg.h	/^  struct CImgList {$/;"	s	namespace:cimg_library_suffixed
CImgWarningException	.\CImg.h	/^    CImgWarningException(const char *const format, ...) { _cimg_exception_err("CImgWarningException",false); }$/;"	f	struct:cimg_library_suffixed::CImgWarningException
CImgWarningException	.\CImg.h	/^  struct CImgWarningException : public CImgException {$/;"	s	namespace:cimg_library_suffixed
CImg_2x2	.\CImg.h	506;"	d
CImg_2x2x2	.\CImg.h	542;"	d
CImg_3x3	.\CImg.h	512;"	d
CImg_3x3x3	.\CImg.h	552;"	d
CImg_4x4	.\CImg.h	520;"	d
CImg_5x5	.\CImg.h	530;"	d
CMYKtoCMY	.\CImg.h	/^    CImg<T>& CMYKtoCMY() {$/;"	f	struct:cimg_library_suffixed::CImg
CMYKtoRGB	.\CImg.h	/^    CImg<T>& CMYKtoRGB() {$/;"	f	struct:cimg_library_suffixed::CImg
CMYtoCMYK	.\CImg.h	/^    CImg<T>& CMYtoCMYK() {$/;"	f	struct:cimg_library_suffixed::CImg
CMYtoRGB	.\CImg.h	/^    CImg<T>& CMYtoRGB() {$/;"	f	struct:cimg_library_suffixed::CImg
FFT	.\CImg.h	/^    CImgList<T>& FFT(const bool invert=false) {$/;"	f	struct:cimg_library_suffixed::CImgList
FFT	.\CImg.h	/^    CImgList<T>& FFT(const char axis, const bool invert=false) {$/;"	f	struct:cimg_library_suffixed::CImgList
FFT	.\CImg.h	/^    static void FFT(CImg<T>& real, CImg<T>& imag, const bool is_invert=false, const unsigned int nb_threads=0) {$/;"	f	struct:cimg_library_suffixed::CImg
FFT	.\CImg.h	/^    static void FFT(CImg<T>& real, CImg<T>& imag, const char axis, const bool is_invert=false) {$/;"	f	struct:cimg_library_suffixed::CImg
False	.\CImg.h	290;"	d
False	.\CImg.h	55576;"	d
HSItoRGB	.\CImg.h	/^    CImg<T>& HSItoRGB() {$/;"	f	struct:cimg_library_suffixed::CImg
HSL	.\blocks.cpp	/^struct HSL$/;"	s	file:
HSL	.\hue.cpp	/^struct HSL$/;"	s	file:
HSL	.\vision.cpp	/^struct HSL$/;"	s	file:
HSLtoRGB	.\CImg.h	/^    CImg<T>& HSLtoRGB() {$/;"	f	struct:cimg_library_suffixed::CImg
HSV_LUT256	.\CImg.h	/^    static const CImg<Tuchar>& HSV_LUT256() {$/;"	f	struct:cimg_library_suffixed::CImg
HSVtoRGB	.\CImg.h	/^    CImg<T>& HSVtoRGB() {$/;"	f	struct:cimg_library_suffixed::CImg
LabtoRGB	.\CImg.h	/^    CImg<T>& LabtoRGB() {$/;"	f	struct:cimg_library_suffixed::CImg
LabtoXYZ	.\CImg.h	/^    CImg<T>& LabtoXYZ() {$/;"	f	struct:cimg_library_suffixed::CImg
MSE	.\CImg.h	/^    double MSE(const CImg<t>& img) const {$/;"	f	struct:cimg_library_suffixed::CImg
Magick_info	.\CImg.h	/^      Magick_info() {$/;"	f	struct:cimg_library_suffixed::cimg::Magick_info
Magick_info	.\CImg.h	/^    static struct Magick_info {$/;"	s	namespace:cimg_library_suffixed::cimg
Mutex_attr	.\CImg.h	/^    Mutex_info& Mutex_attr() { static Mutex_info val; return val; }$/;"	f	namespace:cimg_library_suffixed::cimg
Mutex_attr	.\CImg.h	/^    inline Mutex_info& Mutex_attr() { static Mutex_info val; return val; }$/;"	f	namespace:cimg_library_suffixed::cimg
Mutex_info	.\CImg.h	/^      Mutex_info() { for (unsigned int i = 0; i<32; ++i) mutex[i] = CreateMutex(0,FALSE,0); }$/;"	f	struct:cimg_library_suffixed::cimg::Mutex_info
Mutex_info	.\CImg.h	/^    struct Mutex_info {$/;"	s	namespace:cimg_library_suffixed::cimg
NOMINMAX	.\CImg.h	160;"	d
None	.\CImg.h	414;"	d
None	.\CImg.h	55582;"	d
PI	.\CImg.h	/^    const double PI = 3.14159265358979323846;   \/\/!< Value of the mathematical constant PI$/;"	m	namespace:cimg_library_suffixed::cimg
PI	.\CImg.h	475;"	d
PI	.\CImg.h	55591;"	d
PSNR	.\CImg.h	/^    double PSNR(const CImg<t>& img, const double max_value=255) const {$/;"	f	struct:cimg_library_suffixed::CImg
RGBtoCMY	.\CImg.h	/^    CImg<T>& RGBtoCMY() {$/;"	f	struct:cimg_library_suffixed::CImg
RGBtoCMYK	.\CImg.h	/^    CImg<T>& RGBtoCMYK() {$/;"	f	struct:cimg_library_suffixed::CImg
RGBtoHSI	.\CImg.h	/^    CImg<T>& RGBtoHSI() {$/;"	f	struct:cimg_library_suffixed::CImg
RGBtoHSL	.\CImg.h	/^    CImg<T>& RGBtoHSL() {$/;"	f	struct:cimg_library_suffixed::CImg
RGBtoHSV	.\CImg.h	/^    CImg<T>& RGBtoHSV() {$/;"	f	struct:cimg_library_suffixed::CImg
RGBtoLab	.\CImg.h	/^    CImg<T>& RGBtoLab() {$/;"	f	struct:cimg_library_suffixed::CImg
RGBtoXYZ	.\CImg.h	/^    CImg<T>& RGBtoXYZ() {$/;"	f	struct:cimg_library_suffixed::CImg
RGBtoYCbCr	.\CImg.h	/^    CImg<T>& RGBtoYCbCr() {$/;"	f	struct:cimg_library_suffixed::CImg
RGBtoYUV	.\CImg.h	/^    CImg<T>& RGBtoYUV() {$/;"	f	struct:cimg_library_suffixed::CImg
RGBtosRGB	.\CImg.h	/^    CImg<T>& RGBtosRGB() {$/;"	f	struct:cimg_library_suffixed::CImg
RGBtoxyY	.\CImg.h	/^    CImg<T>& RGBtoxyY() {$/;"	f	struct:cimg_library_suffixed::CImg
SVD	.\CImg.h	/^    const CImg<T>& SVD(CImg<t>& U, CImg<t>& S, CImg<t>& V, const bool sorting=true,$/;"	f	struct:cimg_library_suffixed::CImg
Tbool	.\CImg.h	/^    typedef typename cimg::superset<T,bool>::type Tbool;$/;"	t	struct:cimg_library_suffixed::CImg
Tbool	.\CImg.h	/^    typedef typename cimg::superset<T,bool>::type Tbool;$/;"	t	struct:cimg_library_suffixed::CImgList
Tchar	.\CImg.h	/^    typedef typename cimg::superset<T,char>::type Tchar;$/;"	t	struct:cimg_library_suffixed::CImg
Tchar	.\CImg.h	/^    typedef typename cimg::superset<T,char>::type Tchar;$/;"	t	struct:cimg_library_suffixed::CImgList
Tdouble	.\CImg.h	/^    typedef typename cimg::superset<T,double>::type Tdouble;$/;"	t	struct:cimg_library_suffixed::CImg
Tdouble	.\CImg.h	/^    typedef typename cimg::superset<T,double>::type Tdouble;$/;"	t	struct:cimg_library_suffixed::CImgList
Tfloat	.\CImg.h	/^    typedef typename cimg::superset<T,float>::type Tfloat;$/;"	t	struct:cimg_library_suffixed::CImg
Tfloat	.\CImg.h	/^    typedef typename cimg::superset<T,float>::type Tfloat;$/;"	t	struct:cimg_library_suffixed::CImgList
Tint	.\CImg.h	/^    typedef typename cimg::superset<T,int>::type Tint;$/;"	t	struct:cimg_library_suffixed::CImg
Tint	.\CImg.h	/^    typedef typename cimg::superset<T,int>::type Tint;$/;"	t	struct:cimg_library_suffixed::CImgList
Tlong	.\CImg.h	/^    typedef typename cimg::superset<T,long>::type Tlong;$/;"	t	struct:cimg_library_suffixed::CImg
Tlong	.\CImg.h	/^    typedef typename cimg::superset<T,long>::type Tlong;$/;"	t	struct:cimg_library_suffixed::CImgList
True	.\CImg.h	286;"	d
True	.\CImg.h	55579;"	d
Tshort	.\CImg.h	/^    typedef typename cimg::superset<T,short>::type Tshort;$/;"	t	struct:cimg_library_suffixed::CImg
Tshort	.\CImg.h	/^    typedef typename cimg::superset<T,short>::type Tshort;$/;"	t	struct:cimg_library_suffixed::CImgList
Tuchar	.\CImg.h	/^    typedef typename cimg::superset<T,unsigned char>::type Tuchar;$/;"	t	struct:cimg_library_suffixed::CImg
Tuchar	.\CImg.h	/^    typedef typename cimg::superset<T,unsigned char>::type Tuchar;$/;"	t	struct:cimg_library_suffixed::CImgList
Tuint	.\CImg.h	/^    typedef typename cimg::superset<T,unsigned int>::type Tuint;$/;"	t	struct:cimg_library_suffixed::CImg
Tuint	.\CImg.h	/^    typedef typename cimg::superset<T,unsigned int>::type Tuint;$/;"	t	struct:cimg_library_suffixed::CImgList
Tulong	.\CImg.h	/^    typedef typename cimg::superset<T,unsigned long>::type Tulong;$/;"	t	struct:cimg_library_suffixed::CImg
Tulong	.\CImg.h	/^    typedef typename cimg::superset<T,unsigned long>::type Tulong;$/;"	t	struct:cimg_library_suffixed::CImgList
Tushort	.\CImg.h	/^    typedef typename cimg::superset<T,unsigned short>::type Tushort;$/;"	t	struct:cimg_library_suffixed::CImg
Tushort	.\CImg.h	/^    typedef typename cimg::superset<T,unsigned short>::type Tushort;$/;"	t	struct:cimg_library_suffixed::CImgList
WIN32_LEAN_AND_MEAN	.\CImg.h	163;"	d
Win32_attr	.\CImg.h	/^    Win32_info& Win32_attr() { static Win32_info val; return val; }$/;"	f	namespace:cimg_library_suffixed::cimg
Win32_attr	.\CImg.h	/^    inline Win32_info& Win32_attr() { static Win32_info val; return val; }$/;"	f	namespace:cimg_library_suffixed::cimg
Win32_info	.\CImg.h	/^      Win32_info() { wait_event = CreateEvent(0,FALSE,FALSE,0); }$/;"	f	struct:cimg_library_suffixed::cimg::Win32_info
Win32_info	.\CImg.h	/^    struct Win32_info {$/;"	s	namespace:cimg_library_suffixed::cimg
X11_attr	.\CImg.h	/^    X11_info& X11_attr() { static X11_info val; return val; }$/;"	f	namespace:cimg_library_suffixed::cimg
X11_attr	.\CImg.h	/^    inline X11_info& X11_attr() { static X11_info val; return val; }$/;"	f	namespace:cimg_library_suffixed::cimg
X11_info	.\CImg.h	/^      X11_info():nb_wins(0),events_thread(0),display(0),$/;"	f	struct:cimg_library_suffixed::cimg::X11_info
X11_info	.\CImg.h	/^    struct X11_info {$/;"	s	namespace:cimg_library_suffixed::cimg
XYZtoLab	.\CImg.h	/^    CImg<T>& XYZtoLab() {$/;"	f	struct:cimg_library_suffixed::CImg
XYZtoRGB	.\CImg.h	/^    CImg<T>& XYZtoRGB() {$/;"	f	struct:cimg_library_suffixed::CImg
XYZtoxyY	.\CImg.h	/^    CImg<T>& XYZtoxyY() {$/;"	f	struct:cimg_library_suffixed::CImg
YCbCrtoRGB	.\CImg.h	/^    CImg<T>& YCbCrtoRGB() {$/;"	f	struct:cimg_library_suffixed::CImg
YUVtoRGB	.\CImg.h	/^    CImg<T>& YUVtoRGB() {$/;"	f	struct:cimg_library_suffixed::CImg
_CImgList_stdarg	.\CImg.h	49688;"	d
_CImg_stdarg	.\CImg.h	9366;"	d
_CRT_NONSTDC_NO_DEPRECATE	.\CImg.h	126;"	d
_CRT_SECURE_NO_DEPRECATE	.\CImg.h	125;"	d
_LU	.\CImg.h	/^    CImg<T>& _LU(CImg<t>& indx, bool& d) {$/;"	f	struct:cimg_library_suffixed::CImg
_Magick_info	.\CImg.h	/^    } _Magick_info;$/;"	m	namespace:cimg_library_suffixed::cimg	typeref:struct:cimg_library_suffixed::cimg::Magick_info
_WIN32_IE	.\CImg.h	167;"	d
___distance_eikonal	.\CImg.h	/^    static bool ___distance_eikonal(const Tfloat a, const Tfloat b, const Tfloat c, Tfloat &root) {$/;"	f	struct:cimg_library_suffixed::CImg
___draw_object3d	.\CImg.h	/^    static float ___draw_object3d(const CImg<t>& opacities, const unsigned int n_primitive) {$/;"	f	struct:cimg_library_suffixed::CImg
___draw_object3d	.\CImg.h	/^    static float ___draw_object3d(const CImgList<t>& opacities, const unsigned int n_primitive) {$/;"	f	struct:cimg_library_suffixed::CImg
__cimg_blur_box_apply	.\CImg.h	/^    static T __cimg_blur_box_apply(T *ptr, const int N, const unsigned long off,$/;"	f	struct:cimg_library_suffixed::CImg
__cimg_library_suffixed	.\CImg.h	484;"	d
__cimg_load_pandore_case	.\CImg.h	45066;"	d
__cimg_save_pandore_case	.\CImg.h	48859;"	d
__distance_eikonal	.\CImg.h	/^    Tfloat __distance_eikonal(const CImg<Tfloat>& res, const Tfloat P,$/;"	f	struct:cimg_library_suffixed::CImg
__draw_object3d	.\CImg.h	/^    static float __draw_object3d(const CImg<t>& opacities, const unsigned int n_primitive, CImg<to>& opacity) {$/;"	f	struct:cimg_library_suffixed::CImg
__draw_object3d	.\CImg.h	/^    static float __draw_object3d(const CImgList<t>& opacities, const unsigned int n_primitive, CImg<to>& opacity) {$/;"	f	struct:cimg_library_suffixed::CImg
__get_select	.\CImg.h	/^    CImg<ucharT> __get_select(const CImgDisplay& disp, const int normalization,$/;"	f	struct:cimg_library_suffixed::CImg
_allocated_width	.\CImg.h	/^    unsigned int _width, _allocated_width;$/;"	m	struct:cimg_library_suffixed::CImgList
_assign	.\CImg.h	/^    CImgDisplay& _assign(const unsigned int dimw, const unsigned int dimh, const char *const ptitle=0,$/;"	f	struct:cimg_library_suffixed::CImgDisplay
_assign	.\CImg.h	/^    void _assign(const unsigned int dimw, const unsigned int dimh, const char *const ptitle=0,$/;"	f	struct:cimg_library_suffixed::CImgDisplay
_assign_xshm	.\CImg.h	/^    static int _assign_xshm(Display *dpy, XErrorEvent *error) {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
_at	.\CImg.h	/^    T& _at(const int offset) {$/;"	f	struct:cimg_library_suffixed::CImg
_at	.\CImg.h	/^    const T& _at(const int offset) const {$/;"	f	struct:cimg_library_suffixed::CImg
_atN	.\CImg.h	/^    T _atN(const int pos, const int x=0, const int y=0, const int z=0, const int c=0) const {$/;"	f	struct:cimg_library_suffixed::CImgList
_atN	.\CImg.h	/^    T& _atN(const int pos, const int x=0, const int y=0, const int z=0, const int c=0) {$/;"	f	struct:cimg_library_suffixed::CImgList
_atNX	.\CImg.h	/^    T _atNX(const int pos, const int x, const int y=0, const int z=0, const int c=0) const {$/;"	f	struct:cimg_library_suffixed::CImgList
_atNX	.\CImg.h	/^    T& _atNX(const int pos, const int x, const int y=0, const int z=0, const int c=0) {$/;"	f	struct:cimg_library_suffixed::CImgList
_atNXY	.\CImg.h	/^    T _atNXY(const int pos, const int x, const int y, const int z=0, const int c=0) const {$/;"	f	struct:cimg_library_suffixed::CImgList
_atNXY	.\CImg.h	/^    T& _atNXY(const int pos, const int x, const int y, const int z=0, const int c=0) {$/;"	f	struct:cimg_library_suffixed::CImgList
_atNXYZ	.\CImg.h	/^    T _atNXYZ(const int pos, const int x, const int y, const int z, const int c=0) const {$/;"	f	struct:cimg_library_suffixed::CImgList
_atNXYZ	.\CImg.h	/^    T& _atNXYZ(const int pos, const int x, const int y, const int z, const int c=0) {$/;"	f	struct:cimg_library_suffixed::CImgList
_atNXYZC	.\CImg.h	/^    T _atNXYZC(const int pos, const int x, const int y, const int z, const int c) const {$/;"	f	struct:cimg_library_suffixed::CImgList
_atNXYZC	.\CImg.h	/^    T& _atNXYZC(const int pos, const int x, const int y, const int z, const int c) {$/;"	f	struct:cimg_library_suffixed::CImgList
_atX	.\CImg.h	/^    T& _atX(const int x, const int y=0, const int z=0, const int c=0) {$/;"	f	struct:cimg_library_suffixed::CImg
_atX	.\CImg.h	/^    const T& _atX(const int x, const int y=0, const int z=0, const int c=0) const {$/;"	f	struct:cimg_library_suffixed::CImg
_atXY	.\CImg.h	/^    T& _atXY(const int x, const int y, const int z=0, const int c=0) {$/;"	f	struct:cimg_library_suffixed::CImg
_atXY	.\CImg.h	/^    const T& _atXY(const int x, const int y, const int z=0, const int c=0) const {$/;"	f	struct:cimg_library_suffixed::CImg
_atXYZ	.\CImg.h	/^    T& _atXYZ(const int x, const int y, const int z, const int c=0) {$/;"	f	struct:cimg_library_suffixed::CImg
_atXYZ	.\CImg.h	/^    const T& _atXYZ(const int x, const int y, const int z, const int c=0) const {$/;"	f	struct:cimg_library_suffixed::CImg
_atXYZC	.\CImg.h	/^    T& _atXYZC(const int x, const int y, const int z, const int c) {$/;"	f	struct:cimg_library_suffixed::CImg
_atXYZC	.\CImg.h	/^    const T& _atXYZC(const int x, const int y, const int z, const int c) const {$/;"	f	struct:cimg_library_suffixed::CImg
_autocrop	.\CImg.h	/^    CImg<intT> _autocrop(const T& value, const char axis) const {$/;"	f	struct:cimg_library_suffixed::CImg
_background_window	.\CImg.h	/^    HWND _window, _background_window;$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_background_window	.\CImg.h	/^    Window _window, _background_window;$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_blur_guided	.\CImg.h	/^    CImg<T>& _blur_guided(const unsigned int psize) {$/;"	f	struct:cimg_library_suffixed::CImg
_bmi	.\CImg.h	/^    BITMAPINFO _bmi;$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_button	.\CImg.h	/^    unsigned int _window_width, _window_height, _button, *_keys, *_released_keys;$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_ccs	.\CImg.h	/^    CLIENTCREATESTRUCT _ccs;$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_cimg_Labf	.\CImg.h	24359;"	d
_cimg_Labfi	.\CImg.h	24394;"	d
_cimg_Tfloat	.\CImg.h	2786;"	d
_cimg_Tt	.\CImg.h	2785;"	d
_cimg_Ttdouble	.\CImg.h	2788;"	d
_cimg_Ttfloat	.\CImg.h	2787;"	d
_cimg_blur_box_apply	.\CImg.h	/^    static void _cimg_blur_box_apply(T *ptr, const float sigma, const int N, const unsigned long off,$/;"	f	struct:cimg_library_suffixed::CImg
_cimg_blur_patch2d	.\CImg.h	30675;"	d
_cimg_blur_patch2d_fast	.\CImg.h	30656;"	d
_cimg_blur_patch3d	.\CImg.h	30634;"	d
_cimg_blur_patch3d_fast	.\CImg.h	30614;"	d
_cimg_constructor_cpp11	.\CImg.h	9415;"	d
_cimg_create_ext_operators	.\CImg.h	5504;"	d
_cimg_deriche_apply	.\CImg.h	29512;"	d
_cimg_draw_fill_insert	.\CImg.h	40200;"	d
_cimg_draw_fill_set	.\CImg.h	40193;"	d
_cimg_draw_fill_test	.\CImg.h	40186;"	d
_cimg_draw_fill_test_neighbor	.\CImg.h	40206;"	d
_cimg_error_mgr	.\CImg.h	/^    struct _cimg_error_mgr {$/;"	s	struct:cimg_library_suffixed::CImg
_cimg_error_ptr	.\CImg.h	/^    typedef struct _cimg_error_mgr *_cimg_error_ptr;$/;"	t	struct:cimg_library_suffixed::CImg	typeref:struct:cimg_library_suffixed::CImg::_cimg_error_mgr
_cimg_exception_err	.\CImg.h	2322;"	d
_cimg_fill1	.\CImg.h	22330;"	d
_cimg_for_triangle1	.\CImg.h	36664;"	d
_cimg_for_triangle2	.\CImg.h	36693;"	d
_cimg_for_triangle3	.\CImg.h	36737;"	d
_cimg_for_triangle4	.\CImg.h	36796;"	d
_cimg_for_triangle5	.\CImg.h	36870;"	d
_cimg_gs2x_for3	.\CImg.h	25583;"	d
_cimg_gs2x_for3x3	.\CImg.h	25589;"	d
_cimg_gs3x_for3	.\CImg.h	25637;"	d
_cimg_gs3x_for3x3	.\CImg.h	25643;"	d
_cimg_instance	.\CImg.h	2048;"	d
_cimg_iskey_def	.\CImg.h	6268;"	d
_cimg_iskey_test	.\CImg.h	6154;"	d
_cimg_iskey_test2	.\CImg.h	6200;"	d
_cimg_jpeg_error_exit	.\CImg.h	/^    METHODDEF(void) _cimg_jpeg_error_exit(j_common_ptr cinfo) {$/;"	f	struct:cimg_library_suffixed::CImg
_cimg_keycode	.\CImg.h	6541;"	d
_cimg_lanczos	.\CImg.h	/^    static float _cimg_lanczos(const float x) {$/;"	f	struct:cimg_library_suffixed::CImg
_cimg_library_suffixed	.\CImg.h	485;"	d
_cimg_load_cimg_case	.\CImg.h	52194;"	d
_cimg_load_cimg_case2	.\CImg.h	52339;"	d
_cimg_load_inr_case	.\CImg.h	44959;"	d
_cimg_load_pandore_case	.\CImg.h	45079;"	d
_cimg_math_parser	.\CImg.h	/^      _cimg_math_parser():$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
_cimg_math_parser	.\CImg.h	/^      _cimg_math_parser(const _cimg_math_parser& mp):$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
_cimg_math_parser	.\CImg.h	/^      _cimg_math_parser(const char *const expression, const char *const funcname=0,$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
_cimg_math_parser	.\CImg.h	/^    struct _cimg_math_parser {$/;"	s	struct:cimg_library_suffixed::CImg
_cimg_median_sort	.\CImg.h	30860;"	d
_cimg_mp_c	.\CImg.h	13816;"	d
_cimg_mp_check_constant	.\CImg.h	13736;"	d
_cimg_mp_check_matrix_square	.\CImg.h	13737;"	d
_cimg_mp_check_type	.\CImg.h	13735;"	d
_cimg_mp_check_vector0	.\CImg.h	13738;"	d
_cimg_mp_constant	.\CImg.h	13741;"	d
_cimg_mp_defunc	.\CImg.h	13739;"	d
_cimg_mp_is_constant	.\CImg.h	13729;"	d
_cimg_mp_is_scalar	.\CImg.h	13730;"	d
_cimg_mp_is_temp	.\CImg.h	13731;"	d
_cimg_mp_is_variable	.\CImg.h	13732;"	d
_cimg_mp_is_vector	.\CImg.h	13733;"	d
_cimg_mp_return	.\CImg.h	13740;"	d
_cimg_mp_scalar0	.\CImg.h	13742;"	d
_cimg_mp_scalar1	.\CImg.h	13743;"	d
_cimg_mp_scalar2	.\CImg.h	13744;"	d
_cimg_mp_scalar3	.\CImg.h	13745;"	d
_cimg_mp_scalar6	.\CImg.h	13746;"	d
_cimg_mp_scalar7	.\CImg.h	13747;"	d
_cimg_mp_vector1_v	.\CImg.h	13748;"	d
_cimg_mp_vector2_sv	.\CImg.h	13749;"	d
_cimg_mp_vector2_vs	.\CImg.h	13750;"	d
_cimg_mp_vector2_vv	.\CImg.h	13751;"	d
_cimg_mp_vector3_vss	.\CImg.h	13752;"	d
_cimg_mp_vector_size	.\CImg.h	13734;"	d
_cimg_mp_x	.\CImg.h	13813;"	d
_cimg_mp_y	.\CImg.h	13814;"	d
_cimg_mp_z	.\CImg.h	13815;"	d
_cimg_recursive_apply	.\CImg.h	/^    static void _cimg_recursive_apply(T *data, const double filter[], const int N, const unsigned long off,$/;"	f	struct:cimg_library_suffixed::CImg
_cimg_redefine_False	.\CImg.h	291;"	d
_cimg_redefine_None	.\CImg.h	415;"	d
_cimg_redefine_PI	.\CImg.h	476;"	d
_cimg_redefine_True	.\CImg.h	287;"	d
_cimg_redefine_max	.\CImg.h	472;"	d
_cimg_redefine_min	.\CImg.h	468;"	d
_cimg_save_cimg_case	.\CImg.h	53603;"	d
_cimg_save_gif_ext	.\CImg.h	53436;"	d
_cimg_save_pandore_case	.\CImg.h	48867;"	d
_cimg_save_tiff	.\CImg.h	48395;"	d
_cimg_set_key	.\CImg.h	6943;"	d
_cimg_sge_ext1	.\CImg.h	49287;"	d
_cimg_sge_ext2	.\CImg.h	49288;"	d
_cimg_sie_ext1	.\CImg.h	49339;"	d
_cimg_sie_ext2	.\CImg.h	49340;"	d
_cimg_test_temporary_path	.\CImg.h	54425;"	d
_cimg_unserialize_case	.\CImg.h	54162;"	d
_cimg_vecalign2d	.\CImg.h	27653;"	d
_cimg_vecalign3d	.\CImg.h	27684;"	d
_cimgdisplay_instance	.\CImg.h	2046;"	d
_cimglist_def_is_same	.\CImg.h	50884;"	d
_cimglist_def_is_same1	.\CImg.h	50854;"	d
_cimglist_def_is_same2	.\CImg.h	50863;"	d
_cimglist_def_is_same3	.\CImg.h	50872;"	d
_cimglist_instance	.\CImg.h	2050;"	d
_cimgz_load_cimg_case	.\CImg.h	52176;"	d
_cimgz_unserialize_case	.\CImg.h	54141;"	d
_code	.\CImg.h	/^      CImgList<uptrT> _code, &code;$/;"	m	struct:cimg_library_suffixed::CImg::_cimg_math_parser
_colormap	.\CImg.h	/^    Colormap _colormap;$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_cubic_atX	.\CImg.h	/^    Tfloat _cubic_atX(const float fx, const int y, const int z, const int c,$/;"	f	struct:cimg_library_suffixed::CImg
_cubic_atX	.\CImg.h	/^    Tfloat _cubic_atX(const float fx, const int y=0, const int z=0, const int c=0) const {$/;"	f	struct:cimg_library_suffixed::CImg
_cubic_atXY	.\CImg.h	/^    Tfloat _cubic_atXY(const float fx, const float fy, const int z, const int c,$/;"	f	struct:cimg_library_suffixed::CImg
_cubic_atXY	.\CImg.h	/^    Tfloat _cubic_atXY(const float fx, const float fy, const int z=0, const int c=0) const {$/;"	f	struct:cimg_library_suffixed::CImg
_cubic_atXYZ	.\CImg.h	/^    Tfloat _cubic_atXYZ(const float fx, const float fy, const float fz, const int c,$/;"	f	struct:cimg_library_suffixed::CImg
_cubic_atXYZ	.\CImg.h	/^    Tfloat _cubic_atXYZ(const float fx, const float fy, const float fz, const int c=0) const {$/;"	f	struct:cimg_library_suffixed::CImg
_curr_mode	.\CImg.h	/^    DEVMODE _curr_mode;$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_data	.\CImg.h	/^    CImg<T> *_data;$/;"	m	struct:cimg_library_suffixed::CImgList
_data	.\CImg.h	/^    T *_data;$/;"	m	struct:cimg_library_suffixed::CImg
_data	.\CImg.h	/^    unsigned int *_data;$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_data	.\CImg.h	/^    void *_data;$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_data_font90x103	.\CImg.h	/^    static const char *const _data_font90x103[] = {  \/\/ Defined as an array to avoid MS compiler limit about constant string (65Kb).$/;"	m	namespace:cimg_library_suffixed::cimg
_depth	.\CImg.h	/^    unsigned int _width, _height, _depth, _spectrum;$/;"	m	struct:cimg_library_suffixed::CImg
_desinit_fullscreen	.\CImg.h	/^    void _desinit_fullscreen() {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
_display	.\CImg.h	/^    const CImg<T>& _display(CImgDisplay &disp, const char *const title, const bool display_info,$/;"	f	struct:cimg_library_suffixed::CImg
_display	.\CImg.h	/^    const CImgList<T>& _display(CImgDisplay &disp, const char *const title, const bool display_info,$/;"	f	struct:cimg_library_suffixed::CImgList
_display_graph	.\CImg.h	/^    const CImg<T>& _display_graph(CImgDisplay &disp, const char *const title=0,$/;"	f	struct:cimg_library_suffixed::CImg
_display_object3d	.\CImg.h	/^    const CImg<T>& _display_object3d(CImgDisplay& disp, const char *const title,$/;"	f	struct:cimg_library_suffixed::CImg
_distance_core	.\CImg.h	/^    CImg<T>& _distance_core(long (*const sep)(const long, const long, const long *const),$/;"	f	struct:cimg_library_suffixed::CImg
_distance_dist_cdt	.\CImg.h	/^    static long _distance_dist_cdt(const long x, const long i, const long *const g) {$/;"	f	struct:cimg_library_suffixed::CImg
_distance_dist_edt	.\CImg.h	/^    static long _distance_dist_edt(const long x, const long i, const long *const g) {$/;"	f	struct:cimg_library_suffixed::CImg
_distance_dist_mdt	.\CImg.h	/^    static long _distance_dist_mdt(const long x, const long i, const long *const g) {$/;"	f	struct:cimg_library_suffixed::CImg
_distance_scan	.\CImg.h	/^    static void _distance_scan(const unsigned int len,$/;"	f	struct:cimg_library_suffixed::CImg
_distance_sep_cdt	.\CImg.h	/^    static long _distance_sep_cdt(const long i, const long u, const long *const g) {$/;"	f	struct:cimg_library_suffixed::CImg
_distance_sep_edt	.\CImg.h	/^    static long _distance_sep_edt(const long i, const long u, const long *const g) {$/;"	f	struct:cimg_library_suffixed::CImg
_distance_sep_mdt	.\CImg.h	/^    static long _distance_sep_mdt(const long i, const long u, const long *const g) {$/;"	f	struct:cimg_library_suffixed::CImg
_draw_ellipse	.\CImg.h	/^    CImg<T>& _draw_ellipse(const int x0, const int y0, const float r1, const float r2, const float angle,$/;"	f	struct:cimg_library_suffixed::CImg
_draw_object3d	.\CImg.h	/^    CImg<T>& _draw_object3d(void *const pboard, CImg<tz>& zbuffer,$/;"	f	struct:cimg_library_suffixed::CImg
_draw_scanline	.\CImg.h	/^    CImg<T>& _draw_scanline(const int x0, const int x1, const int y,$/;"	f	struct:cimg_library_suffixed::CImg
_draw_text	.\CImg.h	/^    CImg<T>& _draw_text(const int x0, const int y0,$/;"	f	struct:cimg_library_suffixed::CImg
_draw_triangle	.\CImg.h	/^    CImg<T>& _draw_triangle(const int x0, const int y0,$/;"	f	struct:cimg_library_suffixed::CImg
_eik_priority_queue_insert	.\CImg.h	/^    void _eik_priority_queue_insert(CImg<charT>& state, unsigned int& siz, const t value,$/;"	f	struct:cimg_library_suffixed::CImg
_eval	.\CImg.h	/^    CImg<doubleT> _eval(CImg<T> *const output, const char *const expression, const CImg<t>& xyzc,$/;"	f	struct:cimg_library_suffixed::CImg
_eval	.\CImg.h	/^    double _eval(CImg<T> *const img_output, const char *const expression,$/;"	f	struct:cimg_library_suffixed::CImg
_eval	.\CImg.h	/^    void _eval(CImg<t>& output, CImg<T> *const img_output, const char *const expression,$/;"	f	struct:cimg_library_suffixed::CImg
_events_thread	.\CImg.h	/^    static DWORD WINAPI _events_thread(void* arg) {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
_events_thread	.\CImg.h	/^    static void* _events_thread(void *arg) { \/\/ Thread to manage events for all opened display windows.$/;"	f	struct:cimg_library_suffixed::CImgDisplay
_exception_mode	.\CImg.h	/^    inline unsigned int& _exception_mode(const unsigned int value, const bool is_set) {$/;"	f	namespace:cimg_library_suffixed::cimg
_fill	.\CImg.h	/^    CImg<T>& _fill(const char *const expression, const bool repeat_values, const bool allow_formula,$/;"	f	struct:cimg_library_suffixed::CImg
_fitscreen	.\CImg.h	/^    static unsigned int _fitscreen(const unsigned int dx, const unsigned int dy, const unsigned int dz,$/;"	f	struct:cimg_library_suffixed::CImgDisplay
_fps_fps	.\CImg.h	/^    float _fps_fps, _min, _max;$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_fps_frames	.\CImg.h	/^    unsigned long _timer, _fps_frames, _fps_timer;$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_fps_timer	.\CImg.h	/^    unsigned long _timer, _fps_frames, _fps_timer;$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_functor2d_expr	.\CImg.h	/^      _functor2d_expr(const char *const expr):mp(0) {$/;"	f	struct:cimg_library_suffixed::CImg::_functor2d_expr
_functor2d_expr	.\CImg.h	/^    struct _functor2d_expr {$/;"	s	struct:cimg_library_suffixed::CImg
_functor2d_float	.\CImg.h	/^      _functor2d_float(const CImg<T>& pref):ref(pref) {}$/;"	f	struct:cimg_library_suffixed::CImg::_functor2d_float
_functor2d_float	.\CImg.h	/^    struct _functor2d_float {$/;"	s	struct:cimg_library_suffixed::CImg
_functor2d_int	.\CImg.h	/^      _functor2d_int(const CImg<T>& pref):ref(pref) {}$/;"	f	struct:cimg_library_suffixed::CImg::_functor2d_int
_functor2d_int	.\CImg.h	/^    struct _functor2d_int {$/;"	s	struct:cimg_library_suffixed::CImg
_functor3d_expr	.\CImg.h	/^      _functor3d_expr(const char *const expr):mp(0) {$/;"	f	struct:cimg_library_suffixed::CImg::_functor3d_expr
_functor3d_expr	.\CImg.h	/^    struct _functor3d_expr {$/;"	s	struct:cimg_library_suffixed::CImg
_functor3d_float	.\CImg.h	/^      _functor3d_float(const CImg<T>& pref):ref(pref) {}$/;"	f	struct:cimg_library_suffixed::CImg::_functor3d_float
_functor3d_float	.\CImg.h	/^    struct _functor3d_float {$/;"	s	struct:cimg_library_suffixed::CImg
_functor3d_int	.\CImg.h	/^      _functor3d_int(const CImg<T>& pref):ref(pref) {}$/;"	f	struct:cimg_library_suffixed::CImg::_functor3d_int
_functor3d_int	.\CImg.h	/^    struct _functor3d_int {$/;"	s	struct:cimg_library_suffixed::CImg
_functor4d_int	.\CImg.h	/^      _functor4d_int(const CImg<T>& pref):ref(pref) {}$/;"	f	struct:cimg_library_suffixed::CImg::_functor4d_int
_functor4d_int	.\CImg.h	/^    struct _functor4d_int {$/;"	s	struct:cimg_library_suffixed::CImg
_functor4d_streamline2d_directed	.\CImg.h	/^      _functor4d_streamline2d_directed(const CImg<T>& pref):ref(pref) {}$/;"	f	struct:cimg_library_suffixed::CImg::_functor4d_streamline2d_directed
_functor4d_streamline2d_directed	.\CImg.h	/^    struct _functor4d_streamline2d_directed {$/;"	s	struct:cimg_library_suffixed::CImg
_functor4d_streamline2d_oriented	.\CImg.h	/^      _functor4d_streamline2d_oriented(const CImg<T>& pref):ref(pref),pI(0) { pI = new CImg<floatT>(2,2,1,2); }$/;"	f	struct:cimg_library_suffixed::CImg::_functor4d_streamline2d_oriented
_functor4d_streamline2d_oriented	.\CImg.h	/^    struct _functor4d_streamline2d_oriented {$/;"	s	struct:cimg_library_suffixed::CImg
_functor4d_streamline3d_directed	.\CImg.h	/^      _functor4d_streamline3d_directed(const CImg<T>& pref):ref(pref) {}$/;"	f	struct:cimg_library_suffixed::CImg::_functor4d_streamline3d_directed
_functor4d_streamline3d_directed	.\CImg.h	/^    struct _functor4d_streamline3d_directed {$/;"	s	struct:cimg_library_suffixed::CImg
_functor4d_streamline3d_oriented	.\CImg.h	/^      _functor4d_streamline3d_oriented(const CImg<T>& pref):ref(pref),pI(0) { pI = new CImg<floatT>(2,2,2,3); }$/;"	f	struct:cimg_library_suffixed::CImg::_functor4d_streamline3d_oriented
_functor4d_streamline3d_oriented	.\CImg.h	/^    struct _functor4d_streamline3d_oriented {$/;"	s	struct:cimg_library_suffixed::CImg
_functor4d_streamline_expr	.\CImg.h	/^      _functor4d_streamline_expr(const char *const expr):mp(0) {$/;"	f	struct:cimg_library_suffixed::CImg::_functor4d_streamline_expr
_functor4d_streamline_expr	.\CImg.h	/^    struct _functor4d_streamline_expr {$/;"	s	struct:cimg_library_suffixed::CImg
_get_label	.\CImg.h	/^    CImg<unsigned long> _get_label(const unsigned int nb, const int$/;"	f	struct:cimg_library_suffixed::CImg
_get_patchmatch	.\CImg.h	/^    CImg<intT> _get_patchmatch(const CImg<T>& patch_image,$/;"	f	struct:cimg_library_suffixed::CImg
_get_permute_axes	.\CImg.h	/^    CImg<t> _get_permute_axes(const char *const permut, const t&) const {$/;"	f	struct:cimg_library_suffixed::CImg
_get_select	.\CImg.h	/^    CImg<intT> _get_select(CImgDisplay &disp, const char *const title, const bool feature_type,$/;"	f	struct:cimg_library_suffixed::CImgList
_get_select	.\CImg.h	/^    CImg<intT> _get_select(CImgDisplay &disp, const char *const title,$/;"	f	struct:cimg_library_suffixed::CImg
_handle_events	.\CImg.h	/^    static LRESULT APIENTRY _handle_events(HWND window, UINT msg, WPARAM wParam, LPARAM lParam) {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
_handle_events	.\CImg.h	/^    void _handle_events(const XEvent *const pevent) {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
_hdc	.\CImg.h	/^    HDC _hdc;$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_height	.\CImg.h	/^    unsigned int _width, _height, _depth, _spectrum;$/;"	m	struct:cimg_library_suffixed::CImg
_height	.\CImg.h	/^    unsigned int _width, _height, _normalization;$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_image	.\CImg.h	/^    XImage *_image;$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_img_stats	.\CImg.h	/^      CImg<doubleT> _img_stats, &img_stats;$/;"	m	struct:cimg_library_suffixed::CImg::_cimg_math_parser
_init_fullscreen	.\CImg.h	/^    void _init_fullscreen() {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
_is_CImg3d	.\CImg.h	/^    static bool _is_CImg3d(const T val, const char c) {$/;"	f	struct:cimg_library_suffixed::CImg
_is_closed	.\CImg.h	/^    bool _is_closed, _is_resized, _is_moved, _is_event,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_created	.\CImg.h	/^    HANDLE _thread, _is_created, _mutex;$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_cursor_visible	.\CImg.h	/^    bool _is_mouse_tracked, _is_cursor_visible;$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_event	.\CImg.h	/^    bool _is_closed, _is_resized, _is_moved, _is_event,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_fullscreen	.\CImg.h	/^    bool _is_fullscreen;$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_key0	.\CImg.h	/^      _is_key3, _is_key4, _is_key5, _is_key6, _is_key7, _is_key8, _is_key9, _is_key0,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_key1	.\CImg.h	/^      _is_keyF8, _is_keyF9, _is_keyF10, _is_keyF11, _is_keyF12, _is_keyPAUSE, _is_key1, _is_key2,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_key2	.\CImg.h	/^      _is_keyF8, _is_keyF9, _is_keyF10, _is_keyF11, _is_keyF12, _is_keyPAUSE, _is_key1, _is_key2,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_key3	.\CImg.h	/^      _is_key3, _is_key4, _is_key5, _is_key6, _is_key7, _is_key8, _is_key9, _is_key0,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_key4	.\CImg.h	/^      _is_key3, _is_key4, _is_key5, _is_key6, _is_key7, _is_key8, _is_key9, _is_key0,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_key5	.\CImg.h	/^      _is_key3, _is_key4, _is_key5, _is_key6, _is_key7, _is_key8, _is_key9, _is_key0,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_key6	.\CImg.h	/^      _is_key3, _is_key4, _is_key5, _is_key6, _is_key7, _is_key8, _is_key9, _is_key0,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_key7	.\CImg.h	/^      _is_key3, _is_key4, _is_key5, _is_key6, _is_key7, _is_key8, _is_key9, _is_key0,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_key8	.\CImg.h	/^      _is_key3, _is_key4, _is_key5, _is_key6, _is_key7, _is_key8, _is_key9, _is_key0,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_key9	.\CImg.h	/^      _is_key3, _is_key4, _is_key5, _is_key6, _is_key7, _is_key8, _is_key9, _is_key0,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyA	.\CImg.h	/^      _is_keyEND, _is_keyPAGEDOWN, _is_keyCAPSLOCK, _is_keyA, _is_keyS, _is_keyD, _is_keyF, _is_keyG,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyALT	.\CImg.h	/^      _is_keyAPPLEFT, _is_keyALT, _is_keySPACE, _is_keyALTGR, _is_keyAPPRIGHT, _is_keyMENU, _is_keyCTRLRIGHT,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyALTGR	.\CImg.h	/^      _is_keyAPPLEFT, _is_keyALT, _is_keySPACE, _is_keyALTGR, _is_keyAPPRIGHT, _is_keyMENU, _is_keyCTRLRIGHT,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyAPPLEFT	.\CImg.h	/^      _is_keyAPPLEFT, _is_keyALT, _is_keySPACE, _is_keyALTGR, _is_keyAPPRIGHT, _is_keyMENU, _is_keyCTRLRIGHT,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyAPPRIGHT	.\CImg.h	/^      _is_keyAPPLEFT, _is_keyALT, _is_keySPACE, _is_keyALTGR, _is_keyAPPRIGHT, _is_keyMENU, _is_keyCTRLRIGHT,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyARROWDOWN	.\CImg.h	/^      _is_keyARROWLEFT, _is_keyARROWDOWN, _is_keyARROWRIGHT, _is_keyPAD0, _is_keyPAD1, _is_keyPAD2, _is_keyPAD3,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyARROWLEFT	.\CImg.h	/^      _is_keyARROWLEFT, _is_keyARROWDOWN, _is_keyARROWRIGHT, _is_keyPAD0, _is_keyPAD1, _is_keyPAD2, _is_keyPAD3,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyARROWRIGHT	.\CImg.h	/^      _is_keyARROWLEFT, _is_keyARROWDOWN, _is_keyARROWRIGHT, _is_keyPAD0, _is_keyPAD1, _is_keyPAD2, _is_keyPAD3,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyARROWUP	.\CImg.h	/^      _is_keyC, _is_keyV, _is_keyB, _is_keyN, _is_keyM, _is_keySHIFTRIGHT, _is_keyARROWUP, _is_keyCTRLLEFT,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyB	.\CImg.h	/^      _is_keyC, _is_keyV, _is_keyB, _is_keyN, _is_keyM, _is_keySHIFTRIGHT, _is_keyARROWUP, _is_keyCTRLLEFT,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyBACKSPACE	.\CImg.h	/^      _is_keyBACKSPACE, _is_keyINSERT, _is_keyHOME, _is_keyPAGEUP, _is_keyTAB, _is_keyQ, _is_keyW, _is_keyE,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyC	.\CImg.h	/^      _is_keyC, _is_keyV, _is_keyB, _is_keyN, _is_keyM, _is_keySHIFTRIGHT, _is_keyARROWUP, _is_keyCTRLLEFT,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyCAPSLOCK	.\CImg.h	/^      _is_keyEND, _is_keyPAGEDOWN, _is_keyCAPSLOCK, _is_keyA, _is_keyS, _is_keyD, _is_keyF, _is_keyG,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyCTRLLEFT	.\CImg.h	/^      _is_keyC, _is_keyV, _is_keyB, _is_keyN, _is_keyM, _is_keySHIFTRIGHT, _is_keyARROWUP, _is_keyCTRLLEFT,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyCTRLRIGHT	.\CImg.h	/^      _is_keyAPPLEFT, _is_keyALT, _is_keySPACE, _is_keyALTGR, _is_keyAPPRIGHT, _is_keyMENU, _is_keyCTRLRIGHT,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyD	.\CImg.h	/^      _is_keyEND, _is_keyPAGEDOWN, _is_keyCAPSLOCK, _is_keyA, _is_keyS, _is_keyD, _is_keyF, _is_keyG,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyDELETE	.\CImg.h	/^      _is_keyR, _is_keyT, _is_keyY, _is_keyU, _is_keyI, _is_keyO, _is_keyP, _is_keyDELETE,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyE	.\CImg.h	/^      _is_keyBACKSPACE, _is_keyINSERT, _is_keyHOME, _is_keyPAGEUP, _is_keyTAB, _is_keyQ, _is_keyW, _is_keyE,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyEND	.\CImg.h	/^      _is_keyEND, _is_keyPAGEDOWN, _is_keyCAPSLOCK, _is_keyA, _is_keyS, _is_keyD, _is_keyF, _is_keyG,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyENTER	.\CImg.h	/^      _is_keyH, _is_keyJ, _is_keyK, _is_keyL, _is_keyENTER, _is_keySHIFTLEFT, _is_keyZ, _is_keyX,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyESC	.\CImg.h	/^      _is_keyESC, _is_keyF1, _is_keyF2, _is_keyF3, _is_keyF4, _is_keyF5, _is_keyF6, _is_keyF7,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyF	.\CImg.h	/^      _is_keyEND, _is_keyPAGEDOWN, _is_keyCAPSLOCK, _is_keyA, _is_keyS, _is_keyD, _is_keyF, _is_keyG,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyF1	.\CImg.h	/^      _is_keyESC, _is_keyF1, _is_keyF2, _is_keyF3, _is_keyF4, _is_keyF5, _is_keyF6, _is_keyF7,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyF10	.\CImg.h	/^      _is_keyF8, _is_keyF9, _is_keyF10, _is_keyF11, _is_keyF12, _is_keyPAUSE, _is_key1, _is_key2,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyF11	.\CImg.h	/^      _is_keyF8, _is_keyF9, _is_keyF10, _is_keyF11, _is_keyF12, _is_keyPAUSE, _is_key1, _is_key2,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyF12	.\CImg.h	/^      _is_keyF8, _is_keyF9, _is_keyF10, _is_keyF11, _is_keyF12, _is_keyPAUSE, _is_key1, _is_key2,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyF2	.\CImg.h	/^      _is_keyESC, _is_keyF1, _is_keyF2, _is_keyF3, _is_keyF4, _is_keyF5, _is_keyF6, _is_keyF7,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyF3	.\CImg.h	/^      _is_keyESC, _is_keyF1, _is_keyF2, _is_keyF3, _is_keyF4, _is_keyF5, _is_keyF6, _is_keyF7,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyF4	.\CImg.h	/^      _is_keyESC, _is_keyF1, _is_keyF2, _is_keyF3, _is_keyF4, _is_keyF5, _is_keyF6, _is_keyF7,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyF5	.\CImg.h	/^      _is_keyESC, _is_keyF1, _is_keyF2, _is_keyF3, _is_keyF4, _is_keyF5, _is_keyF6, _is_keyF7,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyF6	.\CImg.h	/^      _is_keyESC, _is_keyF1, _is_keyF2, _is_keyF3, _is_keyF4, _is_keyF5, _is_keyF6, _is_keyF7,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyF7	.\CImg.h	/^      _is_keyESC, _is_keyF1, _is_keyF2, _is_keyF3, _is_keyF4, _is_keyF5, _is_keyF6, _is_keyF7,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyF8	.\CImg.h	/^      _is_keyF8, _is_keyF9, _is_keyF10, _is_keyF11, _is_keyF12, _is_keyPAUSE, _is_key1, _is_key2,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyF9	.\CImg.h	/^      _is_keyF8, _is_keyF9, _is_keyF10, _is_keyF11, _is_keyF12, _is_keyPAUSE, _is_key1, _is_key2,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyG	.\CImg.h	/^      _is_keyEND, _is_keyPAGEDOWN, _is_keyCAPSLOCK, _is_keyA, _is_keyS, _is_keyD, _is_keyF, _is_keyG,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyH	.\CImg.h	/^      _is_keyH, _is_keyJ, _is_keyK, _is_keyL, _is_keyENTER, _is_keySHIFTLEFT, _is_keyZ, _is_keyX,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyHOME	.\CImg.h	/^      _is_keyBACKSPACE, _is_keyINSERT, _is_keyHOME, _is_keyPAGEUP, _is_keyTAB, _is_keyQ, _is_keyW, _is_keyE,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyI	.\CImg.h	/^      _is_keyR, _is_keyT, _is_keyY, _is_keyU, _is_keyI, _is_keyO, _is_keyP, _is_keyDELETE,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyINSERT	.\CImg.h	/^      _is_keyBACKSPACE, _is_keyINSERT, _is_keyHOME, _is_keyPAGEUP, _is_keyTAB, _is_keyQ, _is_keyW, _is_keyE,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyJ	.\CImg.h	/^      _is_keyH, _is_keyJ, _is_keyK, _is_keyL, _is_keyENTER, _is_keySHIFTLEFT, _is_keyZ, _is_keyX,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyK	.\CImg.h	/^      _is_keyH, _is_keyJ, _is_keyK, _is_keyL, _is_keyENTER, _is_keySHIFTLEFT, _is_keyZ, _is_keyX,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyL	.\CImg.h	/^      _is_keyH, _is_keyJ, _is_keyK, _is_keyL, _is_keyENTER, _is_keySHIFTLEFT, _is_keyZ, _is_keyX,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyM	.\CImg.h	/^      _is_keyC, _is_keyV, _is_keyB, _is_keyN, _is_keyM, _is_keySHIFTRIGHT, _is_keyARROWUP, _is_keyCTRLLEFT,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyMENU	.\CImg.h	/^      _is_keyAPPLEFT, _is_keyALT, _is_keySPACE, _is_keyALTGR, _is_keyAPPRIGHT, _is_keyMENU, _is_keyCTRLRIGHT,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyN	.\CImg.h	/^      _is_keyC, _is_keyV, _is_keyB, _is_keyN, _is_keyM, _is_keySHIFTRIGHT, _is_keyARROWUP, _is_keyCTRLLEFT,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyO	.\CImg.h	/^      _is_keyR, _is_keyT, _is_keyY, _is_keyU, _is_keyI, _is_keyO, _is_keyP, _is_keyDELETE,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyP	.\CImg.h	/^      _is_keyR, _is_keyT, _is_keyY, _is_keyU, _is_keyI, _is_keyO, _is_keyP, _is_keyDELETE,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyPAD0	.\CImg.h	/^      _is_keyARROWLEFT, _is_keyARROWDOWN, _is_keyARROWRIGHT, _is_keyPAD0, _is_keyPAD1, _is_keyPAD2, _is_keyPAD3,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyPAD1	.\CImg.h	/^      _is_keyARROWLEFT, _is_keyARROWDOWN, _is_keyARROWRIGHT, _is_keyPAD0, _is_keyPAD1, _is_keyPAD2, _is_keyPAD3,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyPAD2	.\CImg.h	/^      _is_keyARROWLEFT, _is_keyARROWDOWN, _is_keyARROWRIGHT, _is_keyPAD0, _is_keyPAD1, _is_keyPAD2, _is_keyPAD3,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyPAD3	.\CImg.h	/^      _is_keyARROWLEFT, _is_keyARROWDOWN, _is_keyARROWRIGHT, _is_keyPAD0, _is_keyPAD1, _is_keyPAD2, _is_keyPAD3,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyPAD4	.\CImg.h	/^      _is_keyPAD4, _is_keyPAD5, _is_keyPAD6, _is_keyPAD7, _is_keyPAD8, _is_keyPAD9, _is_keyPADADD, _is_keyPADSUB,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyPAD5	.\CImg.h	/^      _is_keyPAD4, _is_keyPAD5, _is_keyPAD6, _is_keyPAD7, _is_keyPAD8, _is_keyPAD9, _is_keyPADADD, _is_keyPADSUB,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyPAD6	.\CImg.h	/^      _is_keyPAD4, _is_keyPAD5, _is_keyPAD6, _is_keyPAD7, _is_keyPAD8, _is_keyPAD9, _is_keyPADADD, _is_keyPADSUB,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyPAD7	.\CImg.h	/^      _is_keyPAD4, _is_keyPAD5, _is_keyPAD6, _is_keyPAD7, _is_keyPAD8, _is_keyPAD9, _is_keyPADADD, _is_keyPADSUB,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyPAD8	.\CImg.h	/^      _is_keyPAD4, _is_keyPAD5, _is_keyPAD6, _is_keyPAD7, _is_keyPAD8, _is_keyPAD9, _is_keyPADADD, _is_keyPADSUB,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyPAD9	.\CImg.h	/^      _is_keyPAD4, _is_keyPAD5, _is_keyPAD6, _is_keyPAD7, _is_keyPAD8, _is_keyPAD9, _is_keyPADADD, _is_keyPADSUB,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyPADADD	.\CImg.h	/^      _is_keyPAD4, _is_keyPAD5, _is_keyPAD6, _is_keyPAD7, _is_keyPAD8, _is_keyPAD9, _is_keyPADADD, _is_keyPADSUB,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyPADDIV	.\CImg.h	/^      _is_keyPADMUL, _is_keyPADDIV;$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyPADMUL	.\CImg.h	/^      _is_keyPADMUL, _is_keyPADDIV;$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyPADSUB	.\CImg.h	/^      _is_keyPAD4, _is_keyPAD5, _is_keyPAD6, _is_keyPAD7, _is_keyPAD8, _is_keyPAD9, _is_keyPADADD, _is_keyPADSUB,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyPAGEDOWN	.\CImg.h	/^      _is_keyEND, _is_keyPAGEDOWN, _is_keyCAPSLOCK, _is_keyA, _is_keyS, _is_keyD, _is_keyF, _is_keyG,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyPAGEUP	.\CImg.h	/^      _is_keyBACKSPACE, _is_keyINSERT, _is_keyHOME, _is_keyPAGEUP, _is_keyTAB, _is_keyQ, _is_keyW, _is_keyE,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyPAUSE	.\CImg.h	/^      _is_keyF8, _is_keyF9, _is_keyF10, _is_keyF11, _is_keyF12, _is_keyPAUSE, _is_key1, _is_key2,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyQ	.\CImg.h	/^      _is_keyBACKSPACE, _is_keyINSERT, _is_keyHOME, _is_keyPAGEUP, _is_keyTAB, _is_keyQ, _is_keyW, _is_keyE,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyR	.\CImg.h	/^      _is_keyR, _is_keyT, _is_keyY, _is_keyU, _is_keyI, _is_keyO, _is_keyP, _is_keyDELETE,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyS	.\CImg.h	/^      _is_keyEND, _is_keyPAGEDOWN, _is_keyCAPSLOCK, _is_keyA, _is_keyS, _is_keyD, _is_keyF, _is_keyG,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keySHIFTLEFT	.\CImg.h	/^      _is_keyH, _is_keyJ, _is_keyK, _is_keyL, _is_keyENTER, _is_keySHIFTLEFT, _is_keyZ, _is_keyX,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keySHIFTRIGHT	.\CImg.h	/^      _is_keyC, _is_keyV, _is_keyB, _is_keyN, _is_keyM, _is_keySHIFTRIGHT, _is_keyARROWUP, _is_keyCTRLLEFT,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keySPACE	.\CImg.h	/^      _is_keyAPPLEFT, _is_keyALT, _is_keySPACE, _is_keyALTGR, _is_keyAPPRIGHT, _is_keyMENU, _is_keyCTRLRIGHT,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyT	.\CImg.h	/^      _is_keyR, _is_keyT, _is_keyY, _is_keyU, _is_keyI, _is_keyO, _is_keyP, _is_keyDELETE,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyTAB	.\CImg.h	/^      _is_keyBACKSPACE, _is_keyINSERT, _is_keyHOME, _is_keyPAGEUP, _is_keyTAB, _is_keyQ, _is_keyW, _is_keyE,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyU	.\CImg.h	/^      _is_keyR, _is_keyT, _is_keyY, _is_keyU, _is_keyI, _is_keyO, _is_keyP, _is_keyDELETE,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyV	.\CImg.h	/^      _is_keyC, _is_keyV, _is_keyB, _is_keyN, _is_keyM, _is_keySHIFTRIGHT, _is_keyARROWUP, _is_keyCTRLLEFT,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyW	.\CImg.h	/^      _is_keyBACKSPACE, _is_keyINSERT, _is_keyHOME, _is_keyPAGEUP, _is_keyTAB, _is_keyQ, _is_keyW, _is_keyE,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyX	.\CImg.h	/^      _is_keyH, _is_keyJ, _is_keyK, _is_keyL, _is_keyENTER, _is_keySHIFTLEFT, _is_keyZ, _is_keyX,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyY	.\CImg.h	/^      _is_keyR, _is_keyT, _is_keyY, _is_keyU, _is_keyI, _is_keyO, _is_keyP, _is_keyDELETE,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_keyZ	.\CImg.h	/^      _is_keyH, _is_keyJ, _is_keyK, _is_keyL, _is_keyENTER, _is_keySHIFTLEFT, _is_keyZ, _is_keyX,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_mouse_tracked	.\CImg.h	/^    bool _is_mouse_tracked, _is_cursor_visible;$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_moved	.\CImg.h	/^    bool _is_closed, _is_resized, _is_moved, _is_event,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_resized	.\CImg.h	/^    bool _is_closed, _is_resized, _is_moved, _is_event,$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_is_shared	.\CImg.h	/^    bool _is_shared;$/;"	m	struct:cimg_library_suffixed::CImg
_isoline3d_indice	.\CImg.h	/^    static int _isoline3d_indice(const unsigned int edge, const CImg<t>& indices1, const CImg<t>& indices2,$/;"	f	struct:cimg_library_suffixed::CImg
_isosurface3d_indice	.\CImg.h	/^    static int _isosurface3d_indice(const unsigned int edge, const CImg<t>& indices1, const CImg<t>& indices2,$/;"	f	struct:cimg_library_suffixed::CImg
_keys	.\CImg.h	/^    unsigned int _window_width, _window_height, _button, *_keys, *_released_keys;$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_linear_atX	.\CImg.h	/^    Tfloat _linear_atX(const float fx, const int y=0, const int z=0, const int c=0) const {$/;"	f	struct:cimg_library_suffixed::CImg
_linear_atXY	.\CImg.h	/^    Tfloat _linear_atXY(const float fx, const float fy, const int z=0, const int c=0) const {$/;"	f	struct:cimg_library_suffixed::CImg
_linear_atXYZ	.\CImg.h	/^    Tfloat _linear_atXYZ(const float fx, const float fy=0, const float fz=0, const int c=0) const {$/;"	f	struct:cimg_library_suffixed::CImg
_linear_atXYZC	.\CImg.h	/^    Tfloat _linear_atXYZC(const float fx, const float fy=0, const float fz=0, const float fc=0) const {$/;"	f	struct:cimg_library_suffixed::CImg
_list_median	.\CImg.h	/^      CImgList<doubleT> _list_stats, &list_stats, _list_median, &list_median;$/;"	m	struct:cimg_library_suffixed::CImg::_cimg_math_parser
_list_stats	.\CImg.h	/^      CImgList<doubleT> _list_stats, &list_stats, _list_median, &list_median;$/;"	m	struct:cimg_library_suffixed::CImg::_cimg_math_parser
_load_analyze	.\CImg.h	/^    CImg<T>& _load_analyze(std::FILE *const file, const char *const filename, float *const voxel_size=0) {$/;"	f	struct:cimg_library_suffixed::CImg
_load_ascii	.\CImg.h	/^    CImg<T>& _load_ascii(std::FILE *const file, const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImg
_load_bmp	.\CImg.h	/^    CImg<T>& _load_bmp(std::FILE *const file, const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImg
_load_cimg	.\CImg.h	/^    CImgList<T>& _load_cimg(std::FILE *const file, const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImgList
_load_cimg	.\CImg.h	/^    CImgList<T>& _load_cimg(std::FILE *const file, const char *const filename,$/;"	f	struct:cimg_library_suffixed::CImgList
_load_dlm	.\CImg.h	/^    CImg<T>& _load_dlm(std::FILE *const file, const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImg
_load_gif_external	.\CImg.h	/^    CImgList<T>& _load_gif_external(const char *const filename, const bool use_graphicsmagick=false) {$/;"	f	struct:cimg_library_suffixed::CImgList
_load_inr	.\CImg.h	/^    CImg<T>& _load_inr(std::FILE *const file, const char *const filename, float *const voxel_size) {$/;"	f	struct:cimg_library_suffixed::CImg
_load_inr_header	.\CImg.h	/^    static void _load_inr_header(std::FILE *file, int out[8], float *const voxel_size) {$/;"	f	struct:cimg_library_suffixed::CImg
_load_jpeg	.\CImg.h	/^    CImg<T>& _load_jpeg(std::FILE *const file, const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImg
_load_off	.\CImg.h	/^    CImg<T>& _load_off(CImgList<tf>& primitives, CImgList<tc>& colors,$/;"	f	struct:cimg_library_suffixed::CImg
_load_pandore	.\CImg.h	/^    CImg<T>& _load_pandore(std::FILE *const file, const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImg
_load_pfm	.\CImg.h	/^    CImg<T>& _load_pfm(std::FILE *const file, const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImg
_load_png	.\CImg.h	/^    CImg<T>& _load_png(std::FILE *const file, const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImg
_load_pnm	.\CImg.h	/^    CImg<T>& _load_pnm(std::FILE *const file, const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImg
_load_raw	.\CImg.h	/^    CImg<T>& _load_raw(std::FILE *const file, const char *const filename,$/;"	f	struct:cimg_library_suffixed::CImg
_load_rgb	.\CImg.h	/^    CImg<T>& _load_rgb(std::FILE *const file, const char *const filename,$/;"	f	struct:cimg_library_suffixed::CImg
_load_rgba	.\CImg.h	/^    CImg<T>& _load_rgba(std::FILE *const file, const char *const filename,$/;"	f	struct:cimg_library_suffixed::CImg
_load_tiff	.\CImg.h	/^    CImg<T>& _load_tiff(TIFF *const tif, const unsigned int directory,$/;"	f	struct:cimg_library_suffixed::CImg
_load_tiff_contig	.\CImg.h	/^    void _load_tiff_contig(TIFF *const tif, const uint16 samplesperpixel, const uint32 nx, const uint32 ny) {$/;"	f	struct:cimg_library_suffixed::CImg
_load_tiff_separate	.\CImg.h	/^    void _load_tiff_separate(TIFF *const tif, const uint16 samplesperpixel, const uint32 nx, const uint32 ny) {$/;"	f	struct:cimg_library_suffixed::CImg
_load_tiff_tiled_contig	.\CImg.h	/^    void _load_tiff_tiled_contig(TIFF *const tif, const uint16 samplesperpixel,$/;"	f	struct:cimg_library_suffixed::CImg
_load_tiff_tiled_separate	.\CImg.h	/^    void _load_tiff_tiled_separate(TIFF *const tif, const uint16 samplesperpixel,$/;"	f	struct:cimg_library_suffixed::CImg
_load_yuv	.\CImg.h	/^    CImgList<T>& _load_yuv(std::FILE *const file, const char *const filename,$/;"	f	struct:cimg_library_suffixed::CImgList
_logo40x38	.\CImg.h	/^    static CImg<T> _logo40x38() {$/;"	f	struct:cimg_library_suffixed::CImg
_map_window	.\CImg.h	/^    void _map_window() {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
_max	.\CImg.h	/^    float _fps_fps, _min, _max;$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_message	.\CImg.h	/^    char *_message;$/;"	m	struct:cimg_library_suffixed::CImgAbortException
_message	.\CImg.h	/^    char *_message;$/;"	m	struct:cimg_library_suffixed::CImgException
_min	.\CImg.h	/^    float _fps_fps, _min, _max;$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_mouse_x	.\CImg.h	/^    int _window_x, _window_y, _mouse_x, _mouse_y, _wheel;$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_mouse_y	.\CImg.h	/^    int _window_x, _window_y, _mouse_x, _mouse_y, _wheel;$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_mp_arg	.\CImg.h	16841;"	d
_mp_arg	.\CImg.h	16843;"	d
_mp_arg	.\CImg.h	18691;"	d
_mp_complex_pow	.\CImg.h	/^      static void _mp_complex_pow(const double r1, const double i1,$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
_mutex	.\CImg.h	/^    HANDLE _thread, _is_created, _mutex;$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_no_display_exception	.\CImg.h	/^    static void _no_display_exception() {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
_normalization	.\CImg.h	/^    unsigned int _width, _height, _normalization;$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_object3dtoCImg3d	.\CImg.h	/^    float* _object3dtoCImg3d(const CImg<to>& opacities, float *ptrd) const {$/;"	f	struct:cimg_library_suffixed::CImg
_object3dtoCImg3d	.\CImg.h	/^    float* _object3dtoCImg3d(const CImgList<to>& opacities, float *ptrd) const {$/;"	f	struct:cimg_library_suffixed::CImg
_openmp_mode	.\CImg.h	/^    inline unsigned int& _openmp_mode(const unsigned int value, const bool is_set) {$/;"	f	namespace:cimg_library_suffixed::cimg
_paint	.\CImg.h	/^    void _paint(const bool wait_expose=true) {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
_patchmatch	.\CImg.h	/^    static float _patchmatch(const CImg<T>& img1, const CImg<T>& img2,$/;"	f	struct:cimg_library_suffixed::CImg
_priority_queue_insert	.\CImg.h	/^    bool _priority_queue_insert(CImg<boolT>& is_queued, unsigned int& siz, const t value,$/;"	f	struct:cimg_library_suffixed::CImg
_priority_queue_remove	.\CImg.h	/^    CImg<T>& _priority_queue_remove(unsigned int& siz) {$/;"	f	struct:cimg_library_suffixed::CImg
_pythagore	.\CImg.h	/^    inline double _pythagore(double a, double b) {$/;"	f	namespace:cimg_library_suffixed::cimg
_quicksort	.\CImg.h	/^    CImg<T>& _quicksort(const int indm, const int indM, CImg<t>& permutations,$/;"	f	struct:cimg_library_suffixed::CImg
_rand	.\CImg.h	/^    inline unsigned int _rand(const unsigned int seed=0, const bool set_seed=false) {$/;"	f	namespace:cimg_library_suffixed::cimg
_released_keys	.\CImg.h	/^    unsigned int _window_width, _window_height, _button, *_keys, *_released_keys;$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_render_resize	.\CImg.h	/^    static void _render_resize(const T *ptrs, const unsigned int ws, const unsigned int hs,$/;"	f	struct:cimg_library_suffixed::CImgDisplay
_resize	.\CImg.h	/^    void _resize(T pixel_type, const unsigned int ndimx, const unsigned int ndimy, const bool force_redraw) {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
_save_ascii	.\CImg.h	/^    const CImg<T>& _save_ascii(std::FILE *const file, const char *const filename) const {$/;"	f	struct:cimg_library_suffixed::CImg
_save_bmp	.\CImg.h	/^    const CImg<T>& _save_bmp(std::FILE *const file, const char *const filename) const {$/;"	f	struct:cimg_library_suffixed::CImg
_save_cimg	.\CImg.h	/^    const CImgList<T>& _save_cimg(std::FILE *const file, const char *const filename, const bool is_compressed) const {$/;"	f	struct:cimg_library_suffixed::CImgList
_save_cimg	.\CImg.h	/^    const CImgList<T>& _save_cimg(std::FILE *const file, const char *const filename,$/;"	f	struct:cimg_library_suffixed::CImgList
_save_cpp	.\CImg.h	/^    const CImg<T>& _save_cpp(std::FILE *const file, const char *const filename) const {$/;"	f	struct:cimg_library_suffixed::CImg
_save_dlm	.\CImg.h	/^    const CImg<T>& _save_dlm(std::FILE *const file, const char *const filename) const {$/;"	f	struct:cimg_library_suffixed::CImg
_save_empty_cimg	.\CImg.h	/^    static void _save_empty_cimg(std::FILE *const file, const char *const filename,$/;"	f	struct:cimg_library_suffixed::CImgList
_save_inr	.\CImg.h	/^    const CImg<T>& _save_inr(std::FILE *const file, const char *const filename, const float *const voxel_size) const {$/;"	f	struct:cimg_library_suffixed::CImg
_save_jpeg	.\CImg.h	/^    const CImg<T>& _save_jpeg(std::FILE *const file, const char *const filename, const unsigned int quality) const {$/;"	f	struct:cimg_library_suffixed::CImg
_save_off	.\CImg.h	/^    const CImg<T>& _save_off(const CImgList<tf>& primitives, const CImgList<tc>& colors,$/;"	f	struct:cimg_library_suffixed::CImg
_save_pandore	.\CImg.h	/^    const CImg<T>& _save_pandore(std::FILE *const file, const char *const filename,$/;"	f	struct:cimg_library_suffixed::CImg
_save_pandore_header_length	.\CImg.h	/^    unsigned int _save_pandore_header_length(unsigned int id, unsigned int *dims, const unsigned int colorspace) const {$/;"	f	struct:cimg_library_suffixed::CImg
_save_pfm	.\CImg.h	/^    const CImg<T>& _save_pfm(std::FILE *const file, const char *const filename) const {$/;"	f	struct:cimg_library_suffixed::CImg
_save_png	.\CImg.h	/^    const CImg<T>& _save_png(std::FILE *const file, const char *const filename,$/;"	f	struct:cimg_library_suffixed::CImg
_save_pnk	.\CImg.h	/^    const CImg<T>& _save_pnk(std::FILE *const file, const char *const filename) const {$/;"	f	struct:cimg_library_suffixed::CImg
_save_pnm	.\CImg.h	/^    const CImg<T>& _save_pnm(std::FILE *const file, const char *const filename,$/;"	f	struct:cimg_library_suffixed::CImg
_save_raw	.\CImg.h	/^    const CImg<T>& _save_raw(std::FILE *const file, const char *const filename, const bool is_multiplexed) const {$/;"	f	struct:cimg_library_suffixed::CImg
_save_rgb	.\CImg.h	/^    const CImg<T>& _save_rgb(std::FILE *const file, const char *const filename) const {$/;"	f	struct:cimg_library_suffixed::CImg
_save_rgba	.\CImg.h	/^    const CImg<T>& _save_rgba(std::FILE *const file, const char *const filename) const {$/;"	f	struct:cimg_library_suffixed::CImg
_save_tiff	.\CImg.h	/^    const CImg<T>& _save_tiff(TIFF *tif, const unsigned int directory, const t& pixel_t,$/;"	f	struct:cimg_library_suffixed::CImg
_save_tiff	.\CImg.h	/^    const CImg<T>& _save_tiff(TIFF *tif, const unsigned int directory, const unsigned int compression_type,$/;"	f	struct:cimg_library_suffixed::CImg
_save_yuv	.\CImg.h	/^    const CImgList<T>& _save_yuv(std::FILE *const file, const char *const filename, const bool is_rgb) const {$/;"	f	struct:cimg_library_suffixed::CImgList
_set_colormap	.\CImg.h	/^    void _set_colormap(Colormap& _colormap, const unsigned int dim) {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
_shminfo	.\CImg.h	/^    XShmSegmentInfo *_shminfo;$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_size_object3dtoCImg3d	.\CImg.h	/^    unsigned int _size_object3dtoCImg3d(const CImgList<tp>& primitives,$/;"	f	struct:cimg_library_suffixed::CImg
_snprintf	.\CImg.h	/^    inline int _snprintf(char *const s, const size_t n, const char *const format, ...) {$/;"	f	namespace:cimg_library_suffixed::cimg
_snprintf	.\CImg.h	/^    inline int _snprintf(char *const s, const size_t size, const char *const format, ...) {$/;"	f	namespace:cimg_library_suffixed::cimg
_solve	.\CImg.h	/^    CImg<T>& _solve(const CImg<t>& A, const CImg<ti>& indx) {$/;"	f	struct:cimg_library_suffixed::CImg
_sort_files	.\CImg.h	/^  inline int _sort_files(const void* a, const void* b) {$/;"	f	namespace:cimg_library_suffixed::cimg
_spectrum	.\CImg.h	/^    unsigned int _width, _height, _depth, _spectrum;$/;"	m	struct:cimg_library_suffixed::CImg
_sprintf	.\CImg.h	/^    inline int _sprintf(char *const s, const char *const format, ...) {$/;"	f	namespace:cimg_library_suffixed::cimg
_sscanf	.\CImg.h	/^    inline int _sscanf(const char *const s, const char *const format, ...) {$/;"	f	namespace:cimg_library_suffixed::cimg
_system_strescape	.\CImg.h	/^    CImg<T>& _system_strescape() {$/;"	f	struct:cimg_library_suffixed::CImg
_thread	.\CImg.h	/^    HANDLE _thread, _is_created, _mutex;$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_timer	.\CImg.h	/^    unsigned long _timer, _fps_frames, _fps_timer;$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_title	.\CImg.h	/^    char *_title;$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_update_window_pos	.\CImg.h	/^    CImgDisplay& _update_window_pos() {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
_vsnprintf	.\CImg.h	/^    inline int _vsnprintf(char *const s, const size_t size, const char *const format, va_list ap) {$/;"	f	namespace:cimg_library_suffixed::cimg
_vsnprintf	.\CImg.h	/^    inline int _vsnprintf(char *const s, const size_t size, const char* format, va_list ap) {$/;"	f	namespace:cimg_library_suffixed::cimg
_wait	.\CImg.h	/^    inline unsigned int _wait(const unsigned int milliseconds, unsigned long& timer) {$/;"	f	namespace:cimg_library_suffixed::cimg
_wheel	.\CImg.h	/^    int _window_x, _window_y, _mouse_x, _mouse_y, _wheel;$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_width	.\CImg.h	/^    unsigned int _width, _allocated_width;$/;"	m	struct:cimg_library_suffixed::CImgList
_width	.\CImg.h	/^    unsigned int _width, _height, _depth, _spectrum;$/;"	m	struct:cimg_library_suffixed::CImg
_width	.\CImg.h	/^    unsigned int _width, _height, _normalization;$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_window	.\CImg.h	/^    HWND _window, _background_window;$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_window	.\CImg.h	/^    Window _window, _background_window;$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_window_height	.\CImg.h	/^    unsigned int _window_width, _window_height, _button, *_keys, *_released_keys;$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_window_width	.\CImg.h	/^    unsigned int _window_width, _window_height, _button, *_keys, *_released_keys;$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_window_x	.\CImg.h	/^    int _window_x, _window_y, _mouse_x, _mouse_y, _wheel;$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_window_y	.\CImg.h	/^    int _window_x, _window_y, _mouse_x, _mouse_y, _wheel;$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_wm_protocol_atom	.\CImg.h	/^    Atom _wm_window_atom, _wm_protocol_atom;$/;"	m	struct:cimg_library_suffixed::CImgDisplay
_wm_window_atom	.\CImg.h	/^    Atom _wm_window_atom, _wm_protocol_atom;$/;"	m	struct:cimg_library_suffixed::CImgDisplay
abs	.\CImg.h	/^    CImg<T>& abs() {$/;"	f	struct:cimg_library_suffixed::CImg
abs	.\CImg.h	/^    inline T abs(const T& a) {$/;"	f	namespace:cimg_library_suffixed::cimg
abs	.\CImg.h	/^    inline bool abs(const bool a) {$/;"	f	namespace:cimg_library_suffixed::cimg
abs	.\CImg.h	/^    inline double abs(const double a) {$/;"	f	namespace:cimg_library_suffixed::cimg
abs	.\CImg.h	/^    inline float abs(const float a) {$/;"	f	namespace:cimg_library_suffixed::cimg
abs	.\CImg.h	/^    inline int abs(const int a) {$/;"	f	namespace:cimg_library_suffixed::cimg
abs	.\CImg.h	/^    inline unsigned char abs(const unsigned char a) {$/;"	f	namespace:cimg_library_suffixed::cimg
abs	.\CImg.h	/^    inline unsigned int abs(const unsigned int a) {$/;"	f	namespace:cimg_library_suffixed::cimg
abs	.\CImg.h	/^    inline unsigned long abs(const unsigned long a) {$/;"	f	namespace:cimg_library_suffixed::cimg
abs	.\CImg.h	/^    inline unsigned short abs(const unsigned short a) {$/;"	f	namespace:cimg_library_suffixed::cimg
abs	.\CImg.h	/^  inline CImg<_cimg_Tfloat> abs(const CImg<T>& instance) {$/;"	f	namespace:cimg_library_suffixed
acos	.\CImg.h	/^    CImg<T>& acos() {$/;"	f	struct:cimg_library_suffixed::CImg
acos	.\CImg.h	/^  inline CImg<_cimg_Tfloat> acos(const CImg<T>& instance) {$/;"	f	namespace:cimg_library_suffixed
append	.\CImg.h	/^    CImg<T>& append(const CImg<T>& img, const char axis='x', const float align=0) {$/;"	f	struct:cimg_library_suffixed::CImg
append	.\CImg.h	/^    CImg<T>& append(const CImg<t>& img, const char axis='x', const float align=0) {$/;"	f	struct:cimg_library_suffixed::CImg
append_object3d	.\CImg.h	/^    CImg<T>& append_object3d(CImgList<tf>& primitives, const CImg<tp>& obj_vertices,$/;"	f	struct:cimg_library_suffixed::CImg
asin	.\CImg.h	/^    CImg<T>& asin() {$/;"	f	struct:cimg_library_suffixed::CImg
asin	.\CImg.h	/^  inline CImg<_cimg_Tfloat> asin(const CImg<T>& instance) {$/;"	f	namespace:cimg_library_suffixed
assign	.\CImg.h	/^    CImg<T>& assign() {$/;"	f	struct:cimg_library_suffixed::CImg
assign	.\CImg.h	/^    CImg<T>& assign(const CImg<t>& img) {$/;"	f	struct:cimg_library_suffixed::CImg
assign	.\CImg.h	/^    CImg<T>& assign(const CImg<t>& img, const bool is_shared) {$/;"	f	struct:cimg_library_suffixed::CImg
assign	.\CImg.h	/^    CImg<T>& assign(const CImg<t>& img, const char *const dimensions) {$/;"	f	struct:cimg_library_suffixed::CImg
assign	.\CImg.h	/^    CImg<T>& assign(const CImg<t>& img, const char *const dimensions, const T& value) {$/;"	f	struct:cimg_library_suffixed::CImg
assign	.\CImg.h	/^    CImg<T>& assign(const CImgDisplay &disp) {$/;"	f	struct:cimg_library_suffixed::CImg
assign	.\CImg.h	/^    CImg<T>& assign(const T *const values, const unsigned int size_x, const unsigned int size_y,$/;"	f	struct:cimg_library_suffixed::CImg
assign	.\CImg.h	/^    CImg<T>& assign(const T *const values, const unsigned int size_x, const unsigned int size_y=1,$/;"	f	struct:cimg_library_suffixed::CImg
assign	.\CImg.h	/^    CImg<T>& assign(const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImg
assign	.\CImg.h	/^    CImg<T>& assign(const t *const values, const unsigned int size_x, const unsigned int size_y,$/;"	f	struct:cimg_library_suffixed::CImg
assign	.\CImg.h	/^    CImg<T>& assign(const t *const values, const unsigned int size_x, const unsigned int size_y=1,$/;"	f	struct:cimg_library_suffixed::CImg
assign	.\CImg.h	/^    CImg<T>& assign(const unsigned int size_x, const unsigned int size_y,$/;"	f	struct:cimg_library_suffixed::CImg
assign	.\CImg.h	/^    CImg<T>& assign(const unsigned int size_x, const unsigned int size_y=1,$/;"	f	struct:cimg_library_suffixed::CImg
assign	.\CImg.h	/^    CImgDisplay& assign() {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
assign	.\CImg.h	/^    CImgDisplay& assign(const CImg<T>& img, const char *const title=0,$/;"	f	struct:cimg_library_suffixed::CImgDisplay
assign	.\CImg.h	/^    CImgDisplay& assign(const CImg<T>& img,$/;"	f	struct:cimg_library_suffixed::CImgDisplay
assign	.\CImg.h	/^    CImgDisplay& assign(const CImgDisplay &disp) {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
assign	.\CImg.h	/^    CImgDisplay& assign(const CImgDisplay& disp) {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
assign	.\CImg.h	/^    CImgDisplay& assign(const CImgList<T>& list, const char *const title=0,$/;"	f	struct:cimg_library_suffixed::CImgDisplay
assign	.\CImg.h	/^    CImgDisplay& assign(const CImgList<T>& list,$/;"	f	struct:cimg_library_suffixed::CImgDisplay
assign	.\CImg.h	/^    CImgDisplay& assign(const unsigned int dimw, const unsigned int dimh, const char *const title=0,$/;"	f	struct:cimg_library_suffixed::CImgDisplay
assign	.\CImg.h	/^    CImgDisplay& assign(const unsigned int width, const unsigned int height,$/;"	f	struct:cimg_library_suffixed::CImgDisplay
assign	.\CImg.h	/^    CImgList<T>& assign() {$/;"	f	struct:cimg_library_suffixed::CImgList
assign	.\CImg.h	/^    CImgList<T>& assign(const CImg<t1>& img1, const CImg<t2>& img2, const CImg<t3>& img3, const CImg<t4>& img4,$/;"	f	struct:cimg_library_suffixed::CImgList
assign	.\CImg.h	/^    CImgList<T>& assign(const CImg<t1>& img1, const CImg<t2>& img2, const CImg<t3>& img3, const bool is_shared=false) {$/;"	f	struct:cimg_library_suffixed::CImgList
assign	.\CImg.h	/^    CImgList<T>& assign(const CImg<t1>& img1, const CImg<t2>& img2, const bool is_shared=false) {$/;"	f	struct:cimg_library_suffixed::CImgList
assign	.\CImg.h	/^    CImgList<T>& assign(const CImg<t>& img, const bool is_shared=false) {$/;"	f	struct:cimg_library_suffixed::CImgList
assign	.\CImg.h	/^    CImgList<T>& assign(const CImgDisplay &disp) {$/;"	f	struct:cimg_library_suffixed::CImgList
assign	.\CImg.h	/^    CImgList<T>& assign(const CImgList<T>& list, const bool is_shared=false) {$/;"	f	struct:cimg_library_suffixed::CImgList
assign	.\CImg.h	/^    CImgList<T>& assign(const CImgList<t>& list, const bool is_shared=false) {$/;"	f	struct:cimg_library_suffixed::CImgList
assign	.\CImg.h	/^    CImgList<T>& assign(const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImgList
assign	.\CImg.h	/^    CImgList<T>& assign(const unsigned int n) {$/;"	f	struct:cimg_library_suffixed::CImgList
assign	.\CImg.h	/^    CImgList<T>& assign(const unsigned int n, const CImg<t>& img, const bool is_shared=false) {$/;"	f	struct:cimg_library_suffixed::CImgList
assign	.\CImg.h	/^    CImgList<T>& assign(const unsigned int n, const unsigned int width, const unsigned int height,$/;"	f	struct:cimg_library_suffixed::CImgList
assign	.\CImg.h	/^    CImgList<T>& assign(const unsigned int n, const unsigned int width, const unsigned int height=1,$/;"	f	struct:cimg_library_suffixed::CImgList
at	.\CImg.h	/^    CImg<T>& at(const int pos) {$/;"	f	struct:cimg_library_suffixed::CImgList
at	.\CImg.h	/^    T at(const int offset, const T& out_value) const {$/;"	f	struct:cimg_library_suffixed::CImg
at	.\CImg.h	/^    T& at(const int offset) {$/;"	f	struct:cimg_library_suffixed::CImg
at	.\CImg.h	/^    T& at(const int offset, const T& out_value) {$/;"	f	struct:cimg_library_suffixed::CImg
at	.\CImg.h	/^    const T& at(const int offset) const {$/;"	f	struct:cimg_library_suffixed::CImg
atN	.\CImg.h	/^    T atN(const int pos, const int x, const int y, const int z, const int c, const T& out_value) const {$/;"	f	struct:cimg_library_suffixed::CImgList
atN	.\CImg.h	/^    T atN(const int pos, const int x=0, const int y=0, const int z=0, const int c=0) const {$/;"	f	struct:cimg_library_suffixed::CImgList
atN	.\CImg.h	/^    T& atN(const int pos, const int x, const int y, const int z, const int c, const T& out_value) {$/;"	f	struct:cimg_library_suffixed::CImgList
atN	.\CImg.h	/^    T& atN(const int pos, const int x=0, const int y=0, const int z=0, const int c=0) {$/;"	f	struct:cimg_library_suffixed::CImgList
atNX	.\CImg.h	/^    T atNX(const int pos, const int x, const int y, const int z, const int c, const T& out_value) const {$/;"	f	struct:cimg_library_suffixed::CImgList
atNX	.\CImg.h	/^    T atNX(const int pos, const int x, const int y=0, const int z=0, const int c=0) const {$/;"	f	struct:cimg_library_suffixed::CImgList
atNX	.\CImg.h	/^    T& atNX(const int pos, const int x, const int y, const int z, const int c, const T& out_value) {$/;"	f	struct:cimg_library_suffixed::CImgList
atNX	.\CImg.h	/^    T& atNX(const int pos, const int x, const int y=0, const int z=0, const int c=0) {$/;"	f	struct:cimg_library_suffixed::CImgList
atNXY	.\CImg.h	/^    T atNXY(const int pos, const int x, const int y, const int z, const int c, const T& out_value) const {$/;"	f	struct:cimg_library_suffixed::CImgList
atNXY	.\CImg.h	/^    T atNXY(const int pos, const int x, const int y, const int z=0, const int c=0) const {$/;"	f	struct:cimg_library_suffixed::CImgList
atNXY	.\CImg.h	/^    T& atNXY(const int pos, const int x, const int y, const int z, const int c, const T& out_value) {$/;"	f	struct:cimg_library_suffixed::CImgList
atNXY	.\CImg.h	/^    T& atNXY(const int pos, const int x, const int y, const int z=0, const int c=0) {$/;"	f	struct:cimg_library_suffixed::CImgList
atNXYZ	.\CImg.h	/^    T atNXYZ(const int pos, const int x, const int y, const int z, const int c, const T& out_value) const {$/;"	f	struct:cimg_library_suffixed::CImgList
atNXYZ	.\CImg.h	/^    T atNXYZ(const int pos, const int x, const int y, const int z, const int c=0) const {$/;"	f	struct:cimg_library_suffixed::CImgList
atNXYZ	.\CImg.h	/^    T& atNXYZ(const int pos, const int x, const int y, const int z, const int c, const T& out_value) {$/;"	f	struct:cimg_library_suffixed::CImgList
atNXYZ	.\CImg.h	/^   T& atNXYZ(const int pos, const int x, const int y, const int z, const int c=0) {$/;"	f	struct:cimg_library_suffixed::CImgList
atNXYZC	.\CImg.h	/^    T atNXYZC(const int pos, const int x, const int y, const int z, const int c) const {$/;"	f	struct:cimg_library_suffixed::CImgList
atNXYZC	.\CImg.h	/^    T atNXYZC(const int pos, const int x, const int y, const int z, const int c, const T& out_value) const {$/;"	f	struct:cimg_library_suffixed::CImgList
atNXYZC	.\CImg.h	/^    T& atNXYZC(const int pos, const int x, const int y, const int z, const int c) {$/;"	f	struct:cimg_library_suffixed::CImgList
atNXYZC	.\CImg.h	/^    T& atNXYZC(const int pos, const int x, const int y, const int z, const int c, const T& out_value) {$/;"	f	struct:cimg_library_suffixed::CImgList
atX	.\CImg.h	/^    T atX(const int x, const int y, const int z, const int c, const T& out_value) const {$/;"	f	struct:cimg_library_suffixed::CImg
atX	.\CImg.h	/^    T& atX(const int x, const int y, const int z, const int c, const T& out_value) {$/;"	f	struct:cimg_library_suffixed::CImg
atX	.\CImg.h	/^    T& atX(const int x, const int y=0, const int z=0, const int c=0) {$/;"	f	struct:cimg_library_suffixed::CImg
atX	.\CImg.h	/^    const T& atX(const int x, const int y=0, const int z=0, const int c=0) const {$/;"	f	struct:cimg_library_suffixed::CImg
atXY	.\CImg.h	/^    T atXY(const int x, const int y, const int z, const int c, const T& out_value) const {$/;"	f	struct:cimg_library_suffixed::CImg
atXY	.\CImg.h	/^    T& atXY(const int x, const int y, const int z, const int c, const T& out_value) {$/;"	f	struct:cimg_library_suffixed::CImg
atXY	.\CImg.h	/^    T& atXY(const int x, const int y, const int z=0, const int c=0) {$/;"	f	struct:cimg_library_suffixed::CImg
atXY	.\CImg.h	/^    const T& atXY(const int x, const int y, const int z=0, const int c=0) const {$/;"	f	struct:cimg_library_suffixed::CImg
atXYZ	.\CImg.h	/^    T atXYZ(const int x, const int y, const int z, const int c, const T& out_value) const {$/;"	f	struct:cimg_library_suffixed::CImg
atXYZ	.\CImg.h	/^    T& atXYZ(const int x, const int y, const int z, const int c, const T& out_value) {$/;"	f	struct:cimg_library_suffixed::CImg
atXYZ	.\CImg.h	/^    T& atXYZ(const int x, const int y, const int z, const int c=0) {$/;"	f	struct:cimg_library_suffixed::CImg
atXYZ	.\CImg.h	/^    const T& atXYZ(const int x, const int y, const int z, const int c=0) const {$/;"	f	struct:cimg_library_suffixed::CImg
atXYZC	.\CImg.h	/^    T atXYZC(const int x, const int y, const int z, const int c, const T& out_value) const {$/;"	f	struct:cimg_library_suffixed::CImg
atXYZC	.\CImg.h	/^    T& atXYZC(const int x, const int y, const int z, const int c) {$/;"	f	struct:cimg_library_suffixed::CImg
atXYZC	.\CImg.h	/^    T& atXYZC(const int x, const int y, const int z, const int c, const T& out_value) {$/;"	f	struct:cimg_library_suffixed::CImg
atXYZC	.\CImg.h	/^    const T& atXYZC(const int x, const int y, const int z, const int c) const {$/;"	f	struct:cimg_library_suffixed::CImg
atan	.\CImg.h	/^    CImg<T>& atan() {$/;"	f	struct:cimg_library_suffixed::CImg
atan	.\CImg.h	/^  inline CImg<_cimg_Tfloat> atan(const CImg<T>& instance) {$/;"	f	namespace:cimg_library_suffixed
atan2	.\CImg.h	/^    CImg<T>& atan2(const CImg<t>& img) {$/;"	f	struct:cimg_library_suffixed::CImg
atof	.\CImg.h	/^    inline double atof(const char *const str) {$/;"	f	namespace:cimg_library_suffixed::cimg
autocrop	.\CImg.h	/^    CImg<T>& autocrop(const T *const color=0, const char *const axes="zyx") {$/;"	f	struct:cimg_library_suffixed::CImg
autocrop	.\CImg.h	/^    CImg<T>& autocrop(const T& value, const char *const axes="czyx") {$/;"	f	struct:cimg_library_suffixed::CImg
autocrop	.\CImg.h	/^    template<typename t> CImg<T>& autocrop(const CImg<t>& color, const char *const axes="zyx") {$/;"	f	struct:cimg_library_suffixed::CImg
back	.\CImg.h	/^    CImg<T>& back() {$/;"	f	struct:cimg_library_suffixed::CImgList
back	.\CImg.h	/^    T& back() {$/;"	f	struct:cimg_library_suffixed::CImg
back	.\CImg.h	/^    const CImg<T>& back() const {$/;"	f	struct:cimg_library_suffixed::CImgList
back	.\CImg.h	/^    const T& back() const {$/;"	f	struct:cimg_library_suffixed::CImg
basename	.\CImg.h	/^    inline const char* basename(const char *const s, const char separator=cimg_file_separator)  {$/;"	f	namespace:cimg_library_suffixed::cimg
begin	.\CImg.h	/^    const_iterator begin() const {$/;"	f	struct:cimg_library_suffixed::CImg
begin	.\CImg.h	/^    const_iterator begin() const {$/;"	f	struct:cimg_library_suffixed::CImgList
begin	.\CImg.h	/^    iterator begin() {$/;"	f	struct:cimg_library_suffixed::CImg
begin	.\CImg.h	/^    iterator begin() {$/;"	f	struct:cimg_library_suffixed::CImgList
blur	.\CImg.h	/^    CImg<T>& blur(const float sigma, const bool boundary_conditions=true, const bool is_gaussian=false) {$/;"	f	struct:cimg_library_suffixed::CImg
blur	.\CImg.h	/^    CImg<T>& blur(const float sigma_x, const float sigma_y, const float sigma_z,$/;"	f	struct:cimg_library_suffixed::CImg
blur_anisotropic	.\CImg.h	/^    CImg<T>& blur_anisotropic(const CImg<t>& G,$/;"	f	struct:cimg_library_suffixed::CImg
blur_anisotropic	.\CImg.h	/^    CImg<T>& blur_anisotropic(const float amplitude, const float sharpness=0.7f, const float anisotropy=0.6f,$/;"	f	struct:cimg_library_suffixed::CImg
blur_bilateral	.\CImg.h	/^    CImg<T>& blur_bilateral(const CImg<t>& guide,$/;"	f	struct:cimg_library_suffixed::CImg
blur_box	.\CImg.h	/^    CImg<T>& blur_box(const float sigma, const bool boundary_conditions=true) {$/;"	f	struct:cimg_library_suffixed::CImg
blur_box	.\CImg.h	/^    CImg<T>& blur_box(const float sigma_x, const float sigma_y, const float sigma_z,$/;"	f	struct:cimg_library_suffixed::CImg
blur_guided	.\CImg.h	/^    CImg<T>& blur_guided(const CImg<t>& guide, const float radius, const float regularization) {$/;"	f	struct:cimg_library_suffixed::CImg
blur_median	.\CImg.h	/^    CImg<T>& blur_median(const unsigned int n, const float threshold=0) {$/;"	f	struct:cimg_library_suffixed::CImg
blur_patch	.\CImg.h	/^    CImg<T>& blur_patch(const float sigma_s, const float sigma_p, const unsigned int patch_size=3,$/;"	f	struct:cimg_library_suffixed::CImg
boolT	.\CImg.h	/^    typedef typename cimg::last<T,bool>::type boolT;$/;"	t	struct:cimg_library_suffixed::CImg
boolT	.\CImg.h	/^    typedef typename cimg::last<T,bool>::type boolT;$/;"	t	struct:cimg_library_suffixed::CImgList
box3d	.\CImg.h	/^    static CImg<floatT> box3d(CImgList<tf>& primitives,$/;"	f	struct:cimg_library_suffixed::CImg
boxfilter	.\CImg.h	/^    CImg<T>& boxfilter(const float sigma, const int order, const char axis='x',$/;"	f	struct:cimg_library_suffixed::CImg
button	.\CImg.h	/^    unsigned int button() const {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
byte_order	.\CImg.h	/^      bool byte_order;$/;"	m	struct:cimg_library_suffixed::cimg::X11_info
calling_function	.\CImg.h	/^      const char *const calling_function;$/;"	m	struct:cimg_library_suffixed::CImg::_cimg_math_parser
channel	.\CImg.h	/^    CImg<T>& channel(const int c0) {$/;"	f	struct:cimg_library_suffixed::CImg
channels	.\CImg.h	/^    CImg<T>& channels(const int c0, const int c1) {$/;"	f	struct:cimg_library_suffixed::CImg
charT	.\CImg.h	/^    typedef typename cimg::last<T,char>::type charT;$/;"	t	struct:cimg_library_suffixed::CImg
charT	.\CImg.h	/^    typedef typename cimg::last<T,char>::type charT;$/;"	t	struct:cimg_library_suffixed::CImgList
check_constant	.\CImg.h	/^      void check_constant(const unsigned int arg, const unsigned int n_arg, const char *const s_op,$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
check_matrix_square	.\CImg.h	/^      void check_matrix_square(const unsigned int arg, const unsigned int n_arg, const char *const s_op,$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
check_type	.\CImg.h	/^      void check_type(const unsigned int arg, const unsigned int n_arg, const char *const s_op,$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
check_vector0	.\CImg.h	/^      void check_vector0(const unsigned int dim, const char *const s_op,$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
cimg	.\CImg.h	/^  namespace cimg {$/;"	n	namespace:cimg_library_suffixed
cimg	.\CImg.h	/^namespace cimg {$/;"	n	namespace:cimg_library_suffixed
cimg_OS	.\CImg.h	101;"	d
cimg_OS	.\CImg.h	103;"	d
cimg_OS	.\CImg.h	98;"	d
cimg_appname	.\CImg.h	263;"	d
cimg_display	.\CImg.h	236;"	d
cimg_display	.\CImg.h	238;"	d
cimg_display	.\CImg.h	240;"	d
cimg_draw_scanline	.\CImg.h	35370;"	d
cimg_file_separator	.\CImg.h	201;"	d
cimg_file_separator	.\CImg.h	203;"	d
cimg_fitscreen	.\CImg.h	5992;"	d
cimg_for	.\CImg.h	706;"	d
cimg_for1	.\CImg.h	711;"	d
cimg_for2	.\CImg.h	837;"	d
cimg_for2C	.\CImg.h	844;"	d
cimg_for2X	.\CImg.h	841;"	d
cimg_for2XC	.\CImg.h	847;"	d
cimg_for2XY	.\CImg.h	845;"	d
cimg_for2XYZ	.\CImg.h	851;"	d
cimg_for2XYZC	.\CImg.h	854;"	d
cimg_for2XZ	.\CImg.h	846;"	d
cimg_for2XZC	.\CImg.h	852;"	d
cimg_for2Y	.\CImg.h	842;"	d
cimg_for2YC	.\CImg.h	849;"	d
cimg_for2YZ	.\CImg.h	848;"	d
cimg_for2YZC	.\CImg.h	853;"	d
cimg_for2Z	.\CImg.h	843;"	d
cimg_for2ZC	.\CImg.h	850;"	d
cimg_for2x2	.\CImg.h	1209;"	d
cimg_for2x2x2	.\CImg.h	1934;"	d
cimg_for3	.\CImg.h	877;"	d
cimg_for3C	.\CImg.h	885;"	d
cimg_for3X	.\CImg.h	882;"	d
cimg_for3XC	.\CImg.h	888;"	d
cimg_for3XY	.\CImg.h	886;"	d
cimg_for3XYZ	.\CImg.h	892;"	d
cimg_for3XYZC	.\CImg.h	895;"	d
cimg_for3XZ	.\CImg.h	887;"	d
cimg_for3XZC	.\CImg.h	893;"	d
cimg_for3Y	.\CImg.h	883;"	d
cimg_for3YC	.\CImg.h	890;"	d
cimg_for3YZ	.\CImg.h	889;"	d
cimg_for3YZC	.\CImg.h	894;"	d
cimg_for3Z	.\CImg.h	884;"	d
cimg_for3ZC	.\CImg.h	891;"	d
cimg_for3x3	.\CImg.h	1237;"	d
cimg_for3x3x3	.\CImg.h	1968;"	d
cimg_for4	.\CImg.h	919;"	d
cimg_for4C	.\CImg.h	927;"	d
cimg_for4X	.\CImg.h	924;"	d
cimg_for4XC	.\CImg.h	930;"	d
cimg_for4XY	.\CImg.h	928;"	d
cimg_for4XYZ	.\CImg.h	934;"	d
cimg_for4XYZC	.\CImg.h	937;"	d
cimg_for4XZ	.\CImg.h	929;"	d
cimg_for4XZC	.\CImg.h	935;"	d
cimg_for4Y	.\CImg.h	925;"	d
cimg_for4YC	.\CImg.h	932;"	d
cimg_for4YZ	.\CImg.h	931;"	d
cimg_for4YZC	.\CImg.h	936;"	d
cimg_for4Z	.\CImg.h	926;"	d
cimg_for4ZC	.\CImg.h	933;"	d
cimg_for4x4	.\CImg.h	1276;"	d
cimg_for5	.\CImg.h	962;"	d
cimg_for5C	.\CImg.h	971;"	d
cimg_for5X	.\CImg.h	968;"	d
cimg_for5XC	.\CImg.h	974;"	d
cimg_for5XY	.\CImg.h	972;"	d
cimg_for5XYZ	.\CImg.h	978;"	d
cimg_for5XYZC	.\CImg.h	981;"	d
cimg_for5XZ	.\CImg.h	973;"	d
cimg_for5XZC	.\CImg.h	979;"	d
cimg_for5Y	.\CImg.h	969;"	d
cimg_for5YC	.\CImg.h	976;"	d
cimg_for5YZ	.\CImg.h	975;"	d
cimg_for5YZC	.\CImg.h	980;"	d
cimg_for5Z	.\CImg.h	970;"	d
cimg_for5ZC	.\CImg.h	977;"	d
cimg_for5x5	.\CImg.h	1332;"	d
cimg_for6	.\CImg.h	1007;"	d
cimg_for6C	.\CImg.h	1017;"	d
cimg_for6X	.\CImg.h	1014;"	d
cimg_for6XC	.\CImg.h	1020;"	d
cimg_for6XY	.\CImg.h	1018;"	d
cimg_for6XYZ	.\CImg.h	1024;"	d
cimg_for6XYZC	.\CImg.h	1027;"	d
cimg_for6XZ	.\CImg.h	1019;"	d
cimg_for6XZC	.\CImg.h	1025;"	d
cimg_for6Y	.\CImg.h	1015;"	d
cimg_for6YC	.\CImg.h	1022;"	d
cimg_for6YZ	.\CImg.h	1021;"	d
cimg_for6YZC	.\CImg.h	1026;"	d
cimg_for6Z	.\CImg.h	1016;"	d
cimg_for6ZC	.\CImg.h	1023;"	d
cimg_for6x6	.\CImg.h	1403;"	d
cimg_for7	.\CImg.h	1055;"	d
cimg_for7C	.\CImg.h	1065;"	d
cimg_for7X	.\CImg.h	1062;"	d
cimg_for7XC	.\CImg.h	1068;"	d
cimg_for7XY	.\CImg.h	1066;"	d
cimg_for7XYZ	.\CImg.h	1072;"	d
cimg_for7XYZC	.\CImg.h	1075;"	d
cimg_for7XZ	.\CImg.h	1067;"	d
cimg_for7XZC	.\CImg.h	1073;"	d
cimg_for7Y	.\CImg.h	1063;"	d
cimg_for7YC	.\CImg.h	1070;"	d
cimg_for7YZ	.\CImg.h	1069;"	d
cimg_for7YZC	.\CImg.h	1074;"	d
cimg_for7Z	.\CImg.h	1064;"	d
cimg_for7ZC	.\CImg.h	1071;"	d
cimg_for7x7	.\CImg.h	1498;"	d
cimg_for8	.\CImg.h	1104;"	d
cimg_for8C	.\CImg.h	1116;"	d
cimg_for8X	.\CImg.h	1113;"	d
cimg_for8XC	.\CImg.h	1119;"	d
cimg_for8XY	.\CImg.h	1117;"	d
cimg_for8XYZ	.\CImg.h	1123;"	d
cimg_for8XYZC	.\CImg.h	1126;"	d
cimg_for8XZ	.\CImg.h	1118;"	d
cimg_for8XZC	.\CImg.h	1124;"	d
cimg_for8Y	.\CImg.h	1114;"	d
cimg_for8YC	.\CImg.h	1121;"	d
cimg_for8YZ	.\CImg.h	1120;"	d
cimg_for8YZC	.\CImg.h	1125;"	d
cimg_for8Z	.\CImg.h	1115;"	d
cimg_for8ZC	.\CImg.h	1122;"	d
cimg_for8x8	.\CImg.h	1613;"	d
cimg_for9	.\CImg.h	1156;"	d
cimg_for9C	.\CImg.h	1168;"	d
cimg_for9X	.\CImg.h	1165;"	d
cimg_for9XC	.\CImg.h	1171;"	d
cimg_for9XY	.\CImg.h	1169;"	d
cimg_for9XYZ	.\CImg.h	1175;"	d
cimg_for9XYZC	.\CImg.h	1178;"	d
cimg_for9XZ	.\CImg.h	1170;"	d
cimg_for9XZC	.\CImg.h	1176;"	d
cimg_for9Y	.\CImg.h	1166;"	d
cimg_for9YC	.\CImg.h	1173;"	d
cimg_for9YZ	.\CImg.h	1172;"	d
cimg_for9YZC	.\CImg.h	1177;"	d
cimg_for9Z	.\CImg.h	1167;"	d
cimg_for9ZC	.\CImg.h	1174;"	d
cimg_for9x9	.\CImg.h	1759;"	d
cimg_forC	.\CImg.h	715;"	d
cimg_forX	.\CImg.h	712;"	d
cimg_forXC	.\CImg.h	719;"	d
cimg_forXY	.\CImg.h	716;"	d
cimg_forXYC	.\CImg.h	723;"	d
cimg_forXYZ	.\CImg.h	722;"	d
cimg_forXYZC	.\CImg.h	726;"	d
cimg_forXZ	.\CImg.h	717;"	d
cimg_forXZC	.\CImg.h	724;"	d
cimg_forY	.\CImg.h	713;"	d
cimg_forYC	.\CImg.h	720;"	d
cimg_forYZ	.\CImg.h	718;"	d
cimg_forYZC	.\CImg.h	725;"	d
cimg_forZ	.\CImg.h	714;"	d
cimg_forZC	.\CImg.h	721;"	d
cimg_for_borderC	.\CImg.h	813;"	d
cimg_for_borderX	.\CImg.h	810;"	d
cimg_for_borderXY	.\CImg.h	814;"	d
cimg_for_borderXYZ	.\CImg.h	815;"	d
cimg_for_borderXYZC	.\CImg.h	817;"	d
cimg_for_borderY	.\CImg.h	811;"	d
cimg_for_borderZ	.\CImg.h	812;"	d
cimg_for_in1	.\CImg.h	745;"	d
cimg_for_in2	.\CImg.h	856;"	d
cimg_for_in2C	.\CImg.h	864;"	d
cimg_for_in2X	.\CImg.h	861;"	d
cimg_for_in2XC	.\CImg.h	867;"	d
cimg_for_in2XY	.\CImg.h	865;"	d
cimg_for_in2XYZ	.\CImg.h	871;"	d
cimg_for_in2XYZC	.\CImg.h	874;"	d
cimg_for_in2XZ	.\CImg.h	866;"	d
cimg_for_in2XZC	.\CImg.h	872;"	d
cimg_for_in2Y	.\CImg.h	862;"	d
cimg_for_in2YC	.\CImg.h	869;"	d
cimg_for_in2YZ	.\CImg.h	868;"	d
cimg_for_in2YZC	.\CImg.h	873;"	d
cimg_for_in2Z	.\CImg.h	863;"	d
cimg_for_in2ZC	.\CImg.h	870;"	d
cimg_for_in2x2	.\CImg.h	1223;"	d
cimg_for_in2x2x2	.\CImg.h	1951;"	d
cimg_for_in3	.\CImg.h	897;"	d
cimg_for_in3C	.\CImg.h	906;"	d
cimg_for_in3X	.\CImg.h	903;"	d
cimg_for_in3XC	.\CImg.h	909;"	d
cimg_for_in3XY	.\CImg.h	907;"	d
cimg_for_in3XYZ	.\CImg.h	913;"	d
cimg_for_in3XYZC	.\CImg.h	916;"	d
cimg_for_in3XZ	.\CImg.h	908;"	d
cimg_for_in3XZC	.\CImg.h	914;"	d
cimg_for_in3Y	.\CImg.h	904;"	d
cimg_for_in3YC	.\CImg.h	911;"	d
cimg_for_in3YZ	.\CImg.h	910;"	d
cimg_for_in3YZC	.\CImg.h	915;"	d
cimg_for_in3Z	.\CImg.h	905;"	d
cimg_for_in3ZC	.\CImg.h	912;"	d
cimg_for_in3x3	.\CImg.h	1255;"	d
cimg_for_in3x3x3	.\CImg.h	1998;"	d
cimg_for_in4	.\CImg.h	939;"	d
cimg_for_in4C	.\CImg.h	949;"	d
cimg_for_in4X	.\CImg.h	946;"	d
cimg_for_in4XC	.\CImg.h	952;"	d
cimg_for_in4XY	.\CImg.h	950;"	d
cimg_for_in4XYZ	.\CImg.h	956;"	d
cimg_for_in4XYZC	.\CImg.h	959;"	d
cimg_for_in4XZ	.\CImg.h	951;"	d
cimg_for_in4XZC	.\CImg.h	957;"	d
cimg_for_in4Y	.\CImg.h	947;"	d
cimg_for_in4YC	.\CImg.h	954;"	d
cimg_for_in4YZ	.\CImg.h	953;"	d
cimg_for_in4YZC	.\CImg.h	958;"	d
cimg_for_in4Z	.\CImg.h	948;"	d
cimg_for_in4ZC	.\CImg.h	955;"	d
cimg_for_in4x4	.\CImg.h	1302;"	d
cimg_for_in5	.\CImg.h	983;"	d
cimg_for_in5C	.\CImg.h	994;"	d
cimg_for_in5X	.\CImg.h	991;"	d
cimg_for_in5XC	.\CImg.h	997;"	d
cimg_for_in5XY	.\CImg.h	995;"	d
cimg_for_in5XYZ	.\CImg.h	1001;"	d
cimg_for_in5XYZC	.\CImg.h	1004;"	d
cimg_for_in5XZ	.\CImg.h	996;"	d
cimg_for_in5XZC	.\CImg.h	1002;"	d
cimg_for_in5Y	.\CImg.h	992;"	d
cimg_for_in5YC	.\CImg.h	999;"	d
cimg_for_in5YZ	.\CImg.h	998;"	d
cimg_for_in5YZC	.\CImg.h	1003;"	d
cimg_for_in5Z	.\CImg.h	993;"	d
cimg_for_in5ZC	.\CImg.h	1000;"	d
cimg_for_in5x5	.\CImg.h	1362;"	d
cimg_for_in6	.\CImg.h	1029;"	d
cimg_for_in6C	.\CImg.h	1042;"	d
cimg_for_in6X	.\CImg.h	1039;"	d
cimg_for_in6XC	.\CImg.h	1045;"	d
cimg_for_in6XY	.\CImg.h	1043;"	d
cimg_for_in6XYZ	.\CImg.h	1049;"	d
cimg_for_in6XYZC	.\CImg.h	1052;"	d
cimg_for_in6XZ	.\CImg.h	1044;"	d
cimg_for_in6XZC	.\CImg.h	1050;"	d
cimg_for_in6Y	.\CImg.h	1040;"	d
cimg_for_in6YC	.\CImg.h	1047;"	d
cimg_for_in6YZ	.\CImg.h	1046;"	d
cimg_for_in6YZC	.\CImg.h	1051;"	d
cimg_for_in6Z	.\CImg.h	1041;"	d
cimg_for_in6ZC	.\CImg.h	1048;"	d
cimg_for_in6x6	.\CImg.h	1444;"	d
cimg_for_in7	.\CImg.h	1077;"	d
cimg_for_in7C	.\CImg.h	1091;"	d
cimg_for_in7X	.\CImg.h	1088;"	d
cimg_for_in7XC	.\CImg.h	1094;"	d
cimg_for_in7XY	.\CImg.h	1092;"	d
cimg_for_in7XYZ	.\CImg.h	1098;"	d
cimg_for_in7XYZC	.\CImg.h	1101;"	d
cimg_for_in7XZ	.\CImg.h	1093;"	d
cimg_for_in7XZC	.\CImg.h	1099;"	d
cimg_for_in7Y	.\CImg.h	1089;"	d
cimg_for_in7YC	.\CImg.h	1096;"	d
cimg_for_in7YZ	.\CImg.h	1095;"	d
cimg_for_in7YZC	.\CImg.h	1100;"	d
cimg_for_in7Z	.\CImg.h	1090;"	d
cimg_for_in7ZC	.\CImg.h	1097;"	d
cimg_for_in7x7	.\CImg.h	1544;"	d
cimg_for_in8	.\CImg.h	1128;"	d
cimg_for_in8C	.\CImg.h	1143;"	d
cimg_for_in8X	.\CImg.h	1140;"	d
cimg_for_in8XC	.\CImg.h	1146;"	d
cimg_for_in8XY	.\CImg.h	1144;"	d
cimg_for_in8XYZ	.\CImg.h	1150;"	d
cimg_for_in8XYZC	.\CImg.h	1153;"	d
cimg_for_in8XZ	.\CImg.h	1145;"	d
cimg_for_in8XZC	.\CImg.h	1151;"	d
cimg_for_in8Y	.\CImg.h	1141;"	d
cimg_for_in8YC	.\CImg.h	1148;"	d
cimg_for_in8YZ	.\CImg.h	1147;"	d
cimg_for_in8YZC	.\CImg.h	1152;"	d
cimg_for_in8Z	.\CImg.h	1142;"	d
cimg_for_in8ZC	.\CImg.h	1149;"	d
cimg_for_in8x8	.\CImg.h	1673;"	d
cimg_for_in9	.\CImg.h	1180;"	d
cimg_for_in9C	.\CImg.h	1196;"	d
cimg_for_in9X	.\CImg.h	1193;"	d
cimg_for_in9XC	.\CImg.h	1199;"	d
cimg_for_in9XY	.\CImg.h	1197;"	d
cimg_for_in9XYZ	.\CImg.h	1203;"	d
cimg_for_in9XYZC	.\CImg.h	1206;"	d
cimg_for_in9XZ	.\CImg.h	1198;"	d
cimg_for_in9XZC	.\CImg.h	1204;"	d
cimg_for_in9Y	.\CImg.h	1194;"	d
cimg_for_in9YC	.\CImg.h	1201;"	d
cimg_for_in9YZ	.\CImg.h	1200;"	d
cimg_for_in9YZC	.\CImg.h	1205;"	d
cimg_for_in9Z	.\CImg.h	1195;"	d
cimg_for_in9ZC	.\CImg.h	1202;"	d
cimg_for_in9x9	.\CImg.h	1827;"	d
cimg_for_inC	.\CImg.h	750;"	d
cimg_for_inX	.\CImg.h	747;"	d
cimg_for_inXC	.\CImg.h	753;"	d
cimg_for_inXY	.\CImg.h	751;"	d
cimg_for_inXYC	.\CImg.h	758;"	d
cimg_for_inXYZ	.\CImg.h	757;"	d
cimg_for_inXYZC	.\CImg.h	761;"	d
cimg_for_inXZ	.\CImg.h	752;"	d
cimg_for_inXZC	.\CImg.h	759;"	d
cimg_for_inY	.\CImg.h	748;"	d
cimg_for_inYC	.\CImg.h	755;"	d
cimg_for_inYZ	.\CImg.h	754;"	d
cimg_for_inYZC	.\CImg.h	760;"	d
cimg_for_inZ	.\CImg.h	749;"	d
cimg_for_inZC	.\CImg.h	756;"	d
cimg_for_insideC	.\CImg.h	766;"	d
cimg_for_insideX	.\CImg.h	763;"	d
cimg_for_insideXY	.\CImg.h	767;"	d
cimg_for_insideXYZ	.\CImg.h	768;"	d
cimg_for_insideXYZC	.\CImg.h	770;"	d
cimg_for_insideY	.\CImg.h	764;"	d
cimg_for_insideZ	.\CImg.h	765;"	d
cimg_for_lineXY	.\CImg.h	826;"	d
cimg_for_out1	.\CImg.h	773;"	d
cimg_for_out2	.\CImg.h	775;"	d
cimg_for_out3	.\CImg.h	779;"	d
cimg_for_out4	.\CImg.h	784;"	d
cimg_for_outC	.\CImg.h	793;"	d
cimg_for_outX	.\CImg.h	790;"	d
cimg_for_outXC	.\CImg.h	796;"	d
cimg_for_outXY	.\CImg.h	794;"	d
cimg_for_outXYC	.\CImg.h	802;"	d
cimg_for_outXYZ	.\CImg.h	800;"	d
cimg_for_outXYZC	.\CImg.h	808;"	d
cimg_for_outXZ	.\CImg.h	795;"	d
cimg_for_outXZC	.\CImg.h	804;"	d
cimg_for_outY	.\CImg.h	791;"	d
cimg_for_outYC	.\CImg.h	798;"	d
cimg_for_outYZ	.\CImg.h	797;"	d
cimg_for_outYZC	.\CImg.h	806;"	d
cimg_for_outZ	.\CImg.h	792;"	d
cimg_for_outZC	.\CImg.h	799;"	d
cimg_for_spiralXY	.\CImg.h	821;"	d
cimg_foroff	.\CImg.h	709;"	d
cimg_get2x2	.\CImg.h	572;"	d
cimg_get2x2x2	.\CImg.h	686;"	d
cimg_get3x3	.\CImg.h	576;"	d
cimg_get3x3x3	.\CImg.h	691;"	d
cimg_get4x4	.\CImg.h	581;"	d
cimg_get5x5	.\CImg.h	589;"	d
cimg_get6x6	.\CImg.h	600;"	d
cimg_get7x7	.\CImg.h	614;"	d
cimg_get8x8	.\CImg.h	633;"	d
cimg_get9x9	.\CImg.h	657;"	d
cimg_help	.\CImg.h	502;"	d
cimg_init_scanline	.\CImg.h	35366;"	d
cimg_instance	.\CImg.h	2049;"	d
cimg_is_gcc49x	.\CImg.h	32600;"	d
cimg_library_suffixed	.\CImg.h	/^namespace cimg_library_suffixed {$/;"	n
cimg_library_suffixed	.\CImg.h	486;"	d
cimg_library_suffixed	.\CImg.h	488;"	d
cimg_lock_display	.\CImg.h	2845;"	d
cimg_openmp_if	.\CImg.h	2237;"	d
cimg_option	.\CImg.h	503;"	d
cimg_rof	.\CImg.h	708;"	d
cimg_rof1	.\CImg.h	728;"	d
cimg_rofC	.\CImg.h	732;"	d
cimg_rofX	.\CImg.h	729;"	d
cimg_rofXC	.\CImg.h	736;"	d
cimg_rofXY	.\CImg.h	733;"	d
cimg_rofXYC	.\CImg.h	740;"	d
cimg_rofXYZ	.\CImg.h	739;"	d
cimg_rofXYZC	.\CImg.h	743;"	d
cimg_rofXZ	.\CImg.h	734;"	d
cimg_rofXZC	.\CImg.h	741;"	d
cimg_rofY	.\CImg.h	730;"	d
cimg_rofYC	.\CImg.h	737;"	d
cimg_rofYZ	.\CImg.h	735;"	d
cimg_rofYZC	.\CImg.h	742;"	d
cimg_rofZ	.\CImg.h	731;"	d
cimg_rofZC	.\CImg.h	738;"	d
cimg_snprintf	.\CImg.h	133;"	d
cimg_snprintf	.\CImg.h	140;"	d
cimg_snprintf	.\CImg.h	145;"	d
cimg_sprintf	.\CImg.h	132;"	d
cimg_sprintf	.\CImg.h	139;"	d
cimg_sprintf	.\CImg.h	144;"	d
cimg_sscanf	.\CImg.h	131;"	d
cimg_sscanf	.\CImg.h	138;"	d
cimg_sscanf	.\CImg.h	143;"	d
cimg_strunescape	.\CImg.h	4817;"	d
cimg_system_strescape	.\CImg.h	23615;"	d
cimg_test_abort	.\CImg.h	193;"	d
cimg_unlock_display	.\CImg.h	2846;"	d
cimg_usage	.\CImg.h	501;"	d
cimg_use_cpp11	.\CImg.h	176;"	d
cimg_verbosity	.\CImg.h	220;"	d
cimg_verbosity	.\CImg.h	222;"	d
cimg_version	.\CImg.h	57;"	d
cimg_vsnprintf	.\CImg.h	134;"	d
cimg_vsnprintf	.\CImg.h	141;"	d
cimg_vsnprintf	.\CImg.h	146;"	d
cimgdisplay_instance	.\CImg.h	2047;"	d
cimglist_apply	.\CImg.h	2042;"	d
cimglist_for	.\CImg.h	2037;"	d
cimglist_for_in	.\CImg.h	2038;"	d
cimglist_instance	.\CImg.h	2051;"	d
clear	.\CImg.h	/^    CImg<T>& clear() {$/;"	f	struct:cimg_library_suffixed::CImg
clear	.\CImg.h	/^    CImgList<T>& clear() {$/;"	f	struct:cimg_library_suffixed::CImgList
close	.\CImg.h	/^    CImgDisplay& close() {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
code	.\CImg.h	/^      CImgList<uptrT> _code, &code;$/;"	m	struct:cimg_library_suffixed::CImg::_cimg_math_parser
column	.\CImg.h	/^    CImg<T>& column(const int x0) {$/;"	f	struct:cimg_library_suffixed::CImg
columns	.\CImg.h	/^    CImg<T>& columns(const int x0, const int x1) {$/;"	f	struct:cimg_library_suffixed::CImg
compile	.\CImg.h	/^      unsigned int compile(char *ss, char *se, unsigned int *p_ref=0) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
cone3d	.\CImg.h	/^    static CImg<floatT> cone3d(CImgList<tf>& primitives,$/;"	f	struct:cimg_library_suffixed::CImg
const_empty	.\CImg.h	/^    static const CImg<T>& const_empty() {$/;"	f	struct:cimg_library_suffixed::CImg
const_empty	.\CImg.h	/^    static const CImgDisplay& const_empty() {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
const_empty	.\CImg.h	/^    static const CImgList<T>& const_empty() {$/;"	f	struct:cimg_library_suffixed::CImgList
const_iterator	.\CImg.h	/^    typedef const CImg<T>* const_iterator;$/;"	t	struct:cimg_library_suffixed::CImgList
const_iterator	.\CImg.h	/^    typedef const T* const_iterator;$/;"	t	struct:cimg_library_suffixed::CImg
constant	.\CImg.h	/^      unsigned int constant(const double val) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
contains	.\CImg.h	/^    bool contains(const CImg<T>& img) const {$/;"	f	struct:cimg_library_suffixed::CImgList
contains	.\CImg.h	/^    bool contains(const CImg<T>& img, t& n) const {$/;"	f	struct:cimg_library_suffixed::CImgList
contains	.\CImg.h	/^    bool contains(const T& pixel) const {$/;"	f	struct:cimg_library_suffixed::CImg
contains	.\CImg.h	/^    bool contains(const T& pixel) const {$/;"	f	struct:cimg_library_suffixed::CImgList
contains	.\CImg.h	/^    bool contains(const T& pixel, t& n) const {$/;"	f	struct:cimg_library_suffixed::CImgList
contains	.\CImg.h	/^    bool contains(const T& pixel, t& n, t& x) const {$/;"	f	struct:cimg_library_suffixed::CImgList
contains	.\CImg.h	/^    bool contains(const T& pixel, t& n, t& x, t&y) const {$/;"	f	struct:cimg_library_suffixed::CImgList
contains	.\CImg.h	/^    bool contains(const T& pixel, t& n, t& x, t&y, t& z) const {$/;"	f	struct:cimg_library_suffixed::CImgList
contains	.\CImg.h	/^    bool contains(const T& pixel, t& n, t& x, t&y, t& z, t& c) const {$/;"	f	struct:cimg_library_suffixed::CImgList
contains	.\CImg.h	/^    bool contains(const T& pixel, t& x) const {$/;"	f	struct:cimg_library_suffixed::CImg
contains	.\CImg.h	/^    bool contains(const T& pixel, t& x, t& y) const {$/;"	f	struct:cimg_library_suffixed::CImg
contains	.\CImg.h	/^    bool contains(const T& pixel, t& x, t& y, t& z) const {$/;"	f	struct:cimg_library_suffixed::CImg
contains	.\CImg.h	/^    bool contains(const T& pixel, t& x, t& y, t& z, t& c) const {$/;"	f	struct:cimg_library_suffixed::CImg
containsN	.\CImg.h	/^    bool containsN(const int n) const {$/;"	f	struct:cimg_library_suffixed::CImgList
containsNXYZC	.\CImg.h	/^    bool containsNXYZC(const int n, const int x=0, const int y=0, const int z=0, const int c=0) const {$/;"	f	struct:cimg_library_suffixed::CImgList
containsXYZC	.\CImg.h	/^    bool containsXYZC(const int x, const int y=0, const int z=0, const int c=0) const {$/;"	f	struct:cimg_library_suffixed::CImg
convolve	.\CImg.h	/^    CImg<T>& convolve(const CImg<t>& mask, const unsigned int boundary_conditions=1, const bool is_normalized=false) {$/;"	f	struct:cimg_library_suffixed::CImg
cool_LUT256	.\CImg.h	/^    static const CImg<Tuchar>& cool_LUT256() {$/;"	f	struct:cimg_library_suffixed::CImg
correlate	.\CImg.h	/^    CImg<T>& correlate(const CImg<t>& mask, const unsigned int boundary_conditions=1, const bool is_normalized=false) {$/;"	f	struct:cimg_library_suffixed::CImg
cos	.\CImg.h	/^    CImg<T>& cos() {$/;"	f	struct:cimg_library_suffixed::CImg
cos	.\CImg.h	/^  inline CImg<_cimg_Tfloat> cos(const CImg<T>& instance) {$/;"	f	namespace:cimg_library_suffixed
cosh	.\CImg.h	/^    CImg<T>& cosh() {$/;"	f	struct:cimg_library_suffixed::CImg
cosh	.\CImg.h	/^  inline CImg<_cimg_Tfloat> cosh(const CImg<T>& instance) {$/;"	f	namespace:cimg_library_suffixed
crop	.\CImg.h	/^    CImg<T>& crop(const int x0, const int x1, const bool boundary_conditions=false) {$/;"	f	struct:cimg_library_suffixed::CImg
crop	.\CImg.h	/^    CImg<T>& crop(const int x0, const int y0, const int z0, const int c0,$/;"	f	struct:cimg_library_suffixed::CImg
crop	.\CImg.h	/^    CImg<T>& crop(const int x0, const int y0, const int z0,$/;"	f	struct:cimg_library_suffixed::CImg
crop	.\CImg.h	/^    CImg<T>& crop(const int x0, const int y0,$/;"	f	struct:cimg_library_suffixed::CImg
crop_font	.\CImg.h	/^    CImgList<T>& crop_font() {$/;"	f	struct:cimg_library_suffixed::CImgList
cross	.\CImg.h	/^    CImg<T>& cross(const CImg<t>& img) {$/;"	f	struct:cimg_library_suffixed::CImg
cube_LUT256	.\CImg.h	/^    static const CImg<Tuchar>& cube_LUT256() {$/;"	f	struct:cimg_library_suffixed::CImg
cubic_atX	.\CImg.h	/^    Tfloat cubic_atX(const float fx, const int y, const int z, const int c, const T& out_value) const {$/;"	f	struct:cimg_library_suffixed::CImg
cubic_atX	.\CImg.h	/^    Tfloat cubic_atX(const float fx, const int y, const int z, const int c, const T& out_value,$/;"	f	struct:cimg_library_suffixed::CImg
cubic_atX	.\CImg.h	/^    Tfloat cubic_atX(const float fx, const int y, const int z, const int c,$/;"	f	struct:cimg_library_suffixed::CImg
cubic_atX	.\CImg.h	/^    Tfloat cubic_atX(const float fx, const int y=0, const int z=0, const int c=0) const {$/;"	f	struct:cimg_library_suffixed::CImg
cubic_atXY	.\CImg.h	/^    Tfloat cubic_atXY(const float fx, const float fy, const int z, const int c, const T& out_value) const {$/;"	f	struct:cimg_library_suffixed::CImg
cubic_atXY	.\CImg.h	/^    Tfloat cubic_atXY(const float fx, const float fy, const int z, const int c, const T& out_value,$/;"	f	struct:cimg_library_suffixed::CImg
cubic_atXY	.\CImg.h	/^    Tfloat cubic_atXY(const float fx, const float fy, const int z, const int c,$/;"	f	struct:cimg_library_suffixed::CImg
cubic_atXY	.\CImg.h	/^    Tfloat cubic_atXY(const float fx, const float fy, const int z=0, const int c=0) const {$/;"	f	struct:cimg_library_suffixed::CImg
cubic_atXYZ	.\CImg.h	/^    Tfloat cubic_atXYZ(const float fx, const float fy, const float fz, const int c, const T& out_value) const {$/;"	f	struct:cimg_library_suffixed::CImg
cubic_atXYZ	.\CImg.h	/^    Tfloat cubic_atXYZ(const float fx, const float fy, const float fz, const int c, const T& out_value,$/;"	f	struct:cimg_library_suffixed::CImg
cubic_atXYZ	.\CImg.h	/^    Tfloat cubic_atXYZ(const float fx, const float fy, const float fz, const int c,$/;"	f	struct:cimg_library_suffixed::CImg
cubic_atXYZ	.\CImg.h	/^    Tfloat cubic_atXYZ(const float fx, const float fy, const float fz, const int c=0) const {$/;"	f	struct:cimg_library_suffixed::CImg
cumulate	.\CImg.h	/^    CImg<T>& cumulate(const char *const axes) {$/;"	f	struct:cimg_library_suffixed::CImg
cumulate	.\CImg.h	/^    CImg<T>& cumulate(const char axis=0) {$/;"	f	struct:cimg_library_suffixed::CImg
curl_path	.\CImg.h	/^  inline const char *curl_path(const char *const user_path, const bool reinit_path) {$/;"	f	namespace:cimg_library_suffixed::cimg
curr_resolution	.\CImg.h	/^      unsigned int curr_resolution;$/;"	m	struct:cimg_library_suffixed::cimg::X11_info
curr_rotation	.\CImg.h	/^      Rotation curr_rotation;$/;"	m	struct:cimg_library_suffixed::cimg::X11_info
cut	.\CImg.h	/^      static T cut(const double val) { return val<(double)min()?min():val>(double)max()?max():(T)val; }$/;"	f	struct:cimg_library_suffixed::cimg::type
cut	.\CImg.h	/^      static bool cut(const double val) { return val<(double)min()?min():val>(double)max()?max():(bool)val; }$/;"	f	struct:cimg_library_suffixed::cimg::type
cut	.\CImg.h	/^      static char cut(const double val) { return val<(double)min()?min():val>(double)max()?max():(char)val; }$/;"	f	struct:cimg_library_suffixed::cimg::type
cut	.\CImg.h	/^      static char cut(const double val) {$/;"	f	struct:cimg_library_suffixed::cimg::type
cut	.\CImg.h	/^      static double cut(const double val) { return val<min()?min():val>max()?max():val; }$/;"	f	struct:cimg_library_suffixed::cimg::type
cut	.\CImg.h	/^      static float cut(const double val) { return val<(double)min()?min():val>(double)max()?max():(float)val; }$/;"	f	struct:cimg_library_suffixed::cimg::type
cut	.\CImg.h	/^      static int cut(const double val) { return val<(double)min()?min():val>(double)max()?max():(int)val; }$/;"	f	struct:cimg_library_suffixed::cimg::type
cut	.\CImg.h	/^      static long cut(const double val) { return val<(double)min()?min():val>(double)max()?max():(long)val; }$/;"	f	struct:cimg_library_suffixed::cimg::type
cut	.\CImg.h	/^      static long double cut(const long double val) { return val<min()?min():val>max()?max():val; }$/;"	f	struct:cimg_library_suffixed::cimg::type
cut	.\CImg.h	/^      static short cut(const double val) { return val<(double)min()?min():val>(double)max()?max():(short)val; }$/;"	f	struct:cimg_library_suffixed::cimg::type
cut	.\CImg.h	/^      static signed char cut(const double val) {$/;"	f	struct:cimg_library_suffixed::cimg::type
cut	.\CImg.h	/^      static unsigned char cut(const double val) {$/;"	f	struct:cimg_library_suffixed::cimg::type
cut	.\CImg.h	/^      static unsigned int cut(const double val) {$/;"	f	struct:cimg_library_suffixed::cimg::type
cut	.\CImg.h	/^      static unsigned long cut(const double val) {$/;"	f	struct:cimg_library_suffixed::cimg::type
cut	.\CImg.h	/^      static unsigned short cut(const double val) {$/;"	f	struct:cimg_library_suffixed::cimg::type
cut	.\CImg.h	/^    CImg<T>& cut(const T& min_value, const T& max_value) {$/;"	f	struct:cimg_library_suffixed::CImg
cylinder3d	.\CImg.h	/^    static CImg<floatT> cylinder3d(CImgList<tf>& primitives,$/;"	f	struct:cimg_library_suffixed::CImg
data	.\CImg.h	/^    CImg<T> *data() {$/;"	f	struct:cimg_library_suffixed::CImgList
data	.\CImg.h	/^    CImg<T> *data(const unsigned int l) {$/;"	f	struct:cimg_library_suffixed::CImgList
data	.\CImg.h	/^    CImg<T> *data(const unsigned int pos) {$/;"	f	struct:cimg_library_suffixed::CImgList
data	.\CImg.h	/^    T *data(const unsigned int x, const unsigned int y=0, const unsigned int z=0, const unsigned int c=0) {$/;"	f	struct:cimg_library_suffixed::CImg
data	.\CImg.h	/^    T* data() {$/;"	f	struct:cimg_library_suffixed::CImg
data	.\CImg.h	/^    T* data(const unsigned int x, const unsigned int y=0, const unsigned int z=0, const unsigned int c=0) {$/;"	f	struct:cimg_library_suffixed::CImg
data	.\CImg.h	/^    const CImg<T> *data() const {$/;"	f	struct:cimg_library_suffixed::CImgList
data	.\CImg.h	/^    const CImg<T> *data(const unsigned int l) const {$/;"	f	struct:cimg_library_suffixed::CImgList
data	.\CImg.h	/^    const T* data() const {$/;"	f	struct:cimg_library_suffixed::CImg
data	.\CImg.h	/^    const T* data(const unsigned int x, const unsigned int y=0, const unsigned int z=0, const unsigned int c=0) const {$/;"	f	struct:cimg_library_suffixed::CImg
data	.\blocks.cpp	/^    float data[3];$/;"	m	struct:HSL	file:
data	.\hue.cpp	/^    float data[3];$/;"	m	struct:HSL	file:
data	.\vision.cpp	/^    float data[3];$/;"	m	struct:HSL	file:
data_font12x13	.\CImg.h	/^    static const char *const data_font12x13 =$/;"	m	namespace:cimg_library_suffixed::cimg
data_font20x23	.\CImg.h	/^    static const char *const data_font20x23 =$/;"	m	namespace:cimg_library_suffixed::cimg
data_font47x53	.\CImg.h	/^    static const char *const data_font47x53 =$/;"	m	namespace:cimg_library_suffixed::cimg
date	.\CImg.h	/^    inline int date(const unsigned int attr) {$/;"	f	namespace:cimg_library_suffixed::cimg
dcraw_path	.\CImg.h	/^  inline const char *dcraw_path(const char *const user_path, const bool reinit_path) {$/;"	f	namespace:cimg_library_suffixed::cimg
debug_indent	.\CImg.h	/^      unsigned int mempos, mem_img_median, debug_indent, init_size, result_dim;$/;"	m	struct:cimg_library_suffixed::CImg::_cimg_math_parser
default_LUT256	.\CImg.h	/^    static const CImg<Tuchar>& default_LUT256() {$/;"	f	struct:cimg_library_suffixed::CImg
depth	.\CImg.h	/^    int depth() const {$/;"	f	struct:cimg_library_suffixed::CImg
deriche	.\CImg.h	/^    CImg<T>& deriche(const float sigma, const unsigned int order=0, const char axis='x',$/;"	f	struct:cimg_library_suffixed::CImg
det	.\CImg.h	/^    double det() const {$/;"	f	struct:cimg_library_suffixed::CImg
diagonal	.\CImg.h	/^    CImg<T>& diagonal() {$/;"	f	struct:cimg_library_suffixed::CImg
diagonal	.\CImg.h	/^    static CImg<T> diagonal(const T& a0) {$/;"	f	struct:cimg_library_suffixed::CImg
diagonal	.\CImg.h	/^    static CImg<T> diagonal(const T& a0, const T& a1) {$/;"	f	struct:cimg_library_suffixed::CImg
diagonal	.\CImg.h	/^    static CImg<T> diagonal(const T& a0, const T& a1, const T& a2) {$/;"	f	struct:cimg_library_suffixed::CImg
diagonal	.\CImg.h	/^    static CImg<T> diagonal(const T& a0, const T& a1, const T& a2, const T& a3) {$/;"	f	struct:cimg_library_suffixed::CImg
diagonal	.\CImg.h	/^    static CImg<T> diagonal(const T& a0, const T& a1, const T& a2, const T& a3, const T& a4) {$/;"	f	struct:cimg_library_suffixed::CImg
dialog	.\CImg.h	/^  inline int dialog(const char *const title, const char *const msg,$/;"	f	namespace:cimg_library_suffixed::cimg
diffusion_tensors	.\CImg.h	/^    CImg<T>& diffusion_tensors(const float sharpness=0.7f, const float anisotropy=0.6f,$/;"	f	struct:cimg_library_suffixed::CImg
dijkstra	.\CImg.h	/^    CImg<T>& dijkstra(const unsigned int starting_node, const unsigned int ending_node,$/;"	f	struct:cimg_library_suffixed::CImg
dijkstra	.\CImg.h	/^    CImg<T>& dijkstra(const unsigned int starting_node, const unsigned int ending_node=~0U) {$/;"	f	struct:cimg_library_suffixed::CImg
dijkstra	.\CImg.h	/^    static CImg<T> dijkstra(const tf& distance, const unsigned int nb_nodes,$/;"	f	struct:cimg_library_suffixed::CImg
dilate	.\CImg.h	/^    CImg<T>& dilate(const CImg<t>& mask, const unsigned int boundary_conditions=1,$/;"	f	struct:cimg_library_suffixed::CImg
dilate	.\CImg.h	/^    CImg<T>& dilate(const unsigned int s) {$/;"	f	struct:cimg_library_suffixed::CImg
dilate	.\CImg.h	/^    CImg<T>& dilate(const unsigned int sx, const unsigned int sy, const unsigned int sz=1) {$/;"	f	struct:cimg_library_suffixed::CImg
discard	.\CImg.h	/^    CImg<T>& discard(const CImg<t>& values, const char axis=0) {$/;"	f	struct:cimg_library_suffixed::CImg
discard	.\CImg.h	/^    CImg<T>& discard(const char axis=0) {$/;"	f	struct:cimg_library_suffixed::CImg
displacement	.\CImg.h	/^    CImg<T>& displacement(const CImg<T>& source, const float smoothness=0.1f, const float precision=5.0f,$/;"	f	struct:cimg_library_suffixed::CImg
display	.\CImg.h	/^      Display *display;$/;"	m	struct:cimg_library_suffixed::cimg::X11_info
display	.\CImg.h	/^    CImgDisplay& display(const CImg<T>& img) {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
display	.\CImg.h	/^    CImgDisplay& display(const CImgList<T>& list, const char axis='x', const float align=0) {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
display	.\CImg.h	/^    const CImg<T>& display(CImgDisplay &disp, const bool display_info, unsigned int *const XYZ=0,$/;"	f	struct:cimg_library_suffixed::CImg
display	.\CImg.h	/^    const CImg<T>& display(CImgDisplay& disp) const {$/;"	f	struct:cimg_library_suffixed::CImg
display	.\CImg.h	/^    const CImg<T>& display(const char *const title=0, const bool display_info=true, unsigned int *const XYZ=0,$/;"	f	struct:cimg_library_suffixed::CImg
display	.\CImg.h	/^    const CImgList<T>& display(CImgDisplay &disp, const bool display_info,$/;"	f	struct:cimg_library_suffixed::CImgList
display	.\CImg.h	/^    const CImgList<T>& display(CImgDisplay &disp, const char axis='x', const float align=0) const {$/;"	f	struct:cimg_library_suffixed::CImgList
display	.\CImg.h	/^    const CImgList<T>& display(const char *const title=0, const bool display_info=true,$/;"	f	struct:cimg_library_suffixed::CImgList
display_graph	.\CImg.h	/^    const CImg<T>& display_graph(CImgDisplay &disp,$/;"	f	struct:cimg_library_suffixed::CImg
display_graph	.\CImg.h	/^    const CImg<T>& display_graph(const char *const title=0,$/;"	f	struct:cimg_library_suffixed::CImg
display_object3d	.\CImg.h	/^    const CImg<T>& display_object3d(CImgDisplay &disp,$/;"	f	struct:cimg_library_suffixed::CImg
display_object3d	.\CImg.h	/^    const CImg<T>& display_object3d(CImgDisplay& disp,$/;"	f	struct:cimg_library_suffixed::CImg
display_object3d	.\CImg.h	/^    const CImg<T>& display_object3d(const char *const title,$/;"	f	struct:cimg_library_suffixed::CImg
distance	.\CImg.h	/^    CImg<T>& distance(const T& value, const CImg<t>& metric_mask) {$/;"	f	struct:cimg_library_suffixed::CImg
distance	.\CImg.h	/^    CImg<T>& distance(const T& value, const unsigned int metric=2) {$/;"	f	struct:cimg_library_suffixed::CImg
distance_dijkstra	.\CImg.h	/^    CImg<T>& distance_dijkstra(const T& value, const CImg<t>& metric, const bool is_high_connectivity,$/;"	f	struct:cimg_library_suffixed::CImg
distance_dijkstra	.\CImg.h	/^    CImg<T>& distance_dijkstra(const T& value, const CImg<t>& metric,$/;"	f	struct:cimg_library_suffixed::CImg
distance_eikonal	.\CImg.h	/^    CImg<T>& distance_eikonal(const T& value, const CImg<t>& metric) {$/;"	f	struct:cimg_library_suffixed::CImg
distance_eikonal	.\CImg.h	/^    CImg<T>& distance_eikonal(const unsigned int nb_iterations, const float band_size=0, const float time_step=0.5f) {$/;"	f	struct:cimg_library_suffixed::CImg
div	.\CImg.h	/^    CImg<T>& div(const CImg<t>& img) {$/;"	f	struct:cimg_library_suffixed::CImg
dot	.\CImg.h	/^    double dot(const CImg<t>& img) const {$/;"	f	struct:cimg_library_suffixed::CImg
doubleT	.\CImg.h	/^    typedef typename cimg::last<T,double>::type doubleT;$/;"	t	struct:cimg_library_suffixed::CImg
doubleT	.\CImg.h	/^    typedef typename cimg::last<T,double>::type doubleT;$/;"	t	struct:cimg_library_suffixed::CImgList
draw_arrow	.\CImg.h	/^    CImg<T>& draw_arrow(const int x0, const int y0,$/;"	f	struct:cimg_library_suffixed::CImg
draw_axes	.\CImg.h	/^    CImg<T>& draw_axes(const CImg<tx>& values_x, const CImg<ty>& values_y,$/;"	f	struct:cimg_library_suffixed::CImg
draw_axes	.\CImg.h	/^    CImg<T>& draw_axes(const float x0, const float x1, const float y0, const float y1,$/;"	f	struct:cimg_library_suffixed::CImg
draw_axis	.\CImg.h	/^    CImg<T>& draw_axis(const CImg<t>& values_x, const int y,$/;"	f	struct:cimg_library_suffixed::CImg
draw_axis	.\CImg.h	/^    CImg<T>& draw_axis(const int x, const CImg<t>& values_y,$/;"	f	struct:cimg_library_suffixed::CImg
draw_circle	.\CImg.h	/^    CImg<T>& draw_circle(const int x0, const int y0, int radius,$/;"	f	struct:cimg_library_suffixed::CImg
draw_ellipse	.\CImg.h	/^    CImg<T>& draw_ellipse(const int x0, const int y0, const CImg<t> &tensor,$/;"	f	struct:cimg_library_suffixed::CImg
draw_ellipse	.\CImg.h	/^    CImg<T>& draw_ellipse(const int x0, const int y0, const float r1, const float r2, const float angle,$/;"	f	struct:cimg_library_suffixed::CImg
draw_fill	.\CImg.h	/^    CImg<T>& draw_fill(const int x, const int y, const int z,$/;"	f	struct:cimg_library_suffixed::CImg
draw_fill	.\CImg.h	/^    CImg<T>& draw_fill(const int x, const int y,$/;"	f	struct:cimg_library_suffixed::CImg
draw_gaussian	.\CImg.h	/^    CImg<T>& draw_gaussian(const float xc, const float sigma,$/;"	f	struct:cimg_library_suffixed::CImg
draw_gaussian	.\CImg.h	/^    CImg<T>& draw_gaussian(const float xc, const float yc, const CImg<t>& tensor,$/;"	f	struct:cimg_library_suffixed::CImg
draw_gaussian	.\CImg.h	/^    CImg<T>& draw_gaussian(const float xc, const float yc, const float sigma,$/;"	f	struct:cimg_library_suffixed::CImg
draw_gaussian	.\CImg.h	/^    CImg<T>& draw_gaussian(const float xc, const float yc, const float zc, const CImg<t>& tensor,$/;"	f	struct:cimg_library_suffixed::CImg
draw_gaussian	.\CImg.h	/^    CImg<T>& draw_gaussian(const float xc, const float yc, const float zc, const float sigma,$/;"	f	struct:cimg_library_suffixed::CImg
draw_gaussian	.\CImg.h	/^    CImg<T>& draw_gaussian(const int xc, const int yc, const float r1, const float r2, const float ru, const float rv,$/;"	f	struct:cimg_library_suffixed::CImg
draw_graph	.\CImg.h	/^    CImg<T>& draw_graph(const CImg<t>& data,$/;"	f	struct:cimg_library_suffixed::CImg
draw_grid	.\CImg.h	/^    CImg<T>& draw_grid(const CImg<tx>& values_x, const CImg<ty>& values_y,$/;"	f	struct:cimg_library_suffixed::CImg
draw_grid	.\CImg.h	/^    CImg<T>& draw_grid(const float delta_x,  const float delta_y,$/;"	f	struct:cimg_library_suffixed::CImg
draw_image	.\CImg.h	/^    CImg<T>& draw_image(const CImg<t>& sprite, const float opacity=1) {$/;"	f	struct:cimg_library_suffixed::CImg
draw_image	.\CImg.h	/^    CImg<T>& draw_image(const CImg<ti>& sprite, const CImg<tm>& mask, const float opacity=1,$/;"	f	struct:cimg_library_suffixed::CImg
draw_image	.\CImg.h	/^    CImg<T>& draw_image(const int x0, const int y0, const int z0, const int c0,$/;"	f	struct:cimg_library_suffixed::CImg
draw_image	.\CImg.h	/^    CImg<T>& draw_image(const int x0, const int y0, const int z0,$/;"	f	struct:cimg_library_suffixed::CImg
draw_image	.\CImg.h	/^    CImg<T>& draw_image(const int x0, const int y0,$/;"	f	struct:cimg_library_suffixed::CImg
draw_image	.\CImg.h	/^    CImg<T>& draw_image(const int x0,$/;"	f	struct:cimg_library_suffixed::CImg
draw_line	.\CImg.h	/^    CImg<T>& draw_line(CImg<tz>& zbuffer,$/;"	f	struct:cimg_library_suffixed::CImg
draw_line	.\CImg.h	/^    CImg<T>& draw_line(const CImg<t>& points,$/;"	f	struct:cimg_library_suffixed::CImg
draw_line	.\CImg.h	/^    CImg<T>& draw_line(const int x0, const int y0, const float z0,$/;"	f	struct:cimg_library_suffixed::CImg
draw_line	.\CImg.h	/^    CImg<T>& draw_line(const int x0, const int y0, const int z0,$/;"	f	struct:cimg_library_suffixed::CImg
draw_line	.\CImg.h	/^    CImg<T>& draw_line(const int x0, const int y0,$/;"	f	struct:cimg_library_suffixed::CImg
draw_mandelbrot	.\CImg.h	/^    CImg<T>& draw_mandelbrot(const CImg<tc>& colormap, const float opacity=1,$/;"	f	struct:cimg_library_suffixed::CImg
draw_mandelbrot	.\CImg.h	/^    CImg<T>& draw_mandelbrot(const int x0, const int y0, const int x1, const int y1,$/;"	f	struct:cimg_library_suffixed::CImg
draw_object3d	.\CImg.h	/^    CImg<T>& draw_object3d(LibBoard::Board& board,$/;"	f	struct:cimg_library_suffixed::CImg
draw_object3d	.\CImg.h	/^    CImg<T>& draw_object3d(const float x0, const float y0, const float z0,$/;"	f	struct:cimg_library_suffixed::CImg
draw_plasma	.\CImg.h	/^    CImg<T>& draw_plasma(const float alpha=1, const float beta=0, const unsigned int scale=8) {$/;"	f	struct:cimg_library_suffixed::CImg
draw_point	.\CImg.h	/^    CImg<T>& draw_point(const CImg<t>& points,$/;"	f	struct:cimg_library_suffixed::CImg
draw_point	.\CImg.h	/^    CImg<T>& draw_point(const int x0, const int y0, const int z0,$/;"	f	struct:cimg_library_suffixed::CImg
draw_point	.\CImg.h	/^    CImg<T>& draw_point(const int x0, const int y0,$/;"	f	struct:cimg_library_suffixed::CImg
draw_polygon	.\CImg.h	/^    CImg<T>& draw_polygon(const CImg<t>& points,$/;"	f	struct:cimg_library_suffixed::CImg
draw_quiver	.\CImg.h	/^    CImg<T>& draw_quiver(const CImg<t1>& flow,$/;"	f	struct:cimg_library_suffixed::CImg
draw_rectangle	.\CImg.h	/^    CImg<T>& draw_rectangle(const int x0, const int y0, const int z0, const int c0,$/;"	f	struct:cimg_library_suffixed::CImg
draw_rectangle	.\CImg.h	/^    CImg<T>& draw_rectangle(const int x0, const int y0, const int z0,$/;"	f	struct:cimg_library_suffixed::CImg
draw_rectangle	.\CImg.h	/^    CImg<T>& draw_rectangle(const int x0, const int y0,$/;"	f	struct:cimg_library_suffixed::CImg
draw_spline	.\CImg.h	/^    CImg<T>& draw_spline(const CImg<tp>& points, const CImg<tt>& tangents,$/;"	f	struct:cimg_library_suffixed::CImg
draw_spline	.\CImg.h	/^    CImg<T>& draw_spline(const CImg<tp>& points,$/;"	f	struct:cimg_library_suffixed::CImg
draw_spline	.\CImg.h	/^    CImg<T>& draw_spline(const int x0, const int y0, const float u0, const float v0,$/;"	f	struct:cimg_library_suffixed::CImg
draw_spline	.\CImg.h	/^    CImg<T>& draw_spline(const int x0, const int y0, const int z0, const float u0, const float v0, const float w0,$/;"	f	struct:cimg_library_suffixed::CImg
draw_text	.\CImg.h	/^    CImg<T>& draw_text(const int x0, const int y0,$/;"	f	struct:cimg_library_suffixed::CImg
draw_triangle	.\CImg.h	/^    CImg<T>& draw_triangle(CImg<tz>& zbuffer,$/;"	f	struct:cimg_library_suffixed::CImg
draw_triangle	.\CImg.h	/^    CImg<T>& draw_triangle(const int x0, const int y0, const float z0,$/;"	f	struct:cimg_library_suffixed::CImg
draw_triangle	.\CImg.h	/^    CImg<T>& draw_triangle(const int x0, const int y0,$/;"	f	struct:cimg_library_suffixed::CImg
eigen	.\CImg.h	/^    const CImg<T>& eigen(CImg<t>& val, CImg<t> &vec) const {$/;"	f	struct:cimg_library_suffixed::CImg
elevation3d	.\CImg.h	/^    static CImg<floatT> elevation3d(CImgList<tf>& primitives, const char *const expression,$/;"	f	struct:cimg_library_suffixed::CImg
elevation3d	.\CImg.h	/^    static CImg<floatT> elevation3d(CImgList<tf>& primitives, const tfunc& func,$/;"	f	struct:cimg_library_suffixed::CImg
ellipsoid3d	.\CImg.h	/^    static CImg<floatT> ellipsoid3d(CImgList<tf>& primitives,$/;"	f	struct:cimg_library_suffixed::CImg
empty	.\CImg.h	/^    static CImg<T>& empty() {$/;"	f	struct:cimg_library_suffixed::CImg
empty	.\CImg.h	/^    static CImgDisplay& empty() {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
empty	.\CImg.h	/^    static CImgList<T>& empty() {$/;"	f	struct:cimg_library_suffixed::CImgList
end	.\CImg.h	/^    const_iterator end() const {$/;"	f	struct:cimg_library_suffixed::CImg
end	.\CImg.h	/^    const_iterator end() const {$/;"	f	struct:cimg_library_suffixed::CImgList
end	.\CImg.h	/^    iterator end() {$/;"	f	struct:cimg_library_suffixed::CImg
end	.\CImg.h	/^    iterator end() {$/;"	f	struct:cimg_library_suffixed::CImgList
endianness	.\CImg.h	/^    inline bool endianness() {$/;"	f	namespace:cimg_library_suffixed::cimg
equalize	.\CImg.h	/^    CImg<T>& equalize(const unsigned int nb_levels) {$/;"	f	struct:cimg_library_suffixed::CImg
equalize	.\CImg.h	/^    CImg<T>& equalize(const unsigned int nb_levels, const T& min_value, const T& max_value) {$/;"	f	struct:cimg_library_suffixed::CImg
erase	.\CImg.h	/^    CImgList<T>& erase(const iterator iter) {$/;"	f	struct:cimg_library_suffixed::CImgList
erode	.\CImg.h	/^    CImg<T>& erode(const CImg<t>& mask, const unsigned int boundary_conditions=1,$/;"	f	struct:cimg_library_suffixed::CImg
erode	.\CImg.h	/^    CImg<T>& erode(const unsigned int s) {$/;"	f	struct:cimg_library_suffixed::CImg
erode	.\CImg.h	/^    CImg<T>& erode(const unsigned int sx, const unsigned int sy, const unsigned int sz=1) {$/;"	f	struct:cimg_library_suffixed::CImg
eval	.\CImg.h	/^    CImg<doubleT> eval(const char *const expression, const CImg<t>& xyzc,$/;"	f	struct:cimg_library_suffixed::CImg
eval	.\CImg.h	/^    double eval(const char *const expression,$/;"	f	struct:cimg_library_suffixed::CImg
eval	.\CImg.h	/^    void eval(CImg<t> &output, const char *const expression,$/;"	f	struct:cimg_library_suffixed::CImg
eval	.\CImg.h	/^    void eval(CImg<t>& output, const char *const expression,$/;"	f	struct:cimg_library_suffixed::CImg
eval	.\CImg.h	/^  inline CImg<typename cimg::superset<double,t>::type> eval(const char *const expression, const CImg<t>& xyzc) {$/;"	f	namespace:cimg_library_suffixed::cimg
eval	.\CImg.h	/^  inline double eval(const char *const expression, const double x, const double y, const double z, const double c) {$/;"	f	namespace:cimg_library_suffixed::cimg
events_thread	.\CImg.h	/^      pthread_t *events_thread;$/;"	m	struct:cimg_library_suffixed::cimg::X11_info
exception_mode	.\CImg.h	/^    inline unsigned int& exception_mode() {$/;"	f	namespace:cimg_library_suffixed::cimg
exception_mode	.\CImg.h	/^    inline unsigned int& exception_mode(const unsigned int mode) {$/;"	f	namespace:cimg_library_suffixed::cimg
exp	.\CImg.h	/^    CImg<T>& exp() {$/;"	f	struct:cimg_library_suffixed::CImg
exp	.\CImg.h	/^  inline CImg<_cimg_Tfloat> exp(const CImg<T>& instance) {$/;"	f	namespace:cimg_library_suffixed
expr	.\CImg.h	/^      CImg<charT> expr, pexpr;$/;"	m	struct:cimg_library_suffixed::CImg::_cimg_math_parser
fclose	.\CImg.h	/^    inline int fclose(std::FILE *file) {$/;"	f	namespace:cimg_library_suffixed::cimg
fdate	.\CImg.h	/^    inline int fdate(const char *const path, const unsigned int attr) {$/;"	f	namespace:cimg_library_suffixed::cimg
fempty	.\CImg.h	/^    inline void fempty(std::FILE *const file, const char *const filename) {$/;"	f	namespace:cimg_library_suffixed::cimg
ffmpeg_path	.\CImg.h	/^  inline const char *ffmpeg_path(const char *const user_path, const bool reinit_path) {$/;"	f	namespace:cimg_library_suffixed::cimg
filenamerand	.\CImg.h	/^    inline const char* filenamerand() {$/;"	f	namespace:cimg_library_suffixed::cimg
files	.\CImg.h	/^  inline CImgList<char> files(const char *const path, const bool is_pattern=false,$/;"	f	namespace:cimg_library_suffixed::cimg
fill	.\CImg.h	/^    CImg<T>& fill(const CImg<t>& values, const bool repeat_values=true) {$/;"	f	struct:cimg_library_suffixed::CImg
fill	.\CImg.h	/^    CImg<T>& fill(const T& val) {$/;"	f	struct:cimg_library_suffixed::CImg
fill	.\CImg.h	/^    CImg<T>& fill(const T& val0, const T& val1) {$/;"	f	struct:cimg_library_suffixed::CImg
fill	.\CImg.h	/^    CImg<T>& fill(const T& val0, const T& val1, const T& val2) {$/;"	f	struct:cimg_library_suffixed::CImg
fill	.\CImg.h	/^    CImg<T>& fill(const T& val0, const T& val1, const T& val2, const T& val3) {$/;"	f	struct:cimg_library_suffixed::CImg
fill	.\CImg.h	/^    CImg<T>& fill(const T& val0, const T& val1, const T& val2, const T& val3, const T& val4) {$/;"	f	struct:cimg_library_suffixed::CImg
fill	.\CImg.h	/^    CImg<T>& fill(const T& val0, const T& val1, const T& val2, const T& val3, const T& val4, const T& val5) {$/;"	f	struct:cimg_library_suffixed::CImg
fill	.\CImg.h	/^    CImg<T>& fill(const T& val0, const T& val1, const T& val2, const T& val3, const T& val4, const T& val5,$/;"	f	struct:cimg_library_suffixed::CImg
fill	.\CImg.h	/^    CImg<T>& fill(const char *const expression, const bool repeat_values, const bool allow_formula=true,$/;"	f	struct:cimg_library_suffixed::CImg
fillC	.\CImg.h	/^    CImg<T>& fillC(const unsigned int x, const unsigned int y, const unsigned int z, const double a0, ...) {$/;"	f	struct:cimg_library_suffixed::CImg
fillC	.\CImg.h	/^    CImg<T>& fillC(const unsigned int x, const unsigned int y, const unsigned int z, const int a0, ...) {$/;"	f	struct:cimg_library_suffixed::CImg
fillX	.\CImg.h	/^    CImg<T>& fillX(const unsigned int y, const unsigned int z, const unsigned int c, const double a0, ...) {$/;"	f	struct:cimg_library_suffixed::CImg
fillX	.\CImg.h	/^    CImg<T>& fillX(const unsigned int y, const unsigned int z, const unsigned int c, const int a0, ...) {$/;"	f	struct:cimg_library_suffixed::CImg
fillY	.\CImg.h	/^    CImg<T>& fillY(const unsigned int x, const unsigned int z, const unsigned int c, const double a0, ...) {$/;"	f	struct:cimg_library_suffixed::CImg
fillY	.\CImg.h	/^    CImg<T>& fillY(const unsigned int x, const unsigned int z, const unsigned int c, const int a0, ...) {$/;"	f	struct:cimg_library_suffixed::CImg
fillZ	.\CImg.h	/^    CImg<T>& fillZ(const unsigned int x, const unsigned int y, const unsigned int c, const double a0, ...) {$/;"	f	struct:cimg_library_suffixed::CImg
fillZ	.\CImg.h	/^    CImg<T>& fillZ(const unsigned int x, const unsigned int y, const unsigned int c, const int a0, ...) {$/;"	f	struct:cimg_library_suffixed::CImg
flag_LUT256	.\CImg.h	/^    static const CImg<Tuchar>& flag_LUT256() {$/;"	f	struct:cimg_library_suffixed::CImg
float2uint	.\CImg.h	/^    inline unsigned int float2uint(const float f) {$/;"	f	namespace:cimg_library_suffixed::cimg
floatT	.\CImg.h	/^    typedef typename cimg::last<T,float>::type floatT;$/;"	t	struct:cimg_library_suffixed::CImg
floatT	.\CImg.h	/^    typedef typename cimg::last<T,float>::type floatT;$/;"	t	struct:cimg_library_suffixed::CImgList
flush	.\CImg.h	/^    CImgDisplay& flush() {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
font	.\CImg.h	/^    static const CImgList<ucharT>& font(const unsigned int font_height, const bool is_variable_width=true) {$/;"	f	struct:cimg_library_suffixed::CImgList
fopen	.\CImg.h	/^    inline std::FILE *fopen(const char *const path, const char *const mode) {$/;"	f	namespace:cimg_library_suffixed::cimg
format	.\CImg.h	/^      static const char* format() { return "%.16g"; }$/;"	f	struct:cimg_library_suffixed::cimg::type
format	.\CImg.h	/^      static const char* format() { return "%d"; }$/;"	f	struct:cimg_library_suffixed::cimg::type
format	.\CImg.h	/^      static const char* format() { return "%ld"; }$/;"	f	struct:cimg_library_suffixed::cimg::type
format	.\CImg.h	/^      static const char* format() { return "%lu"; }$/;"	f	struct:cimg_library_suffixed::cimg::type
format	.\CImg.h	/^      static const char* format() { return "%s"; }$/;"	f	struct:cimg_library_suffixed::cimg::type
format	.\CImg.h	/^      static const char* format() { return "%u"; }$/;"	f	struct:cimg_library_suffixed::cimg::type
format	.\CImg.h	/^      static const char* format(const T& val) { static const char *const s = "unknown"; cimg::unused(val); return s; }$/;"	f	struct:cimg_library_suffixed::cimg::type
format	.\CImg.h	/^      static const char* format(const bool val) { static const char* s[] = { "false", "true" }; return s[val?1:0]; }$/;"	f	struct:cimg_library_suffixed::cimg::type
format	.\CImg.h	/^      static double format(const double val) { return val; }$/;"	f	struct:cimg_library_suffixed::cimg::type
format	.\CImg.h	/^      static double format(const float val) { return (double)val; }$/;"	f	struct:cimg_library_suffixed::cimg::type
format	.\CImg.h	/^      static double format(const long double val) { return (double)val; }$/;"	f	struct:cimg_library_suffixed::cimg::type
format	.\CImg.h	/^      static int format(const char val) { return (int)val; }$/;"	f	struct:cimg_library_suffixed::cimg::type
format	.\CImg.h	/^      static int format(const int val) { return val; }$/;"	f	struct:cimg_library_suffixed::cimg::type
format	.\CImg.h	/^      static int format(const short val) { return (int)val; }$/;"	f	struct:cimg_library_suffixed::cimg::type
format	.\CImg.h	/^      static int format(const signed char val) { return (int)val; }$/;"	f	struct:cimg_library_suffixed::cimg::type
format	.\CImg.h	/^      static long format(const long val) { return val; }$/;"	f	struct:cimg_library_suffixed::cimg::type
format	.\CImg.h	/^      static unsigned int format(const char val) { return (unsigned int)val; }$/;"	f	struct:cimg_library_suffixed::cimg::type
format	.\CImg.h	/^      static unsigned int format(const unsigned char val) { return (unsigned int)val; }$/;"	f	struct:cimg_library_suffixed::cimg::type
format	.\CImg.h	/^      static unsigned int format(const unsigned int val) { return val; }$/;"	f	struct:cimg_library_suffixed::cimg::type
format	.\CImg.h	/^      static unsigned int format(const unsigned short val) { return (unsigned int)val; }$/;"	f	struct:cimg_library_suffixed::cimg::type
format	.\CImg.h	/^      static unsigned long format(const unsigned long val) { return val; }$/;"	f	struct:cimg_library_suffixed::cimg::type
frames_per_second	.\CImg.h	/^    float frames_per_second() {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
fread	.\CImg.h	/^    inline int fread(T *const ptr, const unsigned long nmemb, std::FILE *stream) {$/;"	f	namespace:cimg_library_suffixed::cimg
front	.\CImg.h	/^    CImg<T>& front() {$/;"	f	struct:cimg_library_suffixed::CImgList
front	.\CImg.h	/^    T& front() {$/;"	f	struct:cimg_library_suffixed::CImg
front	.\CImg.h	/^    const CImg<T>& front() const {$/;"	f	struct:cimg_library_suffixed::CImgList
front	.\CImg.h	/^    const T& front() const {$/;"	f	struct:cimg_library_suffixed::CImg
ftype	.\CImg.h	/^  inline const char *ftype(std::FILE *const file, const char *const filename) {$/;"	f	namespace:cimg_library_suffixed::cimg
fwrite	.\CImg.h	/^    inline int fwrite(const T *ptr, const unsigned long nmemb, std::FILE *stream) {$/;"	f	namespace:cimg_library_suffixed::cimg
gesvd	.\CImg.h	/^    inline void gesvd(char &JOB, int &M, int &N, T *lapA, int &MN,$/;"	f	namespace:cimg_library_suffixed::cimg
gesvd	.\CImg.h	/^    inline void gesvd(char &JOB, int &M, int &N, float *lapA, int &MN,$/;"	f	namespace:cimg_library_suffixed::cimg
getHue	.\blocks.cpp	/^inline HSL getHue(int R, int G, int B) \/\/TODO: SIMD$/;"	f
getHue	.\hue.cpp	/^inline HSL getHue(int R, int G, int B) \/\/TODO: SIMD$/;"	f
getHue	.\vision.cpp	/^inline HSL getHue(int R, int G, int B) \/\/TODO: SIMD$/;"	f
get_CImg3dtoobject3d	.\CImg.h	/^    CImg<T> get_CImg3dtoobject3d(CImgList<tp>& primitives,$/;"	f	struct:cimg_library_suffixed::CImg
get_CMYKtoCMY	.\CImg.h	/^    CImg<Tfloat> get_CMYKtoCMY() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_CMYKtoRGB	.\CImg.h	/^    CImg<Tuchar> get_CMYKtoRGB() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_CMYtoCMYK	.\CImg.h	/^    CImg<Tuchar> get_CMYtoCMYK() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_CMYtoRGB	.\CImg.h	/^    CImg<Tuchar> get_CMYtoRGB() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_FFT	.\CImg.h	/^    CImgList<Tfloat> get_FFT(const bool invert=false) const {$/;"	f	struct:cimg_library_suffixed::CImgList
get_FFT	.\CImg.h	/^    CImgList<Tfloat> get_FFT(const bool is_invert=false) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_FFT	.\CImg.h	/^    CImgList<Tfloat> get_FFT(const char axis, const bool invert=false) const {$/;"	f	struct:cimg_library_suffixed::CImgList
get_FFT	.\CImg.h	/^    CImgList<Tfloat> get_FFT(const char axis, const bool is_invert=false) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_HSItoRGB	.\CImg.h	/^    CImg<Tfloat> get_HSItoRGB() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_HSLtoRGB	.\CImg.h	/^    CImg<Tuchar> get_HSLtoRGB() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_HSVtoRGB	.\CImg.h	/^    CImg<Tuchar> get_HSVtoRGB() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_LabtoRGB	.\CImg.h	/^    CImg<Tuchar> get_LabtoRGB() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_LabtoXYZ	.\CImg.h	/^    CImg<Tfloat> get_LabtoXYZ() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_RGBtoCMY	.\CImg.h	/^    CImg<Tuchar> get_RGBtoCMY() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_RGBtoCMYK	.\CImg.h	/^    CImg<Tfloat> get_RGBtoCMYK() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_RGBtoHSI	.\CImg.h	/^    CImg<Tfloat> get_RGBtoHSI() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_RGBtoHSL	.\CImg.h	/^    CImg<Tfloat> get_RGBtoHSL() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_RGBtoHSV	.\CImg.h	/^    CImg<Tfloat> get_RGBtoHSV() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_RGBtoLab	.\CImg.h	/^    CImg<Tfloat> get_RGBtoLab() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_RGBtoXYZ	.\CImg.h	/^    CImg<Tfloat> get_RGBtoXYZ() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_RGBtoYCbCr	.\CImg.h	/^    CImg<Tuchar> get_RGBtoYCbCr() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_RGBtoYUV	.\CImg.h	/^    CImg<Tfloat> get_RGBtoYUV() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_RGBtosRGB	.\CImg.h	/^    CImg<Tfloat> get_RGBtosRGB() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_RGBtoxyY	.\CImg.h	/^    CImg<Tfloat> get_RGBtoxyY() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_SVD	.\CImg.h	/^    CImgList<Tfloat> get_SVD(const bool sorting=true,$/;"	f	struct:cimg_library_suffixed::CImg
get_XYZtoLab	.\CImg.h	/^    CImg<Tfloat> get_XYZtoLab() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_XYZtoRGB	.\CImg.h	/^    CImg<Tuchar> get_XYZtoRGB() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_XYZtoxyY	.\CImg.h	/^    CImg<Tfloat> get_XYZtoxyY() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_YCbCrtoRGB	.\CImg.h	/^    CImg<Tuchar> get_YCbCrtoRGB() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_YUVtoRGB	.\CImg.h	/^    CImg<Tuchar> get_YUVtoRGB() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_abs	.\CImg.h	/^    CImg<Tfloat> get_abs() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_acos	.\CImg.h	/^    CImg<Tfloat> get_acos() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_append	.\CImg.h	/^    CImg<T> get_append(const CImg<T>& img, const char axis='x', const float align=0) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_append	.\CImg.h	/^    CImg<T> get_append(const char axis, const float align=0) const {$/;"	f	struct:cimg_library_suffixed::CImgList
get_append	.\CImg.h	/^    CImg<_cimg_Tt> get_append(const CImg<T>& img, const char axis='x', const float align=0) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_asin	.\CImg.h	/^    CImg<Tfloat> get_asin() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_atan	.\CImg.h	/^    CImg<Tfloat> get_atan() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_atan2	.\CImg.h	/^    CImg<Tfloat> get_atan2(const CImg<t>& img) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_autocrop	.\CImg.h	/^    CImg<T> get_autocrop(const T *const color=0, const char *const axes="zyx") const {$/;"	f	struct:cimg_library_suffixed::CImg
get_autocrop	.\CImg.h	/^    CImg<T> get_autocrop(const T& value, const char *const axes="czyx") const {$/;"	f	struct:cimg_library_suffixed::CImg
get_autocrop	.\CImg.h	/^    template<typename t> CImg<T> get_autocrop(const CImg<t>& color, const char *const axes="zyx") const {$/;"	f	struct:cimg_library_suffixed::CImg
get_blur	.\CImg.h	/^    CImg<Tfloat> get_blur(const float sigma, const bool boundary_conditions=true, const bool is_gaussian=false) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_blur	.\CImg.h	/^    CImg<Tfloat> get_blur(const float sigma_x, const float sigma_y, const float sigma_z,$/;"	f	struct:cimg_library_suffixed::CImg
get_blur_anisotropic	.\CImg.h	/^    CImg<Tfloat> get_blur_anisotropic(const CImg<t>& G,$/;"	f	struct:cimg_library_suffixed::CImg
get_blur_anisotropic	.\CImg.h	/^    CImg<Tfloat> get_blur_anisotropic(const float amplitude, const float sharpness=0.7f, const float anisotropy=0.6f,$/;"	f	struct:cimg_library_suffixed::CImg
get_blur_bilateral	.\CImg.h	/^    CImg<Tfloat> get_blur_bilateral(const CImg<t>& guide,$/;"	f	struct:cimg_library_suffixed::CImg
get_blur_box	.\CImg.h	/^    CImg<Tfloat> get_blur_box(const float sigma, const bool boundary_conditions=true) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_blur_box	.\CImg.h	/^    CImg<Tfloat> get_blur_box(const float sigma_x, const float sigma_y, const float sigma_z,$/;"	f	struct:cimg_library_suffixed::CImg
get_blur_guided	.\CImg.h	/^    CImg<Tfloat> get_blur_guided(const CImg<t>& guide, const float radius, const float regularization) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_blur_median	.\CImg.h	/^    CImg<T> get_blur_median(const unsigned int n, const float threshold=0) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_blur_patch	.\CImg.h	/^    CImg<Tfloat> get_blur_patch(const float sigma_s, const float sigma_p, const unsigned int patch_size=3,$/;"	f	struct:cimg_library_suffixed::CImg
get_boxfilter	.\CImg.h	/^    CImg<Tfloat> get_boxfilter(const float sigma, const int order, const char axis='x',$/;"	f	struct:cimg_library_suffixed::CImg
get_channel	.\CImg.h	/^    CImg<T> get_channel(const int c0) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_channels	.\CImg.h	/^    CImg<T> get_channels(const int c0, const int c1) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_column	.\CImg.h	/^    CImg<T> get_column(const int x0) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_columns	.\CImg.h	/^    CImg<T> get_columns(const int x0, const int x1) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_convolve	.\CImg.h	/^    CImg<_cimg_Ttfloat> get_convolve(const CImg<t>& mask, const unsigned int boundary_conditions=1,$/;"	f	struct:cimg_library_suffixed::CImg
get_correlate	.\CImg.h	/^    CImg<_cimg_Ttfloat> get_correlate(const CImg<t>& mask, const unsigned int boundary_conditions=1,$/;"	f	struct:cimg_library_suffixed::CImg
get_cos	.\CImg.h	/^    CImg<Tfloat> get_cos() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_cosh	.\CImg.h	/^    CImg<Tfloat> get_cosh() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_crop	.\CImg.h	/^    CImg<T> get_crop(const int x0, const int x1, const bool boundary_conditions=false) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_crop	.\CImg.h	/^    CImg<T> get_crop(const int x0, const int y0, const int z0, const int c0,$/;"	f	struct:cimg_library_suffixed::CImg
get_crop	.\CImg.h	/^    CImg<T> get_crop(const int x0, const int y0, const int z0,$/;"	f	struct:cimg_library_suffixed::CImg
get_crop	.\CImg.h	/^    CImg<T> get_crop(const int x0, const int y0,$/;"	f	struct:cimg_library_suffixed::CImg
get_crop_font	.\CImg.h	/^    CImgList<T> get_crop_font() const {$/;"	f	struct:cimg_library_suffixed::CImgList
get_cross	.\CImg.h	/^    CImg<_cimg_Tt> get_cross(const CImg<t>& img) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_cumulate	.\CImg.h	/^    CImg<Tlong> get_cumulate(const char *const axes) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_cumulate	.\CImg.h	/^    CImg<Tlong> get_cumulate(const char axis=0) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_cut	.\CImg.h	/^    CImg<T> get_cut(const T& min_value, const T& max_value) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_deriche	.\CImg.h	/^    CImg<Tfloat> get_deriche(const float sigma, const unsigned int order=0, const char axis='x',$/;"	f	struct:cimg_library_suffixed::CImg
get_diagonal	.\CImg.h	/^    CImg<T> get_diagonal() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_diffusion_tensors	.\CImg.h	/^    CImg<Tfloat> get_diffusion_tensors(const float sharpness=0.7f, const float anisotropy=0.6f,$/;"	f	struct:cimg_library_suffixed::CImg
get_dijkstra	.\CImg.h	/^    CImg<T> get_dijkstra(const unsigned int starting_node, const unsigned int ending_node,$/;"	f	struct:cimg_library_suffixed::CImg
get_dijkstra	.\CImg.h	/^    CImg<Tfloat> get_dijkstra(const unsigned int starting_node, const unsigned int ending_node=~0U) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_dilate	.\CImg.h	/^    CImg<T> get_dilate(const unsigned int s) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_dilate	.\CImg.h	/^    CImg<T> get_dilate(const unsigned int sx, const unsigned int sy, const unsigned int sz=1) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_dilate	.\CImg.h	/^    CImg<_cimg_Tt> get_dilate(const CImg<t>& mask, const unsigned int boundary_conditions=1,$/;"	f	struct:cimg_library_suffixed::CImg
get_discard	.\CImg.h	/^    CImg<T> get_discard(const CImg<t>& values, const char axis=0) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_discard	.\CImg.h	/^    CImg<T> get_discard(const char axis=0) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_displacement	.\CImg.h	/^    CImg<floatT> get_displacement(const CImg<T>& source,$/;"	f	struct:cimg_library_suffixed::CImg
get_distance	.\CImg.h	/^    CImg<Tfloat> get_distance(const T& value, const CImg<t>& metric_mask) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_distance	.\CImg.h	/^    CImg<Tfloat> get_distance(const T& value, const unsigned int metric=2) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_distance_dijkstra	.\CImg.h	/^    CImg<Tfloat> get_distance_dijkstra(const T& value, const CImg<t>& metric,$/;"	f	struct:cimg_library_suffixed::CImg
get_distance_dijkstra	.\CImg.h	/^    get_distance_dijkstra(const T& value, const CImg<t>& metric, const bool is_high_connectivity,$/;"	f	struct:cimg_library_suffixed::CImg
get_distance_eikonal	.\CImg.h	/^    CImg<Tfloat> get_distance_eikonal(const T& value, const CImg<t>& metric) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_distance_eikonal	.\CImg.h	/^    CImg<Tfloat> get_distance_eikonal(const unsigned int nb_iterations, const float band_size=0,$/;"	f	struct:cimg_library_suffixed::CImg
get_div	.\CImg.h	/^    CImg<_cimg_Tt> get_div(const CImg<t>& img) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_eigen	.\CImg.h	/^    CImgList<Tfloat> get_eigen() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_elevation3d	.\CImg.h	/^    CImg<floatT> get_elevation3d(CImgList<tf>& primitives, CImgList<tc>& colors, const CImg<te>& elevation) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_equalize	.\CImg.h	/^    CImg<T> get_equalize(const unsigned int nblevels) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_equalize	.\CImg.h	/^    CImg<T> get_equalize(const unsigned int nblevels, const T& val_min, const T& val_max) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_erode	.\CImg.h	/^    CImg<T> get_erode(const unsigned int s) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_erode	.\CImg.h	/^    CImg<T> get_erode(const unsigned int sx, const unsigned int sy, const unsigned int sz=1) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_erode	.\CImg.h	/^    CImg<_cimg_Tt> get_erode(const CImg<t>& mask, const unsigned int boundary_conditions=1,$/;"	f	struct:cimg_library_suffixed::CImg
get_exp	.\CImg.h	/^    CImg<Tfloat> get_exp() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_fill	.\CImg.h	/^    CImg<T> get_fill(const CImg<t>& values, const bool repeat_values=true) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_fill	.\CImg.h	/^    CImg<T> get_fill(const T& val) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_fill	.\CImg.h	/^    CImg<T> get_fill(const T& val0, const T& val1) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_fill	.\CImg.h	/^    CImg<T> get_fill(const T& val0, const T& val1, const T& val2) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_fill	.\CImg.h	/^    CImg<T> get_fill(const T& val0, const T& val1, const T& val2, const T& val3) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_fill	.\CImg.h	/^    CImg<T> get_fill(const T& val0, const T& val1, const T& val2, const T& val3, const T& val4) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_fill	.\CImg.h	/^    CImg<T> get_fill(const T& val0, const T& val1, const T& val2, const T& val3, const T& val4, const T& val5) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_fill	.\CImg.h	/^    CImg<T> get_fill(const T& val0, const T& val1, const T& val2, const T& val3, const T& val4, const T& val5,$/;"	f	struct:cimg_library_suffixed::CImg
get_fill	.\CImg.h	/^    CImg<T> get_fill(const char *const expression, const bool repeat_values, const bool allow_formula=true,$/;"	f	struct:cimg_library_suffixed::CImg
get_gradient	.\CImg.h	/^    CImgList<Tfloat> get_gradient(const char *const axes=0, const int scheme=3) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_haar	.\CImg.h	/^    CImg<Tfloat> get_haar(const bool invert=false, const unsigned int nb_scales=1) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_haar	.\CImg.h	/^    CImg<Tfloat> get_haar(const char axis, const bool invert=false, const unsigned int nb_scales=1) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_hessian	.\CImg.h	/^    CImgList<Tfloat> get_hessian(const char *const axes=0) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_histogram	.\CImg.h	/^    CImg<ulongT> get_histogram(const unsigned int nb_levels) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_histogram	.\CImg.h	/^    CImg<ulongT> get_histogram(const unsigned int nb_levels, const T& min_value, const T& max_value) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_identity_matrix	.\CImg.h	/^    CImg<T> get_identity_matrix() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_images	.\CImg.h	/^    CImgList<T> get_images(const unsigned int pos0, const unsigned int pos1) const {$/;"	f	struct:cimg_library_suffixed::CImgList
get_index	.\CImg.h	/^    get_index(const CImg<t>& colormap, const float dithering=1, const bool map_indexes=true) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_insert	.\CImg.h	/^    CImgList<T> get_insert(const CImg<t>& img, const unsigned int pos=~0U, const bool is_shared=false) const {$/;"	f	struct:cimg_library_suffixed::CImgList
get_insert	.\CImg.h	/^    CImgList<T> get_insert(const CImgList<t>& list, const unsigned int pos=~0U, const bool is_shared=false) const {$/;"	f	struct:cimg_library_suffixed::CImgList
get_insert	.\CImg.h	/^    CImgList<T> get_insert(const unsigned int n, const CImg<t>& img, const unsigned int pos=~0U,$/;"	f	struct:cimg_library_suffixed::CImgList
get_insert	.\CImg.h	/^    CImgList<T> get_insert(const unsigned int n, const CImgList<t>& list, const unsigned int pos=~0U,$/;"	f	struct:cimg_library_suffixed::CImgList
get_insert	.\CImg.h	/^    CImgList<T> get_insert(const unsigned int n, const unsigned int pos=~0U) const {$/;"	f	struct:cimg_library_suffixed::CImgList
get_invert	.\CImg.h	/^    CImg<Tfloat> get_invert(const bool use_LU=true) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_invert_endianness	.\CImg.h	/^    CImg<T> get_invert_endianness() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_isoline3d	.\CImg.h	/^    CImg<floatT> get_isoline3d(CImgList<tf>& primitives, const float isovalue,$/;"	f	struct:cimg_library_suffixed::CImg
get_isosurface3d	.\CImg.h	/^    CImg<floatT> get_isosurface3d(CImgList<tf>& primitives, const float isovalue,$/;"	f	struct:cimg_library_suffixed::CImg
get_label	.\CImg.h	/^    CImg<unsigned long> get_label(const CImg<t>& connectivity_mask,$/;"	f	struct:cimg_library_suffixed::CImg
get_label	.\CImg.h	/^    CImg<unsigned long> get_label(const bool is_high_connectivity=false,$/;"	f	struct:cimg_library_suffixed::CImg
get_laplacian	.\CImg.h	/^    CImg<Tfloat> get_laplacian() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_load	.\CImg.h	/^    static CImg<T> get_load(const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImg
get_load	.\CImg.h	/^    static CImgList<T> get_load(const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImgList
get_load_analyze	.\CImg.h	/^    static CImg<T> get_load_analyze(const char *const filename, float *const voxel_size=0) {$/;"	f	struct:cimg_library_suffixed::CImg
get_load_analyze	.\CImg.h	/^    static CImg<T> get_load_analyze(std::FILE *const file, float *const voxel_size=0) {$/;"	f	struct:cimg_library_suffixed::CImg
get_load_ascii	.\CImg.h	/^    static CImg<T> get_load_ascii(const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImg
get_load_ascii	.\CImg.h	/^    static CImg<T> get_load_ascii(std::FILE *const file) {$/;"	f	struct:cimg_library_suffixed::CImg
get_load_bmp	.\CImg.h	/^    static CImg<T> get_load_bmp(const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImg
get_load_bmp	.\CImg.h	/^    static CImg<T> get_load_bmp(std::FILE *const file) {$/;"	f	struct:cimg_library_suffixed::CImg
get_load_camera	.\CImg.h	/^    static CImg<T> get_load_camera(const unsigned int camera_index=0, const unsigned int skip_frames=0,$/;"	f	struct:cimg_library_suffixed::CImg
get_load_cimg	.\CImg.h	/^    static CImg<T> get_load_cimg(const char *const filename, const char axis='z', const float align=0) {$/;"	f	struct:cimg_library_suffixed::CImg
get_load_cimg	.\CImg.h	/^    static CImg<T> get_load_cimg(const char *const filename,$/;"	f	struct:cimg_library_suffixed::CImg
get_load_cimg	.\CImg.h	/^    static CImg<T> get_load_cimg(std::FILE *const file, const char axis='z', const float align=0) {$/;"	f	struct:cimg_library_suffixed::CImg
get_load_cimg	.\CImg.h	/^    static CImg<T> get_load_cimg(std::FILE *const file,$/;"	f	struct:cimg_library_suffixed::CImg
get_load_cimg	.\CImg.h	/^    static CImgList<T> get_load_cimg(const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImgList
get_load_cimg	.\CImg.h	/^    static CImgList<T> get_load_cimg(const char *const filename,$/;"	f	struct:cimg_library_suffixed::CImgList
get_load_cimg	.\CImg.h	/^    static CImgList<T> get_load_cimg(std::FILE *const file) {$/;"	f	struct:cimg_library_suffixed::CImgList
get_load_cimg	.\CImg.h	/^    static CImgList<T> get_load_cimg(std::FILE *const file,$/;"	f	struct:cimg_library_suffixed::CImgList
get_load_dcraw_external	.\CImg.h	/^    static CImg<T> get_load_dcraw_external(const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImg
get_load_dlm	.\CImg.h	/^    static CImg<T> get_load_dlm(const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImg
get_load_dlm	.\CImg.h	/^    static CImg<T> get_load_dlm(std::FILE *const file) {$/;"	f	struct:cimg_library_suffixed::CImg
get_load_exr	.\CImg.h	/^    static CImg<T> get_load_exr(const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImg
get_load_ffmpeg_external	.\CImg.h	/^    static CImg<T> get_load_ffmpeg_external(const char *const filename, const char axis='z', const float align=0) {$/;"	f	struct:cimg_library_suffixed::CImg
get_load_ffmpeg_external	.\CImg.h	/^    static CImgList<T> get_load_ffmpeg_external(const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImgList
get_load_gif_external	.\CImg.h	/^    static CImg<T> get_load_gif_external(const char *const filename,$/;"	f	struct:cimg_library_suffixed::CImg
get_load_gif_external	.\CImg.h	/^    static CImgList<T> get_load_gif_external(const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImgList
get_load_graphicsmagick_external	.\CImg.h	/^    static CImg<T> get_load_graphicsmagick_external(const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImg
get_load_gzip_external	.\CImg.h	/^    static CImg<T> get_load_gzip_external(const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImg
get_load_gzip_external	.\CImg.h	/^    static CImgList<T> get_load_gzip_external(const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImgList
get_load_imagemagick_external	.\CImg.h	/^    static CImg<T> get_load_imagemagick_external(const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImg
get_load_inr	.\CImg.h	/^    static CImg<T> get_load_inr(const char *const filename, float *const voxel_size=0) {$/;"	f	struct:cimg_library_suffixed::CImg
get_load_inr	.\CImg.h	/^    static CImg<T> get_load_inr(std::FILE *const file, float *voxel_size=0) {$/;"	f	struct:cimg_library_suffixed::CImg
get_load_jpeg	.\CImg.h	/^    static CImg<T> get_load_jpeg(const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImg
get_load_jpeg	.\CImg.h	/^    static CImg<T> get_load_jpeg(std::FILE *const file) {$/;"	f	struct:cimg_library_suffixed::CImg
get_load_magick	.\CImg.h	/^    static CImg<T> get_load_magick(const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImg
get_load_medcon_external	.\CImg.h	/^    static CImg<T> get_load_medcon_external(const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImg
get_load_minc2	.\CImg.h	/^    static CImg<T> get_load_minc2(const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImg
get_load_off	.\CImg.h	/^      static CImgList<T> get_load_off(const char *const filename,$/;"	f	struct:cimg_library_suffixed::CImgList
get_load_off	.\CImg.h	/^    static CImg<T> get_load_off(CImgList<tf>& primitives, CImgList<tc>& colors, const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImg
get_load_off	.\CImg.h	/^    static CImg<T> get_load_off(CImgList<tf>& primitives, CImgList<tc>& colors, std::FILE *const file) {$/;"	f	struct:cimg_library_suffixed::CImg
get_load_other	.\CImg.h	/^    static CImg<T> get_load_other(const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImg
get_load_pandore	.\CImg.h	/^    static CImg<T> get_load_pandore(const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImg
get_load_pandore	.\CImg.h	/^    static CImg<T> get_load_pandore(std::FILE *const file) {$/;"	f	struct:cimg_library_suffixed::CImg
get_load_parrec	.\CImg.h	/^    static CImg<T> get_load_parrec(const char *const filename, const char axis='c', const float align=0) {$/;"	f	struct:cimg_library_suffixed::CImg
get_load_parrec	.\CImg.h	/^    static CImgList<T> get_load_parrec(const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImgList
get_load_pfm	.\CImg.h	/^    static CImg<T> get_load_pfm(const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImg
get_load_pfm	.\CImg.h	/^    static CImg<T> get_load_pfm(std::FILE *const file) {$/;"	f	struct:cimg_library_suffixed::CImg
get_load_png	.\CImg.h	/^    static CImg<T> get_load_png(const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImg
get_load_png	.\CImg.h	/^    static CImg<T> get_load_png(std::FILE *const file) {$/;"	f	struct:cimg_library_suffixed::CImg
get_load_pnm	.\CImg.h	/^    static CImg<T> get_load_pnm(const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImg
get_load_pnm	.\CImg.h	/^    static CImg<T> get_load_pnm(std::FILE *const file) {$/;"	f	struct:cimg_library_suffixed::CImg
get_load_raw	.\CImg.h	/^    static CImg<T> get_load_raw(const char *const filename,$/;"	f	struct:cimg_library_suffixed::CImg
get_load_raw	.\CImg.h	/^    static CImg<T> get_load_raw(std::FILE *const file,$/;"	f	struct:cimg_library_suffixed::CImg
get_load_rgb	.\CImg.h	/^    static CImg<T> get_load_rgb(const char *const filename, const unsigned int dimw, const unsigned int dimh=1) {$/;"	f	struct:cimg_library_suffixed::CImg
get_load_rgb	.\CImg.h	/^    static CImg<T> get_load_rgb(std::FILE *const file, const unsigned int dimw, const unsigned int dimh=1) {$/;"	f	struct:cimg_library_suffixed::CImg
get_load_rgba	.\CImg.h	/^    static CImg<T> get_load_rgba(const char *const filename, const unsigned int dimw, const unsigned int dimh=1) {$/;"	f	struct:cimg_library_suffixed::CImg
get_load_rgba	.\CImg.h	/^    static CImg<T> get_load_rgba(std::FILE *const file, const unsigned int dimw, const unsigned int dimh=1) {$/;"	f	struct:cimg_library_suffixed::CImg
get_load_tiff	.\CImg.h	/^    static CImg<T> get_load_tiff(const char *const filename,$/;"	f	struct:cimg_library_suffixed::CImg
get_load_tiff	.\CImg.h	/^    static CImgList<T> get_load_tiff(const char *const filename,$/;"	f	struct:cimg_library_suffixed::CImgList
get_load_video	.\CImg.h	/^    static CImg<T> get_load_video(const char *const filename,$/;"	f	struct:cimg_library_suffixed::CImg
get_load_video	.\CImg.h	/^    static CImgList<T> get_load_video(const char *const filename,$/;"	f	struct:cimg_library_suffixed::CImgList
get_load_yuv	.\CImg.h	/^    static CImg<T> get_load_yuv(const char *const filename,$/;"	f	struct:cimg_library_suffixed::CImg
get_load_yuv	.\CImg.h	/^    static CImg<T> get_load_yuv(std::FILE *const file,$/;"	f	struct:cimg_library_suffixed::CImg
get_load_yuv	.\CImg.h	/^    static CImgList<T> get_load_yuv(const char *const filename,$/;"	f	struct:cimg_library_suffixed::CImgList
get_load_yuv	.\CImg.h	/^    static CImgList<T> get_load_yuv(std::FILE *const file,$/;"	f	struct:cimg_library_suffixed::CImgList
get_log	.\CImg.h	/^    CImg<Tfloat> get_log() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_log10	.\CImg.h	/^    CImg<Tfloat> get_log10() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_log2	.\CImg.h	/^    CImg<Tfloat> get_log2() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_map	.\CImg.h	/^    CImg<t> get_map(const CImg<t>& colormap, const unsigned int boundary_conditions=0) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_matrix	.\CImg.h	/^    CImg<T> get_matrix() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_matrix_at	.\CImg.h	/^    CImg<T> get_matrix_at(const unsigned int x=0, const unsigned int y=0, const unsigned int z=0) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_max	.\CImg.h	/^    CImg<T> get_max(const T& val) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_max	.\CImg.h	/^    CImg<Tfloat> get_max(const char *const expression) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_max	.\CImg.h	/^    CImg<_cimg_Tt> get_max(const CImg<t>& img) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_min	.\CImg.h	/^    CImg<T> get_min(const T& val) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_min	.\CImg.h	/^    CImg<Tfloat> get_min(const char *const expression) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_min	.\CImg.h	/^    CImg<_cimg_Tt> get_min(const CImg<t>& img) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_mirror	.\CImg.h	/^    CImg<T> get_mirror(const char *const axes) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_mirror	.\CImg.h	/^    CImg<T> get_mirror(const char axis) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_mul	.\CImg.h	/^    CImg<_cimg_Tt> get_mul(const CImg<t>& img) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_noise	.\CImg.h	/^    CImg<T> get_noise(const double sigma, const unsigned int noise_type=0) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_norm	.\CImg.h	/^    CImg<Tfloat> get_norm(const int norm_type=2) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_normalize	.\CImg.h	/^    CImg<Tfloat> get_normalize() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_normalize	.\CImg.h	/^    CImg<Tfloat> get_normalize(const T& min_value, const T& max_value) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_object3dtoCImg3d	.\CImg.h	/^    CImg<floatT> get_object3dtoCImg3d(const CImgList<tp>& primitives,$/;"	f	struct:cimg_library_suffixed::CImg
get_object3dtoCImg3d	.\CImg.h	/^    CImg<floatT> get_object3dtoCImg3d(const bool full_check=true) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_patchmatch	.\CImg.h	/^    CImg<intT> get_patchmatch(const CImg<T>& patch_image,$/;"	f	struct:cimg_library_suffixed::CImg
get_permute_axes	.\CImg.h	/^    CImg<T> get_permute_axes(const char *const order) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_pow	.\CImg.h	/^    CImg<Tfloat> get_pow(const CImg<t>& img) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_pow	.\CImg.h	/^    CImg<Tfloat> get_pow(const char *const expression) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_pow	.\CImg.h	/^    CImg<Tfloat> get_pow(const double p) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_projections2d	.\CImg.h	/^    CImg<T> get_projections2d(const unsigned int x0, const unsigned int y0, const unsigned int z0) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_projections3d	.\CImg.h	/^    CImg<floatT> get_projections3d(CImgList<tf>& primitives, CImgList<tc>& colors,$/;"	f	struct:cimg_library_suffixed::CImg
get_pseudoinvert	.\CImg.h	/^    CImg<Tfloat> get_pseudoinvert() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_quantize	.\CImg.h	/^    CImg<T> get_quantize(const unsigned int n, const bool keep_range=true) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_rand	.\CImg.h	/^    CImg<T> get_rand(const T& val_min, const T& val_max) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_remove	.\CImg.h	/^    CImgList<T> get_remove() const {$/;"	f	struct:cimg_library_suffixed::CImgList
get_remove	.\CImg.h	/^    CImgList<T> get_remove(const unsigned int pos) const {$/;"	f	struct:cimg_library_suffixed::CImgList
get_remove	.\CImg.h	/^    CImgList<T> get_remove(const unsigned int pos1, const unsigned int pos2) const {$/;"	f	struct:cimg_library_suffixed::CImgList
get_resize	.\CImg.h	/^    CImg<T> get_resize(const CImg<t>& src,$/;"	f	struct:cimg_library_suffixed::CImg
get_resize	.\CImg.h	/^    CImg<T> get_resize(const CImgDisplay& disp,$/;"	f	struct:cimg_library_suffixed::CImg
get_resize	.\CImg.h	/^    CImg<T> get_resize(const int size_x, const int size_y = -100,$/;"	f	struct:cimg_library_suffixed::CImg
get_resize_doubleXY	.\CImg.h	/^    CImg<T> get_resize_doubleXY() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_resize_halfXY	.\CImg.h	/^    CImg<T> get_resize_halfXY() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_resize_object3d	.\CImg.h	/^    CImg<Tfloat> get_resize_object3d() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_resize_object3d	.\CImg.h	/^    CImg<Tfloat> get_resize_object3d(const float sx, const float sy=-100, const float sz=-100) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_resize_tripleXY	.\CImg.h	/^    CImg<T> get_resize_tripleXY() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_reverse	.\CImg.h	/^    CImgList<T> get_reverse() const {$/;"	f	struct:cimg_library_suffixed::CImgList
get_reverse_object3d	.\CImg.h	/^    CImgList<T> get_reverse_object3d() const {$/;"	f	struct:cimg_library_suffixed::CImgList
get_rol	.\CImg.h	/^    CImg<T> get_rol(const CImg<t>& img) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_rol	.\CImg.h	/^    CImg<T> get_rol(const char *const expression) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_rol	.\CImg.h	/^    CImg<T> get_rol(const unsigned int n=1) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_ror	.\CImg.h	/^    CImg<T> get_ror(const CImg<t>& img) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_ror	.\CImg.h	/^    CImg<T> get_ror(const char *const expression) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_ror	.\CImg.h	/^    CImg<T> get_ror(const unsigned int n=1) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_rotate	.\CImg.h	/^    CImg<T> get_rotate(const float angle, const float cx, const float cy, const float zoom,$/;"	f	struct:cimg_library_suffixed::CImg
get_rotate	.\CImg.h	/^    CImg<T> get_rotate(const float angle, const unsigned int interpolation=1, const unsigned int boundary=0) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_round	.\CImg.h	/^    CImg<T> get_round(const double y=1, const unsigned int rounding_type=0) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_row	.\CImg.h	/^    CImg<T> get_row(const int y0) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_rows	.\CImg.h	/^    CImg<T> get_rows(const int y0, const int y1) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_sRGBtoRGB	.\CImg.h	/^    CImg<Tfloat> get_sRGBtoRGB() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_select	.\CImg.h	/^    CImg<intT> get_select(CImgDisplay &disp, const bool feature_type=true,$/;"	f	struct:cimg_library_suffixed::CImgList
get_select	.\CImg.h	/^    CImg<intT> get_select(CImgDisplay &disp,$/;"	f	struct:cimg_library_suffixed::CImg
get_select	.\CImg.h	/^    CImg<intT> get_select(const char *const title, const bool feature_type=true,$/;"	f	struct:cimg_library_suffixed::CImgList
get_select	.\CImg.h	/^    CImg<intT> get_select(const char *const title,$/;"	f	struct:cimg_library_suffixed::CImg
get_select_graph	.\CImg.h	/^    CImg<intT> get_select_graph(CImgDisplay &disp,$/;"	f	struct:cimg_library_suffixed::CImg
get_sequence	.\CImg.h	/^    CImg<T> get_sequence(const T& a0, const T& a1) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_serialize	.\CImg.h	/^    CImg<ucharT> get_serialize(const bool is_compressed=false) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_serialize	.\CImg.h	/^    CImg<ucharT> get_serialize(const bool is_compressed=false) const {$/;"	f	struct:cimg_library_suffixed::CImgList
get_shared	.\CImg.h	/^    CImg<T> get_shared() {$/;"	f	struct:cimg_library_suffixed::CImg
get_shared	.\CImg.h	/^    CImgList<T> get_shared() {$/;"	f	struct:cimg_library_suffixed::CImgList
get_shared	.\CImg.h	/^    const CImg<T> get_shared() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_shared	.\CImg.h	/^    const CImgList<T> get_shared() const {$/;"	f	struct:cimg_library_suffixed::CImgList
get_shared_channel	.\CImg.h	/^    CImg<T> get_shared_channel(const unsigned int c0) {$/;"	f	struct:cimg_library_suffixed::CImg
get_shared_channel	.\CImg.h	/^    const CImg<T> get_shared_channel(const unsigned int c0) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_shared_channels	.\CImg.h	/^    CImg<T> get_shared_channels(const unsigned int c0, const unsigned int c1) {$/;"	f	struct:cimg_library_suffixed::CImg
get_shared_channels	.\CImg.h	/^    const CImg<T> get_shared_channels(const unsigned int c0, const unsigned int c1) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_shared_images	.\CImg.h	/^    CImgList<T> get_shared_images(const unsigned int pos0, const unsigned int pos1) {$/;"	f	struct:cimg_library_suffixed::CImgList
get_shared_images	.\CImg.h	/^    const CImgList<T> get_shared_images(const unsigned int pos0, const unsigned int pos1) const {$/;"	f	struct:cimg_library_suffixed::CImgList
get_shared_points	.\CImg.h	/^    CImg<T> get_shared_points(const unsigned int x0, const unsigned int x1,$/;"	f	struct:cimg_library_suffixed::CImg
get_shared_points	.\CImg.h	/^    const CImg<T> get_shared_points(const unsigned int x0, const unsigned int x1,$/;"	f	struct:cimg_library_suffixed::CImg
get_shared_row	.\CImg.h	/^    CImg<T> get_shared_row(const unsigned int y0, const unsigned int z0=0, const unsigned int c0=0) {$/;"	f	struct:cimg_library_suffixed::CImg
get_shared_row	.\CImg.h	/^    const CImg<T> get_shared_row(const unsigned int y0, const unsigned int z0=0, const unsigned int c0=0) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_shared_rows	.\CImg.h	/^    CImg<T> get_shared_rows(const unsigned int y0, const unsigned int y1,$/;"	f	struct:cimg_library_suffixed::CImg
get_shared_rows	.\CImg.h	/^    const CImg<T> get_shared_rows(const unsigned int y0, const unsigned int y1,$/;"	f	struct:cimg_library_suffixed::CImg
get_shared_slice	.\CImg.h	/^    CImg<T> get_shared_slice(const unsigned int z0, const unsigned int c0=0) {$/;"	f	struct:cimg_library_suffixed::CImg
get_shared_slice	.\CImg.h	/^    const CImg<T> get_shared_slice(const unsigned int z0, const unsigned int c0=0) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_shared_slices	.\CImg.h	/^    CImg<T> get_shared_slices(const unsigned int z0, const unsigned int z1, const unsigned int c0=0) {$/;"	f	struct:cimg_library_suffixed::CImg
get_shared_slices	.\CImg.h	/^    const CImg<T> get_shared_slices(const unsigned int z0, const unsigned int z1, const unsigned int c0=0) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_sharpen	.\CImg.h	/^    CImg<T> get_sharpen(const float amplitude, const bool sharpen_type=false, const float edge=1,$/;"	f	struct:cimg_library_suffixed::CImg
get_shift	.\CImg.h	/^    CImg<T> get_shift(const int delta_x, const int delta_y=0, const int delta_z=0, const int delta_c=0,$/;"	f	struct:cimg_library_suffixed::CImg
get_shift_object3d	.\CImg.h	/^    CImg<Tfloat> get_shift_object3d() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_shift_object3d	.\CImg.h	/^    CImg<Tfloat> get_shift_object3d(const float tx, const float ty=0, const float tz=0) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_sign	.\CImg.h	/^    CImg<Tfloat> get_sign() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_sin	.\CImg.h	/^    CImg<Tfloat> get_sin() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_sinc	.\CImg.h	/^    CImg<Tfloat> get_sinc() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_sinh	.\CImg.h	/^    CImg<Tfloat> get_sinh() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_slice	.\CImg.h	/^    CImg<T> get_slice(const int z0) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_slices	.\CImg.h	/^    CImg<T> get_slices(const int z0, const int z1) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_solve	.\CImg.h	/^    CImg<_cimg_Ttfloat> get_solve(const CImg<t>& A) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_solve_tridiagonal	.\CImg.h	/^    CImg<_cimg_Ttfloat> get_solve_tridiagonal(const CImg<t>& A) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_sort	.\CImg.h	/^    CImg<T> get_sort(CImg<t>& permutations, const bool is_increasing=true) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_sort	.\CImg.h	/^    CImg<T> get_sort(const bool is_increasing=true, const char axis=0) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_split	.\CImg.h	/^    CImgList<T> get_split(const CImg<t>& values, const char axis=0, const bool keep_values=true) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_split	.\CImg.h	/^    CImgList<T> get_split(const char axis, const int nb=-1) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_split	.\CImg.h	/^    CImgList<T> get_split(const char axis, const int nb=-1) const {$/;"	f	struct:cimg_library_suffixed::CImgList
get_sqr	.\CImg.h	/^    CImg<Tfloat> get_sqr() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_sqrt	.\CImg.h	/^    CImg<Tfloat> get_sqrt() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_stats	.\CImg.h	/^    CImg<Tdouble> get_stats(const unsigned int variance_method=1) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_streamline	.\CImg.h	/^    CImg<floatT> get_streamline(const float x, const float y, const float z,$/;"	f	struct:cimg_library_suffixed::CImg
get_structure_tensors	.\CImg.h	/^    CImg<Tfloat> get_structure_tensors(const unsigned int scheme=2) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_symmetric_eigen	.\CImg.h	/^    CImgList<Tfloat> get_symmetric_eigen() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_tan	.\CImg.h	/^    CImg<Tfloat> get_tan() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_tanh	.\CImg.h	/^    CImg<Tfloat> get_tanh() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_tensor	.\CImg.h	/^    CImg<T> get_tensor() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_tensor_at	.\CImg.h	/^    CImg<T> get_tensor_at(const unsigned int x, const unsigned int y=0, const unsigned int z=0) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_threshold	.\CImg.h	/^    CImg<T> get_threshold(const T& value, const bool soft_threshold=false, const bool strict_threshold=false) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_transpose	.\CImg.h	/^    CImg<T> get_transpose() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_unroll	.\CImg.h	/^    CImg<T> get_unroll(const char axis) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_unserialize	.\CImg.h	/^    static CImgList<T> get_unserialize(const CImg<t>& buffer) {$/;"	f	struct:cimg_library_suffixed::CImgList
get_vanvliet	.\CImg.h	/^    CImg<Tfloat> get_vanvliet(const float sigma, const unsigned int order, const char axis='x',$/;"	f	struct:cimg_library_suffixed::CImg
get_vector	.\CImg.h	/^    CImg<T> get_vector() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_vector_at	.\CImg.h	/^    CImg<T> get_vector_at(const unsigned int x, const unsigned int y=0, const unsigned int z=0) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_warp	.\CImg.h	/^    CImg<T> get_warp(const CImg<t>& warp, const unsigned int mode=0,$/;"	f	struct:cimg_library_suffixed::CImg
get_watershed	.\CImg.h	/^    CImg<T> get_watershed(const CImg<t>& priority, const bool fill_lines=true) const {$/;"	f	struct:cimg_library_suffixed::CImg
get_xyYtoRGB	.\CImg.h	/^    CImg<Tuchar> get_xyYtoRGB() const {$/;"	f	struct:cimg_library_suffixed::CImg
get_xyYtoXYZ	.\CImg.h	/^    CImg<Tfloat> get_xyYtoXYZ() const {$/;"	f	struct:cimg_library_suffixed::CImg
getrf	.\CImg.h	/^    inline void getrf(int &N, T *lapA, int *IPIV, int &INFO) {$/;"	f	namespace:cimg_library_suffixed::cimg
getrf	.\CImg.h	/^    inline void getrf(int &N, float *lapA, int *IPIV, int &INFO) {$/;"	f	namespace:cimg_library_suffixed::cimg
getri	.\CImg.h	/^    inline void getri(int &N, T *lapA, int *IPIV, T* WORK, int &LWORK, int &INFO) {$/;"	f	namespace:cimg_library_suffixed::cimg
getri	.\CImg.h	/^    inline void getri(int &N, float *lapA, int *IPIV, float* WORK, int &LWORK, int &INFO) {$/;"	f	namespace:cimg_library_suffixed::cimg
getrs	.\CImg.h	/^    inline void getrs(char &TRANS, int &N, T *lapA, int *IPIV, T *lapB, int &INFO) {$/;"	f	namespace:cimg_library_suffixed::cimg
getrs	.\CImg.h	/^    inline void getrs(char &TRANS, int &N, float *lapA, int *IPIV, float *lapB, int &INFO) {$/;"	f	namespace:cimg_library_suffixed::cimg
grand	.\CImg.h	/^    inline double grand() {$/;"	f	namespace:cimg_library_suffixed::cimg
graphicsmagick_path	.\CImg.h	/^  inline const char* graphicsmagick_path(const char *const user_path, const bool reinit_path) {$/;"	f	namespace:cimg_library_suffixed::cimg
gunzip_path	.\CImg.h	/^  inline const char *gunzip_path(const char *const user_path, const bool reinit_path) {$/;"	f	namespace:cimg_library_suffixed::cimg
gzip_path	.\CImg.h	/^  inline const char *gzip_path(const char *const user_path, const bool reinit_path) {$/;"	f	namespace:cimg_library_suffixed::cimg
haar	.\CImg.h	/^    CImg<T>& haar(const bool invert=false, const unsigned int nb_scales=1) {$/;"	f	struct:cimg_library_suffixed::CImg
haar	.\CImg.h	/^    CImg<T>& haar(const char axis, const bool invert=false, const unsigned int nb_scales=1) {$/;"	f	struct:cimg_library_suffixed::CImg
height	.\CImg.h	/^    int height() const {$/;"	f	struct:cimg_library_suffixed::CImg
height	.\CImg.h	/^    int height() const {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
hide_mouse	.\CImg.h	/^    CImgDisplay& hide_mouse() {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
histogram	.\CImg.h	/^    CImg<T>& histogram(const unsigned int nb_levels) {$/;"	f	struct:cimg_library_suffixed::CImg
histogram	.\CImg.h	/^    CImg<T>& histogram(const unsigned int nb_levels, const T& min_value, const T& max_value) {$/;"	f	struct:cimg_library_suffixed::CImg
hot_LUT256	.\CImg.h	/^    static const CImg<Tuchar>& hot_LUT256() {$/;"	f	struct:cimg_library_suffixed::CImg
hypot	.\CImg.h	/^    inline double hypot(const double x, const double y) {$/;"	f	namespace:cimg_library_suffixed::cimg
identity_matrix	.\CImg.h	/^    CImg<T>& identity_matrix() {$/;"	f	struct:cimg_library_suffixed::CImg
identity_matrix	.\CImg.h	/^    static CImg<T> identity_matrix(const unsigned int N) {$/;"	f	struct:cimg_library_suffixed::CImg
image_path	.\blocks.cpp	9;"	d	file:
image_path	.\hue.cpp	9;"	d	file:
image_path	.\vision.cpp	7;"	d	file:
imagemagick_path	.\CImg.h	/^  inline const char* imagemagick_path(const char *const user_path, const bool reinit_path) {$/;"	f	namespace:cimg_library_suffixed::cimg
images	.\CImg.h	/^    CImgList<T>& images(const unsigned int pos0, const unsigned int pos1) {$/;"	f	struct:cimg_library_suffixed::CImgList
img_stats	.\CImg.h	/^      CImg<doubleT> _img_stats, &img_stats;$/;"	m	struct:cimg_library_suffixed::CImg::_cimg_math_parser
imgin	.\CImg.h	/^      const CImg<T>& imgin;$/;"	m	struct:cimg_library_suffixed::CImg::_cimg_math_parser
imgout	.\CImg.h	/^      CImg<T> &imgout;$/;"	m	struct:cimg_library_suffixed::CImg::_cimg_math_parser
index	.\CImg.h	/^    CImg<T>& index(const CImg<t>& colormap, const float dithering=1, const bool map_indexes=false) {$/;"	f	struct:cimg_library_suffixed::CImg
inf	.\CImg.h	/^      static T inf() { return max(); }$/;"	f	struct:cimg_library_suffixed::cimg::type
inf	.\CImg.h	/^      static bool inf() { return max(); }$/;"	f	struct:cimg_library_suffixed::cimg::type
inf	.\CImg.h	/^      static char inf() { return max(); }$/;"	f	struct:cimg_library_suffixed::cimg::type
inf	.\CImg.h	/^      static double inf() {$/;"	f	struct:cimg_library_suffixed::cimg::type
inf	.\CImg.h	/^      static float inf() { return (float)cimg::type<double>::inf(); }$/;"	f	struct:cimg_library_suffixed::cimg::type
inf	.\CImg.h	/^      static int inf() { return max(); }$/;"	f	struct:cimg_library_suffixed::cimg::type
inf	.\CImg.h	/^      static long double inf() { return max()*max(); }$/;"	f	struct:cimg_library_suffixed::cimg::type
inf	.\CImg.h	/^      static long inf() { return max(); }$/;"	f	struct:cimg_library_suffixed::cimg::type
inf	.\CImg.h	/^      static short inf() { return max(); }$/;"	f	struct:cimg_library_suffixed::cimg::type
inf	.\CImg.h	/^      static signed char inf() { return max(); }$/;"	f	struct:cimg_library_suffixed::cimg::type
inf	.\CImg.h	/^      static unsigned char inf() { return max(); }$/;"	f	struct:cimg_library_suffixed::cimg::type
inf	.\CImg.h	/^      static unsigned int inf() { return max(); }$/;"	f	struct:cimg_library_suffixed::cimg::type
inf	.\CImg.h	/^      static unsigned long inf() { return max(); }$/;"	f	struct:cimg_library_suffixed::cimg::type
inf	.\CImg.h	/^      static unsigned short inf() { return max(); }$/;"	f	struct:cimg_library_suffixed::cimg::type
info	.\CImg.h	/^    inline void info() {$/;"	f	namespace:cimg_library_suffixed::cimg
init_size	.\CImg.h	/^      unsigned int mempos, mem_img_median, debug_indent, init_size, result_dim;$/;"	m	struct:cimg_library_suffixed::CImg::_cimg_math_parser
insert	.\CImg.h	/^    CImgList<T>& insert(const CImg<T>& img, const unsigned int pos=~0U, const bool is_shared=false) {$/;"	f	struct:cimg_library_suffixed::CImgList
insert	.\CImg.h	/^    CImgList<T>& insert(const CImg<t>& img, const unsigned int pos=~0U, const bool is_shared=false) {$/;"	f	struct:cimg_library_suffixed::CImgList
insert	.\CImg.h	/^    CImgList<T>& insert(const CImgList<t>& list, const unsigned int pos=~0U, const bool is_shared=false) {$/;"	f	struct:cimg_library_suffixed::CImgList
insert	.\CImg.h	/^    CImgList<T>& insert(const unsigned int n, const CImg<t>& img, const unsigned int pos=~0U,$/;"	f	struct:cimg_library_suffixed::CImgList
insert	.\CImg.h	/^    CImgList<T>& insert(const unsigned int n, const CImgList<t>& list, const unsigned int pos=~0U,$/;"	f	struct:cimg_library_suffixed::CImgList
insert	.\CImg.h	/^    CImgList<T>& insert(const unsigned int n, const unsigned int pos=~0U) {$/;"	f	struct:cimg_library_suffixed::CImgList
int64	.\CImg.h	335;"	d
int64	.\CImg.h	338;"	d
intT	.\CImg.h	/^    typedef typename cimg::last<T,int>::type intT;$/;"	t	struct:cimg_library_suffixed::CImg
intT	.\CImg.h	/^    typedef typename cimg::last<T,int>::type intT;$/;"	t	struct:cimg_library_suffixed::CImgList
invert	.\CImg.h	/^    CImg<T>& invert(const bool use_LU=true) {$/;"	f	struct:cimg_library_suffixed::CImg
invert	.\CImg.h	/^  inline CImg<_cimg_Tfloat> invert(const CImg<T>& instance) {$/;"	f	namespace:cimg_library_suffixed
invert_endianness	.\CImg.h	/^    CImg<T>& invert_endianness() {$/;"	f	struct:cimg_library_suffixed::CImg
invert_endianness	.\CImg.h	/^    inline T& invert_endianness(T& a) {$/;"	f	namespace:cimg_library_suffixed::cimg
invert_endianness	.\CImg.h	/^    inline void invert_endianness(T* const buffer, const unsigned long size) {$/;"	f	namespace:cimg_library_suffixed::cimg
is_CImg3d	.\CImg.h	/^    bool is_CImg3d(const bool full_check=true, char *const error_message=0) const {$/;"	f	struct:cimg_library_suffixed::CImg
is_blue_first	.\CImg.h	/^      bool is_blue_first;$/;"	m	struct:cimg_library_suffixed::cimg::X11_info
is_closed	.\CImg.h	/^    bool is_closed() const {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
is_directory	.\CImg.h	/^    inline bool is_directory(const char *const path) {$/;"	f	namespace:cimg_library_suffixed::cimg
is_empty	.\CImg.h	/^    bool is_empty() const {$/;"	f	struct:cimg_library_suffixed::CImg
is_empty	.\CImg.h	/^    bool is_empty() const {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
is_empty	.\CImg.h	/^    bool is_empty() const {$/;"	f	struct:cimg_library_suffixed::CImgList
is_event	.\CImg.h	/^    bool is_event() const {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
is_file	.\CImg.h	/^    inline bool is_file(const char *const path) {$/;"	f	namespace:cimg_library_suffixed::cimg
is_float	.\CImg.h	/^      static bool is_float() { return false; }$/;"	f	struct:cimg_library_suffixed::cimg::type
is_float	.\CImg.h	/^      static bool is_float() { return true; }$/;"	f	struct:cimg_library_suffixed::cimg::type
is_fullscreen	.\CImg.h	/^    bool is_fullscreen() const {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
is_inf	.\CImg.h	/^      static bool is_inf() { return false; }$/;"	f	struct:cimg_library_suffixed::cimg::type
is_inf	.\CImg.h	/^      static bool is_inf(const T) { return false; }$/;"	f	struct:cimg_library_suffixed::cimg::type
is_inf	.\CImg.h	/^      static bool is_inf(const bool) { return false; }$/;"	f	struct:cimg_library_suffixed::cimg::type
is_inf	.\CImg.h	/^      static bool is_inf(const char) { return false; }$/;"	f	struct:cimg_library_suffixed::cimg::type
is_inf	.\CImg.h	/^      static bool is_inf(const double val) {$/;"	f	struct:cimg_library_suffixed::cimg::type
is_inf	.\CImg.h	/^      static bool is_inf(const float val) {$/;"	f	struct:cimg_library_suffixed::cimg::type
is_inf	.\CImg.h	/^      static bool is_inf(const int) { return false; }$/;"	f	struct:cimg_library_suffixed::cimg::type
is_inf	.\CImg.h	/^      static bool is_inf(const long double val) {$/;"	f	struct:cimg_library_suffixed::cimg::type
is_inf	.\CImg.h	/^      static bool is_inf(const long) { return false; }$/;"	f	struct:cimg_library_suffixed::cimg::type
is_inf	.\CImg.h	/^      static bool is_inf(const short) { return false; }$/;"	f	struct:cimg_library_suffixed::cimg::type
is_inf	.\CImg.h	/^      static bool is_inf(const signed char) { return false; }$/;"	f	struct:cimg_library_suffixed::cimg::type
is_inf	.\CImg.h	/^      static bool is_inf(const unsigned char) { return false; }$/;"	f	struct:cimg_library_suffixed::cimg::type
is_inf	.\CImg.h	/^      static bool is_inf(const unsigned int) { return false; }$/;"	f	struct:cimg_library_suffixed::cimg::type
is_inf	.\CImg.h	/^      static bool is_inf(const unsigned long) { return false; }$/;"	f	struct:cimg_library_suffixed::cimg::type
is_inf	.\CImg.h	/^      static bool is_inf(const unsigned short) { return false; }$/;"	f	struct:cimg_library_suffixed::cimg::type
is_inf	.\CImg.h	/^    bool is_inf() const {$/;"	f	struct:cimg_library_suffixed::CImg
is_key	.\CImg.h	/^    bool is_key() const {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
is_key	.\CImg.h	/^    bool is_key(const unsigned int keycode) const {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
is_key	.\CImg.h	/^    bool& is_key(const char *const keycode) {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
is_key_sequence	.\CImg.h	/^    bool is_key_sequence(const unsigned int *const keycodes_sequence, const unsigned int length,$/;"	f	struct:cimg_library_suffixed::CImgDisplay
is_moved	.\CImg.h	/^    bool is_moved() const {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
is_nan	.\CImg.h	/^      static bool is_nan(const T) { return false; }$/;"	f	struct:cimg_library_suffixed::cimg::type
is_nan	.\CImg.h	/^      static bool is_nan(const bool) { return false; }$/;"	f	struct:cimg_library_suffixed::cimg::type
is_nan	.\CImg.h	/^      static bool is_nan(const char) { return false; }$/;"	f	struct:cimg_library_suffixed::cimg::type
is_nan	.\CImg.h	/^      static bool is_nan(const double val) {$/;"	f	struct:cimg_library_suffixed::cimg::type
is_nan	.\CImg.h	/^      static bool is_nan(const float val) {$/;"	f	struct:cimg_library_suffixed::cimg::type
is_nan	.\CImg.h	/^      static bool is_nan(const int) { return false; }$/;"	f	struct:cimg_library_suffixed::cimg::type
is_nan	.\CImg.h	/^      static bool is_nan(const long double val) {$/;"	f	struct:cimg_library_suffixed::cimg::type
is_nan	.\CImg.h	/^      static bool is_nan(const long) { return false; }$/;"	f	struct:cimg_library_suffixed::cimg::type
is_nan	.\CImg.h	/^      static bool is_nan(const short) { return false; }$/;"	f	struct:cimg_library_suffixed::cimg::type
is_nan	.\CImg.h	/^      static bool is_nan(const signed char) { return false; }$/;"	f	struct:cimg_library_suffixed::cimg::type
is_nan	.\CImg.h	/^      static bool is_nan(const unsigned char) { return false; }$/;"	f	struct:cimg_library_suffixed::cimg::type
is_nan	.\CImg.h	/^      static bool is_nan(const unsigned int) { return false; }$/;"	f	struct:cimg_library_suffixed::cimg::type
is_nan	.\CImg.h	/^      static bool is_nan(const unsigned long) { return false; }$/;"	f	struct:cimg_library_suffixed::cimg::type
is_nan	.\CImg.h	/^      static bool is_nan(const unsigned short) { return false; }$/;"	f	struct:cimg_library_suffixed::cimg::type
is_nan	.\CImg.h	/^    bool is_nan() const {$/;"	f	struct:cimg_library_suffixed::CImg
is_object3d	.\CImg.h	/^    bool is_object3d(const CImgList<tp>& primitives,$/;"	f	struct:cimg_library_suffixed::CImg
is_overlapped	.\CImg.h	/^    bool is_overlapped(const CImg<t>& img) const {$/;"	f	struct:cimg_library_suffixed::CImg
is_resized	.\CImg.h	/^    bool is_resized() const {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
is_sameC	.\CImg.h	/^    bool is_sameC(const CImg<t>& img) const {$/;"	f	struct:cimg_library_suffixed::CImg
is_sameC	.\CImg.h	/^    bool is_sameC(const unsigned int size_c) const {$/;"	f	struct:cimg_library_suffixed::CImg
is_sameN	.\CImg.h	/^    bool is_sameN(const CImgList<t>& list) const {$/;"	f	struct:cimg_library_suffixed::CImgList
is_sameN	.\CImg.h	/^    bool is_sameN(const unsigned int size_n) const {$/;"	f	struct:cimg_library_suffixed::CImgList
is_sameNXYZC	.\CImg.h	/^    bool is_sameNXYZC(const unsigned int n,$/;"	f	struct:cimg_library_suffixed::CImgList
is_sameX	.\CImg.h	/^    bool is_sameX(const CImg<t>& img) const {$/;"	f	struct:cimg_library_suffixed::CImg
is_sameX	.\CImg.h	/^    bool is_sameX(const CImgDisplay& disp) const {$/;"	f	struct:cimg_library_suffixed::CImg
is_sameX	.\CImg.h	/^    bool is_sameX(const unsigned int size_x) const {$/;"	f	struct:cimg_library_suffixed::CImg
is_sameXC	.\CImg.h	/^    bool is_sameXC(const CImg<t>& img) const {$/;"	f	struct:cimg_library_suffixed::CImg
is_sameXC	.\CImg.h	/^    bool is_sameXC(const unsigned int size_x, const unsigned int size_c) const {$/;"	f	struct:cimg_library_suffixed::CImg
is_sameXY	.\CImg.h	/^    bool is_sameXY(const CImg<t>& img) const {$/;"	f	struct:cimg_library_suffixed::CImg
is_sameXY	.\CImg.h	/^    bool is_sameXY(const CImgDisplay& disp) const {$/;"	f	struct:cimg_library_suffixed::CImg
is_sameXY	.\CImg.h	/^    bool is_sameXY(const unsigned int size_x, const unsigned int size_y) const {$/;"	f	struct:cimg_library_suffixed::CImg
is_sameXYC	.\CImg.h	/^    bool is_sameXYC(const CImg<t>& img) const {$/;"	f	struct:cimg_library_suffixed::CImg
is_sameXYC	.\CImg.h	/^    bool is_sameXYC(const unsigned int size_x, const unsigned int size_y, const unsigned int size_c) const {$/;"	f	struct:cimg_library_suffixed::CImg
is_sameXYZ	.\CImg.h	/^    bool is_sameXYZ(const CImg<t>& img) const {$/;"	f	struct:cimg_library_suffixed::CImg
is_sameXYZ	.\CImg.h	/^    bool is_sameXYZ(const unsigned int size_x, const unsigned int size_y, const unsigned int size_z) const {$/;"	f	struct:cimg_library_suffixed::CImg
is_sameXYZC	.\CImg.h	/^    bool is_sameXYZC(const CImg<t>& img) const {$/;"	f	struct:cimg_library_suffixed::CImg
is_sameXYZC	.\CImg.h	/^    bool is_sameXYZC(const unsigned int dx, const unsigned int dy,$/;"	f	struct:cimg_library_suffixed::CImgList
is_sameXYZC	.\CImg.h	/^    bool is_sameXYZC(const unsigned int size_x, const unsigned int size_y,$/;"	f	struct:cimg_library_suffixed::CImg
is_sameXZ	.\CImg.h	/^    bool is_sameXZ(const CImg<t>& img) const {$/;"	f	struct:cimg_library_suffixed::CImg
is_sameXZ	.\CImg.h	/^    bool is_sameXZ(const unsigned int size_x, const unsigned int size_z) const {$/;"	f	struct:cimg_library_suffixed::CImg
is_sameXZC	.\CImg.h	/^    bool is_sameXZC(const CImg<t>& img) const {$/;"	f	struct:cimg_library_suffixed::CImg
is_sameXZC	.\CImg.h	/^    bool is_sameXZC(const unsigned int size_x, const unsigned int size_z, const unsigned int size_c) const {$/;"	f	struct:cimg_library_suffixed::CImg
is_sameY	.\CImg.h	/^    bool is_sameY(const CImg<t>& img) const {$/;"	f	struct:cimg_library_suffixed::CImg
is_sameY	.\CImg.h	/^    bool is_sameY(const CImgDisplay& disp) const {$/;"	f	struct:cimg_library_suffixed::CImg
is_sameY	.\CImg.h	/^    bool is_sameY(const unsigned int size_y) const {$/;"	f	struct:cimg_library_suffixed::CImg
is_sameYC	.\CImg.h	/^    bool is_sameYC(const CImg<t>& img) const {$/;"	f	struct:cimg_library_suffixed::CImg
is_sameYC	.\CImg.h	/^    bool is_sameYC(const unsigned int size_y, const unsigned int size_c) const {$/;"	f	struct:cimg_library_suffixed::CImg
is_sameYZ	.\CImg.h	/^    bool is_sameYZ(const CImg<t>& img) const {$/;"	f	struct:cimg_library_suffixed::CImg
is_sameYZ	.\CImg.h	/^    bool is_sameYZ(const unsigned int size_y, const unsigned int size_z) const {$/;"	f	struct:cimg_library_suffixed::CImg
is_sameYZC	.\CImg.h	/^    bool is_sameYZC(const CImg<t>& img) const {$/;"	f	struct:cimg_library_suffixed::CImg
is_sameYZC	.\CImg.h	/^    bool is_sameYZC(const unsigned int size_y, const unsigned int size_z, const unsigned int size_c) const {$/;"	f	struct:cimg_library_suffixed::CImg
is_sameZ	.\CImg.h	/^    bool is_sameZ(const CImg<t>& img) const {$/;"	f	struct:cimg_library_suffixed::CImg
is_sameZ	.\CImg.h	/^    bool is_sameZ(const unsigned int size_z) const {$/;"	f	struct:cimg_library_suffixed::CImg
is_sameZC	.\CImg.h	/^    bool is_sameZC(const CImg<t>& img) const {$/;"	f	struct:cimg_library_suffixed::CImg
is_sameZC	.\CImg.h	/^    bool is_sameZC(const unsigned int size_z, const unsigned int size_c) const {$/;"	f	struct:cimg_library_suffixed::CImg
is_saveable	.\CImg.h	/^    static bool is_saveable(const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImgList
is_shared	.\CImg.h	/^    bool is_shared() const {$/;"	f	struct:cimg_library_suffixed::CImg
is_shm_enabled	.\CImg.h	/^      bool is_shm_enabled;$/;"	m	struct:cimg_library_suffixed::cimg::X11_info
is_tmp_vector	.\CImg.h	/^      bool is_tmp_vector(const unsigned int arg) const {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
isoline3d	.\CImg.h	/^    static CImg<floatT> isoline3d(CImgList<tf>& primitives, const char *const expression, const float isovalue,$/;"	f	struct:cimg_library_suffixed::CImg
isoline3d	.\CImg.h	/^    static CImg<floatT> isoline3d(CImgList<tf>& primitives, const tfunc& func, const float isovalue,$/;"	f	struct:cimg_library_suffixed::CImg
isosurface3d	.\CImg.h	/^    static CImg<floatT> isosurface3d(CImgList<tf>& primitives, const char *const expression, const float isovalue,$/;"	f	struct:cimg_library_suffixed::CImg
isosurface3d	.\CImg.h	/^    static CImg<floatT> isosurface3d(CImgList<tf>& primitives, const tfunc& func, const float isovalue,$/;"	f	struct:cimg_library_suffixed::CImg
iterator	.\CImg.h	/^    typedef CImg<T>* iterator;$/;"	t	struct:cimg_library_suffixed::CImgList
iterator	.\CImg.h	/^    typedef T* iterator;$/;"	t	struct:cimg_library_suffixed::CImg
jet_LUT256	.\CImg.h	/^    static const CImg<Tuchar>& jet_LUT256() {$/;"	f	struct:cimg_library_suffixed::CImg
key	.\CImg.h	/^    unsigned int key(const unsigned int pos=0) const {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
key0	.\CImg.h	/^    const unsigned int key0          = '0';$/;"	m	namespace:cimg_library_suffixed::cimg
key0	.\CImg.h	/^    const unsigned int key0          = 24U;  \/\/!< Keycode for the \\c 0 key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
key0	.\CImg.h	/^    const unsigned int key0          = XK_0;$/;"	m	namespace:cimg_library_suffixed::cimg
key1	.\CImg.h	/^    const unsigned int key1          = '1';$/;"	m	namespace:cimg_library_suffixed::cimg
key1	.\CImg.h	/^    const unsigned int key1          = 15U;  \/\/!< Keycode for the \\c 1 key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
key1	.\CImg.h	/^    const unsigned int key1          = XK_1;$/;"	m	namespace:cimg_library_suffixed::cimg
key2	.\CImg.h	/^    const unsigned int key2          = '2';$/;"	m	namespace:cimg_library_suffixed::cimg
key2	.\CImg.h	/^    const unsigned int key2          = 16U;  \/\/!< Keycode for the \\c 2 key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
key2	.\CImg.h	/^    const unsigned int key2          = XK_2;$/;"	m	namespace:cimg_library_suffixed::cimg
key3	.\CImg.h	/^    const unsigned int key3          = '3';$/;"	m	namespace:cimg_library_suffixed::cimg
key3	.\CImg.h	/^    const unsigned int key3          = 17U;  \/\/!< Keycode for the \\c 3 key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
key3	.\CImg.h	/^    const unsigned int key3          = XK_3;$/;"	m	namespace:cimg_library_suffixed::cimg
key4	.\CImg.h	/^    const unsigned int key4          = '4';$/;"	m	namespace:cimg_library_suffixed::cimg
key4	.\CImg.h	/^    const unsigned int key4          = 18U;  \/\/!< Keycode for the \\c 4 key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
key4	.\CImg.h	/^    const unsigned int key4          = XK_4;$/;"	m	namespace:cimg_library_suffixed::cimg
key5	.\CImg.h	/^    const unsigned int key5          = '5';$/;"	m	namespace:cimg_library_suffixed::cimg
key5	.\CImg.h	/^    const unsigned int key5          = 19U;  \/\/!< Keycode for the \\c 5 key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
key5	.\CImg.h	/^    const unsigned int key5          = XK_5;$/;"	m	namespace:cimg_library_suffixed::cimg
key6	.\CImg.h	/^    const unsigned int key6          = '6';$/;"	m	namespace:cimg_library_suffixed::cimg
key6	.\CImg.h	/^    const unsigned int key6          = 20U;  \/\/!< Keycode for the \\c 6 key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
key6	.\CImg.h	/^    const unsigned int key6          = XK_6;$/;"	m	namespace:cimg_library_suffixed::cimg
key7	.\CImg.h	/^    const unsigned int key7          = '7';$/;"	m	namespace:cimg_library_suffixed::cimg
key7	.\CImg.h	/^    const unsigned int key7          = 21U;  \/\/!< Keycode for the \\c 7 key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
key7	.\CImg.h	/^    const unsigned int key7          = XK_7;$/;"	m	namespace:cimg_library_suffixed::cimg
key8	.\CImg.h	/^    const unsigned int key8          = '8';$/;"	m	namespace:cimg_library_suffixed::cimg
key8	.\CImg.h	/^    const unsigned int key8          = 22U;  \/\/!< Keycode for the \\c 8 key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
key8	.\CImg.h	/^    const unsigned int key8          = XK_8;$/;"	m	namespace:cimg_library_suffixed::cimg
key9	.\CImg.h	/^    const unsigned int key9          = '9';$/;"	m	namespace:cimg_library_suffixed::cimg
key9	.\CImg.h	/^    const unsigned int key9          = 23U;  \/\/!< Keycode for the \\c 9 key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
key9	.\CImg.h	/^    const unsigned int key9          = XK_9;$/;"	m	namespace:cimg_library_suffixed::cimg
keyA	.\CImg.h	/^    const unsigned int keyA          = 'A';$/;"	m	namespace:cimg_library_suffixed::cimg
keyA	.\CImg.h	/^    const unsigned int keyA          = 44U;  \/\/!< Keycode for the \\c A key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyA	.\CImg.h	/^    const unsigned int keyA          = XK_a;$/;"	m	namespace:cimg_library_suffixed::cimg
keyALT	.\CImg.h	/^    const unsigned int keyALT        = 66U;  \/\/!< Keycode for the \\c ALT key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyALT	.\CImg.h	/^    const unsigned int keyALT        = VK_LMENU;$/;"	m	namespace:cimg_library_suffixed::cimg
keyALT	.\CImg.h	/^    const unsigned int keyALT        = XK_Alt_L;$/;"	m	namespace:cimg_library_suffixed::cimg
keyALTGR	.\CImg.h	/^    const unsigned int keyALTGR      = 68U;  \/\/!< Keycode for the \\c ALTGR key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyALTGR	.\CImg.h	/^    const unsigned int keyALTGR      = VK_CONTROL;$/;"	m	namespace:cimg_library_suffixed::cimg
keyALTGR	.\CImg.h	/^    const unsigned int keyALTGR      = XK_Alt_R;$/;"	m	namespace:cimg_library_suffixed::cimg
keyAPPLEFT	.\CImg.h	/^    const unsigned int keyAPPLEFT    = 65U;  \/\/!< Keycode for the \\c APPLEFT key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyAPPLEFT	.\CImg.h	/^    const unsigned int keyAPPLEFT    = VK_LWIN;$/;"	m	namespace:cimg_library_suffixed::cimg
keyAPPLEFT	.\CImg.h	/^    const unsigned int keyAPPLEFT    = XK_Super_L;$/;"	m	namespace:cimg_library_suffixed::cimg
keyAPPRIGHT	.\CImg.h	/^    const unsigned int keyAPPRIGHT   = 69U;  \/\/!< Keycode for the \\c APPRIGHT key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyAPPRIGHT	.\CImg.h	/^    const unsigned int keyAPPRIGHT   = VK_RWIN;$/;"	m	namespace:cimg_library_suffixed::cimg
keyAPPRIGHT	.\CImg.h	/^    const unsigned int keyAPPRIGHT   = XK_Super_R;$/;"	m	namespace:cimg_library_suffixed::cimg
keyARROWDOWN	.\CImg.h	/^    const unsigned int keyARROWDOWN  = 73U;  \/\/!< Keycode for the \\c ARROWDOWN key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyARROWDOWN	.\CImg.h	/^    const unsigned int keyARROWDOWN  = VK_DOWN;$/;"	m	namespace:cimg_library_suffixed::cimg
keyARROWDOWN	.\CImg.h	/^    const unsigned int keyARROWDOWN  = XK_Down;$/;"	m	namespace:cimg_library_suffixed::cimg
keyARROWLEFT	.\CImg.h	/^    const unsigned int keyARROWLEFT  = 72U;  \/\/!< Keycode for the \\c ARROWLEFT key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyARROWLEFT	.\CImg.h	/^    const unsigned int keyARROWLEFT  = VK_LEFT;$/;"	m	namespace:cimg_library_suffixed::cimg
keyARROWLEFT	.\CImg.h	/^    const unsigned int keyARROWLEFT  = XK_Left;$/;"	m	namespace:cimg_library_suffixed::cimg
keyARROWRIGHT	.\CImg.h	/^    const unsigned int keyARROWRIGHT = 74U;  \/\/!< Keycode for the \\c ARROWRIGHT key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyARROWRIGHT	.\CImg.h	/^    const unsigned int keyARROWRIGHT = VK_RIGHT;$/;"	m	namespace:cimg_library_suffixed::cimg
keyARROWRIGHT	.\CImg.h	/^    const unsigned int keyARROWRIGHT = XK_Right;$/;"	m	namespace:cimg_library_suffixed::cimg
keyARROWUP	.\CImg.h	/^    const unsigned int keyARROWUP    = 63U;  \/\/!< Keycode for the \\c ARROWUP key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyARROWUP	.\CImg.h	/^    const unsigned int keyARROWUP    = VK_UP;$/;"	m	namespace:cimg_library_suffixed::cimg
keyARROWUP	.\CImg.h	/^    const unsigned int keyARROWUP    = XK_Up;$/;"	m	namespace:cimg_library_suffixed::cimg
keyB	.\CImg.h	/^    const unsigned int keyB          = 'B';$/;"	m	namespace:cimg_library_suffixed::cimg
keyB	.\CImg.h	/^    const unsigned int keyB          = 59U;  \/\/!< Keycode for the \\c B key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyB	.\CImg.h	/^    const unsigned int keyB          = XK_b;$/;"	m	namespace:cimg_library_suffixed::cimg
keyBACKSPACE	.\CImg.h	/^    const unsigned int keyBACKSPACE  = 25U;  \/\/!< Keycode for the \\c BACKSPACE key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyBACKSPACE	.\CImg.h	/^    const unsigned int keyBACKSPACE  = VK_BACK;$/;"	m	namespace:cimg_library_suffixed::cimg
keyBACKSPACE	.\CImg.h	/^    const unsigned int keyBACKSPACE  = XK_BackSpace;$/;"	m	namespace:cimg_library_suffixed::cimg
keyC	.\CImg.h	/^    const unsigned int keyC          = 'C';$/;"	m	namespace:cimg_library_suffixed::cimg
keyC	.\CImg.h	/^    const unsigned int keyC          = 57U;  \/\/!< Keycode for the \\c C key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyC	.\CImg.h	/^    const unsigned int keyC          = XK_c;$/;"	m	namespace:cimg_library_suffixed::cimg
keyCAPSLOCK	.\CImg.h	/^    const unsigned int keyCAPSLOCK   = 43U;  \/\/!< Keycode for the \\c CAPSLOCK key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyCAPSLOCK	.\CImg.h	/^    const unsigned int keyCAPSLOCK   = VK_CAPITAL;$/;"	m	namespace:cimg_library_suffixed::cimg
keyCAPSLOCK	.\CImg.h	/^    const unsigned int keyCAPSLOCK   = XK_Caps_Lock;$/;"	m	namespace:cimg_library_suffixed::cimg
keyCTRLLEFT	.\CImg.h	/^    const unsigned int keyCTRLLEFT   = 64U;  \/\/!< Keycode for the \\c CTRLLEFT key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyCTRLLEFT	.\CImg.h	/^    const unsigned int keyCTRLLEFT   = VK_CONTROL;$/;"	m	namespace:cimg_library_suffixed::cimg
keyCTRLLEFT	.\CImg.h	/^    const unsigned int keyCTRLLEFT   = XK_Control_L;$/;"	m	namespace:cimg_library_suffixed::cimg
keyCTRLRIGHT	.\CImg.h	/^    const unsigned int keyCTRLRIGHT  = 71U;  \/\/!< Keycode for the \\c CTRLRIGHT key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyCTRLRIGHT	.\CImg.h	/^    const unsigned int keyCTRLRIGHT  = VK_CONTROL;$/;"	m	namespace:cimg_library_suffixed::cimg
keyCTRLRIGHT	.\CImg.h	/^    const unsigned int keyCTRLRIGHT  = XK_Control_R;$/;"	m	namespace:cimg_library_suffixed::cimg
keyD	.\CImg.h	/^    const unsigned int keyD          = 'D';$/;"	m	namespace:cimg_library_suffixed::cimg
keyD	.\CImg.h	/^    const unsigned int keyD          = 46U;  \/\/!< Keycode for the \\c D key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyD	.\CImg.h	/^    const unsigned int keyD          = XK_d;$/;"	m	namespace:cimg_library_suffixed::cimg
keyDELETE	.\CImg.h	/^    const unsigned int keyDELETE     = 40U;  \/\/!< Keycode for the \\c DELETE key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyDELETE	.\CImg.h	/^    const unsigned int keyDELETE     = VK_DELETE;$/;"	m	namespace:cimg_library_suffixed::cimg
keyDELETE	.\CImg.h	/^    const unsigned int keyDELETE     = XK_Delete;$/;"	m	namespace:cimg_library_suffixed::cimg
keyE	.\CImg.h	/^    const unsigned int keyE          = 'E';$/;"	m	namespace:cimg_library_suffixed::cimg
keyE	.\CImg.h	/^    const unsigned int keyE          = 32U;  \/\/!< Keycode for the \\c E key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyE	.\CImg.h	/^    const unsigned int keyE          = XK_e;$/;"	m	namespace:cimg_library_suffixed::cimg
keyEND	.\CImg.h	/^    const unsigned int keyEND        = 41U;  \/\/!< Keycode for the \\c END key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyEND	.\CImg.h	/^    const unsigned int keyEND        = VK_END;$/;"	m	namespace:cimg_library_suffixed::cimg
keyEND	.\CImg.h	/^    const unsigned int keyEND        = XK_End;$/;"	m	namespace:cimg_library_suffixed::cimg
keyENTER	.\CImg.h	/^    const unsigned int keyENTER      = 53U;  \/\/!< Keycode for the \\c ENTER key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyENTER	.\CImg.h	/^    const unsigned int keyENTER      = VK_RETURN;$/;"	m	namespace:cimg_library_suffixed::cimg
keyENTER	.\CImg.h	/^    const unsigned int keyENTER      = XK_Return;$/;"	m	namespace:cimg_library_suffixed::cimg
keyESC	.\CImg.h	/^    const unsigned int keyESC        = 1U;   \/\/!< Keycode for the \\c ESC key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyESC	.\CImg.h	/^    const unsigned int keyESC        = VK_ESCAPE;$/;"	m	namespace:cimg_library_suffixed::cimg
keyESC	.\CImg.h	/^    const unsigned int keyESC        = XK_Escape;$/;"	m	namespace:cimg_library_suffixed::cimg
keyF	.\CImg.h	/^    const unsigned int keyF          = 'F';$/;"	m	namespace:cimg_library_suffixed::cimg
keyF	.\CImg.h	/^    const unsigned int keyF          = 47U;  \/\/!< Keycode for the \\c F key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyF	.\CImg.h	/^    const unsigned int keyF          = XK_f;$/;"	m	namespace:cimg_library_suffixed::cimg
keyF1	.\CImg.h	/^    const unsigned int keyF1         = 2U;   \/\/!< Keycode for the \\c F1 key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyF1	.\CImg.h	/^    const unsigned int keyF1         = VK_F1;$/;"	m	namespace:cimg_library_suffixed::cimg
keyF1	.\CImg.h	/^    const unsigned int keyF1         = XK_F1;$/;"	m	namespace:cimg_library_suffixed::cimg
keyF10	.\CImg.h	/^    const unsigned int keyF10        = 11U;  \/\/!< Keycode for the \\c F10 key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyF10	.\CImg.h	/^    const unsigned int keyF10        = VK_F10;$/;"	m	namespace:cimg_library_suffixed::cimg
keyF10	.\CImg.h	/^    const unsigned int keyF10        = XK_F10;$/;"	m	namespace:cimg_library_suffixed::cimg
keyF11	.\CImg.h	/^    const unsigned int keyF11        = 12U;  \/\/!< Keycode for the \\c F11 key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyF11	.\CImg.h	/^    const unsigned int keyF11        = VK_F11;$/;"	m	namespace:cimg_library_suffixed::cimg
keyF11	.\CImg.h	/^    const unsigned int keyF11        = XK_F11;$/;"	m	namespace:cimg_library_suffixed::cimg
keyF12	.\CImg.h	/^    const unsigned int keyF12        = 13U;  \/\/!< Keycode for the \\c F12 key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyF12	.\CImg.h	/^    const unsigned int keyF12        = VK_F12;$/;"	m	namespace:cimg_library_suffixed::cimg
keyF12	.\CImg.h	/^    const unsigned int keyF12        = XK_F12;$/;"	m	namespace:cimg_library_suffixed::cimg
keyF2	.\CImg.h	/^    const unsigned int keyF2         = 3U;   \/\/!< Keycode for the \\c F2 key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyF2	.\CImg.h	/^    const unsigned int keyF2         = VK_F2;$/;"	m	namespace:cimg_library_suffixed::cimg
keyF2	.\CImg.h	/^    const unsigned int keyF2         = XK_F2;$/;"	m	namespace:cimg_library_suffixed::cimg
keyF3	.\CImg.h	/^    const unsigned int keyF3         = 4U;   \/\/!< Keycode for the \\c F3 key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyF3	.\CImg.h	/^    const unsigned int keyF3         = VK_F3;$/;"	m	namespace:cimg_library_suffixed::cimg
keyF3	.\CImg.h	/^    const unsigned int keyF3         = XK_F3;$/;"	m	namespace:cimg_library_suffixed::cimg
keyF4	.\CImg.h	/^    const unsigned int keyF4         = 5U;   \/\/!< Keycode for the \\c F4 key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyF4	.\CImg.h	/^    const unsigned int keyF4         = VK_F4;$/;"	m	namespace:cimg_library_suffixed::cimg
keyF4	.\CImg.h	/^    const unsigned int keyF4         = XK_F4;$/;"	m	namespace:cimg_library_suffixed::cimg
keyF5	.\CImg.h	/^    const unsigned int keyF5         = 6U;   \/\/!< Keycode for the \\c F5 key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyF5	.\CImg.h	/^    const unsigned int keyF5         = VK_F5;$/;"	m	namespace:cimg_library_suffixed::cimg
keyF5	.\CImg.h	/^    const unsigned int keyF5         = XK_F5;$/;"	m	namespace:cimg_library_suffixed::cimg
keyF6	.\CImg.h	/^    const unsigned int keyF6         = 7U;   \/\/!< Keycode for the \\c F6 key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyF6	.\CImg.h	/^    const unsigned int keyF6         = VK_F6;$/;"	m	namespace:cimg_library_suffixed::cimg
keyF6	.\CImg.h	/^    const unsigned int keyF6         = XK_F6;$/;"	m	namespace:cimg_library_suffixed::cimg
keyF7	.\CImg.h	/^    const unsigned int keyF7         = 8U;   \/\/!< Keycode for the \\c F7 key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyF7	.\CImg.h	/^    const unsigned int keyF7         = VK_F7;$/;"	m	namespace:cimg_library_suffixed::cimg
keyF7	.\CImg.h	/^    const unsigned int keyF7         = XK_F7;$/;"	m	namespace:cimg_library_suffixed::cimg
keyF8	.\CImg.h	/^    const unsigned int keyF8         = 9U;   \/\/!< Keycode for the \\c F8 key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyF8	.\CImg.h	/^    const unsigned int keyF8         = VK_F8;$/;"	m	namespace:cimg_library_suffixed::cimg
keyF8	.\CImg.h	/^    const unsigned int keyF8         = XK_F8;$/;"	m	namespace:cimg_library_suffixed::cimg
keyF9	.\CImg.h	/^    const unsigned int keyF9         = 10U;  \/\/!< Keycode for the \\c F9 key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyF9	.\CImg.h	/^    const unsigned int keyF9         = VK_F9;$/;"	m	namespace:cimg_library_suffixed::cimg
keyF9	.\CImg.h	/^    const unsigned int keyF9         = XK_F9;$/;"	m	namespace:cimg_library_suffixed::cimg
keyG	.\CImg.h	/^    const unsigned int keyG          = 'G';$/;"	m	namespace:cimg_library_suffixed::cimg
keyG	.\CImg.h	/^    const unsigned int keyG          = 48U;  \/\/!< Keycode for the \\c G key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyG	.\CImg.h	/^    const unsigned int keyG          = XK_g;$/;"	m	namespace:cimg_library_suffixed::cimg
keyH	.\CImg.h	/^    const unsigned int keyH          = 'H';$/;"	m	namespace:cimg_library_suffixed::cimg
keyH	.\CImg.h	/^    const unsigned int keyH          = 49U;  \/\/!< Keycode for the \\c H key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyH	.\CImg.h	/^    const unsigned int keyH          = XK_h;$/;"	m	namespace:cimg_library_suffixed::cimg
keyHOME	.\CImg.h	/^    const unsigned int keyHOME       = 27U;  \/\/!< Keycode for the \\c HOME key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyHOME	.\CImg.h	/^    const unsigned int keyHOME       = VK_HOME;$/;"	m	namespace:cimg_library_suffixed::cimg
keyHOME	.\CImg.h	/^    const unsigned int keyHOME       = XK_Home;$/;"	m	namespace:cimg_library_suffixed::cimg
keyI	.\CImg.h	/^    const unsigned int keyI          = 'I';$/;"	m	namespace:cimg_library_suffixed::cimg
keyI	.\CImg.h	/^    const unsigned int keyI          = 37U;  \/\/!< Keycode for the \\c I key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyI	.\CImg.h	/^    const unsigned int keyI          = XK_i;$/;"	m	namespace:cimg_library_suffixed::cimg
keyINSERT	.\CImg.h	/^    const unsigned int keyINSERT     = 26U;  \/\/!< Keycode for the \\c INSERT key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyINSERT	.\CImg.h	/^    const unsigned int keyINSERT     = VK_INSERT;$/;"	m	namespace:cimg_library_suffixed::cimg
keyINSERT	.\CImg.h	/^    const unsigned int keyINSERT     = XK_Insert;$/;"	m	namespace:cimg_library_suffixed::cimg
keyJ	.\CImg.h	/^    const unsigned int keyJ          = 'J';$/;"	m	namespace:cimg_library_suffixed::cimg
keyJ	.\CImg.h	/^    const unsigned int keyJ          = 50U;  \/\/!< Keycode for the \\c J key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyJ	.\CImg.h	/^    const unsigned int keyJ          = XK_j;$/;"	m	namespace:cimg_library_suffixed::cimg
keyK	.\CImg.h	/^    const unsigned int keyK          = 'K';$/;"	m	namespace:cimg_library_suffixed::cimg
keyK	.\CImg.h	/^    const unsigned int keyK          = 51U;  \/\/!< Keycode for the \\c K key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyK	.\CImg.h	/^    const unsigned int keyK          = XK_k;$/;"	m	namespace:cimg_library_suffixed::cimg
keyL	.\CImg.h	/^    const unsigned int keyL          = 'L';$/;"	m	namespace:cimg_library_suffixed::cimg
keyL	.\CImg.h	/^    const unsigned int keyL          = 52U;  \/\/!< Keycode for the \\c L key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyL	.\CImg.h	/^    const unsigned int keyL          = XK_l;$/;"	m	namespace:cimg_library_suffixed::cimg
keyM	.\CImg.h	/^    const unsigned int keyM          = 'M';$/;"	m	namespace:cimg_library_suffixed::cimg
keyM	.\CImg.h	/^    const unsigned int keyM          = 61U;  \/\/!< Keycode for the \\c M key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyM	.\CImg.h	/^    const unsigned int keyM          = XK_m;$/;"	m	namespace:cimg_library_suffixed::cimg
keyMENU	.\CImg.h	/^    const unsigned int keyMENU       = 70U;  \/\/!< Keycode for the \\c MENU key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyMENU	.\CImg.h	/^    const unsigned int keyMENU       = VK_APPS;$/;"	m	namespace:cimg_library_suffixed::cimg
keyMENU	.\CImg.h	/^    const unsigned int keyMENU       = XK_Menu;$/;"	m	namespace:cimg_library_suffixed::cimg
keyN	.\CImg.h	/^    const unsigned int keyN          = 'N';$/;"	m	namespace:cimg_library_suffixed::cimg
keyN	.\CImg.h	/^    const unsigned int keyN          = 60U;  \/\/!< Keycode for the \\c N key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyN	.\CImg.h	/^    const unsigned int keyN          = XK_n;$/;"	m	namespace:cimg_library_suffixed::cimg
keyO	.\CImg.h	/^    const unsigned int keyO          = 'O';$/;"	m	namespace:cimg_library_suffixed::cimg
keyO	.\CImg.h	/^    const unsigned int keyO          = 38U;  \/\/!< Keycode for the \\c O key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyO	.\CImg.h	/^    const unsigned int keyO          = XK_o;$/;"	m	namespace:cimg_library_suffixed::cimg
keyP	.\CImg.h	/^    const unsigned int keyP          = 'P';$/;"	m	namespace:cimg_library_suffixed::cimg
keyP	.\CImg.h	/^    const unsigned int keyP          = 39U;  \/\/!< Keycode for the \\c P key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyP	.\CImg.h	/^    const unsigned int keyP          = XK_p;$/;"	m	namespace:cimg_library_suffixed::cimg
keyPAD0	.\CImg.h	/^    const unsigned int keyPAD0       = 0x60;$/;"	m	namespace:cimg_library_suffixed::cimg
keyPAD0	.\CImg.h	/^    const unsigned int keyPAD0       = 75U;  \/\/!< Keycode for the \\c PAD0 key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyPAD0	.\CImg.h	/^    const unsigned int keyPAD0       = XK_KP_0;$/;"	m	namespace:cimg_library_suffixed::cimg
keyPAD1	.\CImg.h	/^    const unsigned int keyPAD1       = 0x61;$/;"	m	namespace:cimg_library_suffixed::cimg
keyPAD1	.\CImg.h	/^    const unsigned int keyPAD1       = 76U;  \/\/!< Keycode for the \\c PAD1 key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyPAD1	.\CImg.h	/^    const unsigned int keyPAD1       = XK_KP_1;$/;"	m	namespace:cimg_library_suffixed::cimg
keyPAD2	.\CImg.h	/^    const unsigned int keyPAD2       = 0x62;$/;"	m	namespace:cimg_library_suffixed::cimg
keyPAD2	.\CImg.h	/^    const unsigned int keyPAD2       = 77U;  \/\/!< Keycode for the \\c PAD2 key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyPAD2	.\CImg.h	/^    const unsigned int keyPAD2       = XK_KP_2;$/;"	m	namespace:cimg_library_suffixed::cimg
keyPAD3	.\CImg.h	/^    const unsigned int keyPAD3       = 0x63;$/;"	m	namespace:cimg_library_suffixed::cimg
keyPAD3	.\CImg.h	/^    const unsigned int keyPAD3       = 78U;  \/\/!< Keycode for the \\c PAD3 key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyPAD3	.\CImg.h	/^    const unsigned int keyPAD3       = XK_KP_3;$/;"	m	namespace:cimg_library_suffixed::cimg
keyPAD4	.\CImg.h	/^    const unsigned int keyPAD4       = 0x64;$/;"	m	namespace:cimg_library_suffixed::cimg
keyPAD4	.\CImg.h	/^    const unsigned int keyPAD4       = 79U;  \/\/!< Keycode for the \\c PAD4 key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyPAD4	.\CImg.h	/^    const unsigned int keyPAD4       = XK_KP_4;$/;"	m	namespace:cimg_library_suffixed::cimg
keyPAD5	.\CImg.h	/^    const unsigned int keyPAD5       = 0x65;$/;"	m	namespace:cimg_library_suffixed::cimg
keyPAD5	.\CImg.h	/^    const unsigned int keyPAD5       = 80U;  \/\/!< Keycode for the \\c PAD5 key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyPAD5	.\CImg.h	/^    const unsigned int keyPAD5       = XK_KP_5;$/;"	m	namespace:cimg_library_suffixed::cimg
keyPAD6	.\CImg.h	/^    const unsigned int keyPAD6       = 0x66;$/;"	m	namespace:cimg_library_suffixed::cimg
keyPAD6	.\CImg.h	/^    const unsigned int keyPAD6       = 81U;  \/\/!< Keycode for the \\c PAD6 key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyPAD6	.\CImg.h	/^    const unsigned int keyPAD6       = XK_KP_6;$/;"	m	namespace:cimg_library_suffixed::cimg
keyPAD7	.\CImg.h	/^    const unsigned int keyPAD7       = 0x67;$/;"	m	namespace:cimg_library_suffixed::cimg
keyPAD7	.\CImg.h	/^    const unsigned int keyPAD7       = 82U;  \/\/!< Keycode for the \\c PAD7 key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyPAD7	.\CImg.h	/^    const unsigned int keyPAD7       = XK_KP_7;$/;"	m	namespace:cimg_library_suffixed::cimg
keyPAD8	.\CImg.h	/^    const unsigned int keyPAD8       = 0x68;$/;"	m	namespace:cimg_library_suffixed::cimg
keyPAD8	.\CImg.h	/^    const unsigned int keyPAD8       = 83U;  \/\/!< Keycode for the \\c PAD8 key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyPAD8	.\CImg.h	/^    const unsigned int keyPAD8       = XK_KP_8;$/;"	m	namespace:cimg_library_suffixed::cimg
keyPAD9	.\CImg.h	/^    const unsigned int keyPAD9       = 0x69;$/;"	m	namespace:cimg_library_suffixed::cimg
keyPAD9	.\CImg.h	/^    const unsigned int keyPAD9       = 84U;  \/\/!< Keycode for the \\c PAD9 key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyPAD9	.\CImg.h	/^    const unsigned int keyPAD9       = XK_KP_9;$/;"	m	namespace:cimg_library_suffixed::cimg
keyPADADD	.\CImg.h	/^    const unsigned int keyPADADD     = 85U;  \/\/!< Keycode for the \\c PADADD key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyPADADD	.\CImg.h	/^    const unsigned int keyPADADD     = VK_ADD;$/;"	m	namespace:cimg_library_suffixed::cimg
keyPADADD	.\CImg.h	/^    const unsigned int keyPADADD     = XK_KP_Add;$/;"	m	namespace:cimg_library_suffixed::cimg
keyPADDIV	.\CImg.h	/^    const unsigned int keyPADDIV     = 88U;  \/\/!< Keycode for the \\c PADDDIV key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyPADDIV	.\CImg.h	/^    const unsigned int keyPADDIV     = VK_DIVIDE;$/;"	m	namespace:cimg_library_suffixed::cimg
keyPADDIV	.\CImg.h	/^    const unsigned int keyPADDIV     = XK_KP_Divide;$/;"	m	namespace:cimg_library_suffixed::cimg
keyPADMUL	.\CImg.h	/^    const unsigned int keyPADMUL     = 87U;  \/\/!< Keycode for the \\c PADMUL key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyPADMUL	.\CImg.h	/^    const unsigned int keyPADMUL     = VK_MULTIPLY;$/;"	m	namespace:cimg_library_suffixed::cimg
keyPADMUL	.\CImg.h	/^    const unsigned int keyPADMUL     = XK_KP_Multiply;$/;"	m	namespace:cimg_library_suffixed::cimg
keyPADSUB	.\CImg.h	/^    const unsigned int keyPADSUB     = 86U;  \/\/!< Keycode for the \\c PADSUB key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyPADSUB	.\CImg.h	/^    const unsigned int keyPADSUB     = VK_SUBTRACT;$/;"	m	namespace:cimg_library_suffixed::cimg
keyPADSUB	.\CImg.h	/^    const unsigned int keyPADSUB     = XK_KP_Subtract;$/;"	m	namespace:cimg_library_suffixed::cimg
keyPAGEDOWN	.\CImg.h	/^    const unsigned int keyPAGEDOWN   = 42U;  \/\/!< Keycode for the \\c PAGEDOWN key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyPAGEDOWN	.\CImg.h	/^    const unsigned int keyPAGEDOWN   = VK_NEXT;$/;"	m	namespace:cimg_library_suffixed::cimg
keyPAGEDOWN	.\CImg.h	/^    const unsigned int keyPAGEDOWN   = XK_Page_Down;$/;"	m	namespace:cimg_library_suffixed::cimg
keyPAGEUP	.\CImg.h	/^    const unsigned int keyPAGEUP     = 28U;  \/\/!< Keycode for the \\c PAGEUP key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyPAGEUP	.\CImg.h	/^    const unsigned int keyPAGEUP     = VK_PRIOR;$/;"	m	namespace:cimg_library_suffixed::cimg
keyPAGEUP	.\CImg.h	/^    const unsigned int keyPAGEUP     = XK_Page_Up;$/;"	m	namespace:cimg_library_suffixed::cimg
keyPAUSE	.\CImg.h	/^    const unsigned int keyPAUSE      = 14U;  \/\/!< Keycode for the \\c PAUSE key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyPAUSE	.\CImg.h	/^    const unsigned int keyPAUSE      = VK_PAUSE;$/;"	m	namespace:cimg_library_suffixed::cimg
keyPAUSE	.\CImg.h	/^    const unsigned int keyPAUSE      = XK_Pause;$/;"	m	namespace:cimg_library_suffixed::cimg
keyQ	.\CImg.h	/^    const unsigned int keyQ          = 'Q';$/;"	m	namespace:cimg_library_suffixed::cimg
keyQ	.\CImg.h	/^    const unsigned int keyQ          = 30U;  \/\/!< Keycode for the \\c Q key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyQ	.\CImg.h	/^    const unsigned int keyQ          = XK_q;$/;"	m	namespace:cimg_library_suffixed::cimg
keyR	.\CImg.h	/^    const unsigned int keyR          = 'R';$/;"	m	namespace:cimg_library_suffixed::cimg
keyR	.\CImg.h	/^    const unsigned int keyR          = 33U;  \/\/!< Keycode for the \\c R key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyR	.\CImg.h	/^    const unsigned int keyR          = XK_r;$/;"	m	namespace:cimg_library_suffixed::cimg
keyS	.\CImg.h	/^    const unsigned int keyS          = 'S';$/;"	m	namespace:cimg_library_suffixed::cimg
keyS	.\CImg.h	/^    const unsigned int keyS          = 45U;  \/\/!< Keycode for the \\c S key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyS	.\CImg.h	/^    const unsigned int keyS          = XK_s;$/;"	m	namespace:cimg_library_suffixed::cimg
keySHIFTLEFT	.\CImg.h	/^    const unsigned int keySHIFTLEFT  = 54U;  \/\/!< Keycode for the \\c SHIFTLEFT key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keySHIFTLEFT	.\CImg.h	/^    const unsigned int keySHIFTLEFT  = VK_SHIFT;$/;"	m	namespace:cimg_library_suffixed::cimg
keySHIFTLEFT	.\CImg.h	/^    const unsigned int keySHIFTLEFT  = XK_Shift_L;$/;"	m	namespace:cimg_library_suffixed::cimg
keySHIFTRIGHT	.\CImg.h	/^    const unsigned int keySHIFTRIGHT = 62U;  \/\/!< Keycode for the \\c SHIFTRIGHT key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keySHIFTRIGHT	.\CImg.h	/^    const unsigned int keySHIFTRIGHT = VK_SHIFT;$/;"	m	namespace:cimg_library_suffixed::cimg
keySHIFTRIGHT	.\CImg.h	/^    const unsigned int keySHIFTRIGHT = XK_Shift_R;$/;"	m	namespace:cimg_library_suffixed::cimg
keySPACE	.\CImg.h	/^    const unsigned int keySPACE      = 67U;  \/\/!< Keycode for the \\c SPACE key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keySPACE	.\CImg.h	/^    const unsigned int keySPACE      = VK_SPACE;$/;"	m	namespace:cimg_library_suffixed::cimg
keySPACE	.\CImg.h	/^    const unsigned int keySPACE      = XK_space;$/;"	m	namespace:cimg_library_suffixed::cimg
keyT	.\CImg.h	/^    const unsigned int keyT          = 'T';$/;"	m	namespace:cimg_library_suffixed::cimg
keyT	.\CImg.h	/^    const unsigned int keyT          = 34U;  \/\/!< Keycode for the \\c T key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyT	.\CImg.h	/^    const unsigned int keyT          = XK_t;$/;"	m	namespace:cimg_library_suffixed::cimg
keyTAB	.\CImg.h	/^    const unsigned int keyTAB        = 29U;  \/\/!< Keycode for the \\c TAB key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyTAB	.\CImg.h	/^    const unsigned int keyTAB        = VK_TAB;$/;"	m	namespace:cimg_library_suffixed::cimg
keyTAB	.\CImg.h	/^    const unsigned int keyTAB        = XK_Tab;$/;"	m	namespace:cimg_library_suffixed::cimg
keyU	.\CImg.h	/^    const unsigned int keyU          = 'U';$/;"	m	namespace:cimg_library_suffixed::cimg
keyU	.\CImg.h	/^    const unsigned int keyU          = 36U;  \/\/!< Keycode for the \\c U key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyU	.\CImg.h	/^    const unsigned int keyU          = XK_u;$/;"	m	namespace:cimg_library_suffixed::cimg
keyV	.\CImg.h	/^    const unsigned int keyV          = 'V';$/;"	m	namespace:cimg_library_suffixed::cimg
keyV	.\CImg.h	/^    const unsigned int keyV          = 58U;  \/\/!< Keycode for the \\c V key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyV	.\CImg.h	/^    const unsigned int keyV          = XK_v;$/;"	m	namespace:cimg_library_suffixed::cimg
keyW	.\CImg.h	/^    const unsigned int keyW          = 'W';$/;"	m	namespace:cimg_library_suffixed::cimg
keyW	.\CImg.h	/^    const unsigned int keyW          = 31U;  \/\/!< Keycode for the \\c W key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyW	.\CImg.h	/^    const unsigned int keyW          = XK_w;$/;"	m	namespace:cimg_library_suffixed::cimg
keyX	.\CImg.h	/^    const unsigned int keyX          = 'X';$/;"	m	namespace:cimg_library_suffixed::cimg
keyX	.\CImg.h	/^    const unsigned int keyX          = 56U;  \/\/!< Keycode for the \\c X key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyX	.\CImg.h	/^    const unsigned int keyX          = XK_x;$/;"	m	namespace:cimg_library_suffixed::cimg
keyY	.\CImg.h	/^    const unsigned int keyY          = 'Y';$/;"	m	namespace:cimg_library_suffixed::cimg
keyY	.\CImg.h	/^    const unsigned int keyY          = 35U;  \/\/!< Keycode for the \\c Y key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyY	.\CImg.h	/^    const unsigned int keyY          = XK_y;$/;"	m	namespace:cimg_library_suffixed::cimg
keyZ	.\CImg.h	/^    const unsigned int keyZ          = 'Z';$/;"	m	namespace:cimg_library_suffixed::cimg
keyZ	.\CImg.h	/^    const unsigned int keyZ          = 55U;  \/\/!< Keycode for the \\c Z key (architecture-dependent).$/;"	m	namespace:cimg_library_suffixed::cimg
keyZ	.\CImg.h	/^    const unsigned int keyZ          = XK_z;$/;"	m	namespace:cimg_library_suffixed::cimg
keycode	.\CImg.h	/^    static unsigned int keycode(const char *const keycode) {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
kth_smallest	.\CImg.h	/^    T kth_smallest(const unsigned int k) const {$/;"	f	struct:cimg_library_suffixed::CImg
label	.\CImg.h	/^    CImg<T>& label(const CImg<t>& connectivity_mask, const Tfloat tolerance=0) {$/;"	f	struct:cimg_library_suffixed::CImg
label	.\CImg.h	/^    CImg<T>& label(const bool is_high_connectivity=false, const Tfloat tolerance=0) {$/;"	f	struct:cimg_library_suffixed::CImg
labelM	.\CImg.h	/^      CImgList<charT> labelM;$/;"	m	struct:cimg_library_suffixed::CImg::_cimg_math_parser
labelMpos	.\CImg.h	/^      CImg<uintT> level, labelMpos, reserved_label;$/;"	m	struct:cimg_library_suffixed::CImg::_cimg_math_parser
laplacian	.\CImg.h	/^    CImg<T>& laplacian() {$/;"	f	struct:cimg_library_suffixed::CImg
last	.\CImg.h	/^    template<typename t1, typename t2> struct last { typedef t2 type; };$/;"	s	namespace:cimg_library_suffixed::cimg
level	.\CImg.h	/^      CImg<uintT> level, labelMpos, reserved_label;$/;"	m	struct:cimg_library_suffixed::CImg::_cimg_math_parser
linear_atX	.\CImg.h	/^    Tfloat linear_atX(const float fx, const int y, const int z, const int c, const T& out_value) const {$/;"	f	struct:cimg_library_suffixed::CImg
linear_atX	.\CImg.h	/^    Tfloat linear_atX(const float fx, const int y=0, const int z=0, const int c=0) const {$/;"	f	struct:cimg_library_suffixed::CImg
linear_atXY	.\CImg.h	/^    Tfloat linear_atXY(const float fx, const float fy, const int z, const int c, const T& out_value) const {$/;"	f	struct:cimg_library_suffixed::CImg
linear_atXY	.\CImg.h	/^    Tfloat linear_atXY(const float fx, const float fy, const int z=0, const int c=0) const {$/;"	f	struct:cimg_library_suffixed::CImg
linear_atXYZ	.\CImg.h	/^    Tfloat linear_atXYZ(const float fx, const float fy, const float fz, const int c, const T& out_value) const {$/;"	f	struct:cimg_library_suffixed::CImg
linear_atXYZ	.\CImg.h	/^    Tfloat linear_atXYZ(const float fx, const float fy=0, const float fz=0, const int c=0) const {$/;"	f	struct:cimg_library_suffixed::CImg
linear_atXYZC	.\CImg.h	/^    Tfloat linear_atXYZC(const float fx, const float fy, const float fz, const float fc, const T& out_value) const {$/;"	f	struct:cimg_library_suffixed::CImg
linear_atXYZC	.\CImg.h	/^    Tfloat linear_atXYZC(const float fx, const float fy=0, const float fz=0, const float fc=0) const {$/;"	f	struct:cimg_library_suffixed::CImg
lines_LUT256	.\CImg.h	/^    static const CImg<Tuchar>& lines_LUT256() {$/;"	f	struct:cimg_library_suffixed::CImg
list_median	.\CImg.h	/^      CImgList<doubleT> _list_stats, &list_stats, _list_median, &list_median;$/;"	m	struct:cimg_library_suffixed::CImg::_cimg_math_parser
list_stats	.\CImg.h	/^      CImgList<doubleT> _list_stats, &list_stats, _list_median, &list_median;$/;"	m	struct:cimg_library_suffixed::CImg::_cimg_math_parser
listin	.\CImg.h	/^      const CImgList<T>& listin;$/;"	m	struct:cimg_library_suffixed::CImg::_cimg_math_parser
listout	.\CImg.h	/^      CImgList<T>& listout;$/;"	m	struct:cimg_library_suffixed::CImg::_cimg_math_parser
load	.\CImg.h	/^    CImg<T>& load(const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImg
load	.\CImg.h	/^    CImgList<T>& load(const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImgList
load_analyze	.\CImg.h	/^    CImg<T>& load_analyze(const char *const filename, float *const voxel_size=0) {$/;"	f	struct:cimg_library_suffixed::CImg
load_analyze	.\CImg.h	/^    CImg<T>& load_analyze(std::FILE *const file, float *const voxel_size=0) {$/;"	f	struct:cimg_library_suffixed::CImg
load_ascii	.\CImg.h	/^    CImg<T>& load_ascii(const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImg
load_ascii	.\CImg.h	/^    CImg<T>& load_ascii(std::FILE *const file) {$/;"	f	struct:cimg_library_suffixed::CImg
load_bmp	.\CImg.h	/^    CImg<T>& load_bmp(const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImg
load_bmp	.\CImg.h	/^    CImg<T>& load_bmp(std::FILE *const file) {$/;"	f	struct:cimg_library_suffixed::CImg
load_camera	.\CImg.h	/^    CImg<T>& load_camera(const unsigned int camera_index=0, const unsigned int skip_frames=0,$/;"	f	struct:cimg_library_suffixed::CImg
load_cimg	.\CImg.h	/^    CImg<T>& load_cimg(const char *const filename, const char axis='z', const float align=0) {$/;"	f	struct:cimg_library_suffixed::CImg
load_cimg	.\CImg.h	/^    CImg<T>& load_cimg(const char *const filename,$/;"	f	struct:cimg_library_suffixed::CImg
load_cimg	.\CImg.h	/^    CImg<T>& load_cimg(std::FILE *const file, const char axis='z', const float align=0) {$/;"	f	struct:cimg_library_suffixed::CImg
load_cimg	.\CImg.h	/^    CImg<T>& load_cimg(std::FILE *const file,$/;"	f	struct:cimg_library_suffixed::CImg
load_cimg	.\CImg.h	/^    CImgList<T>& load_cimg(const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImgList
load_cimg	.\CImg.h	/^    CImgList<T>& load_cimg(const char *const filename,$/;"	f	struct:cimg_library_suffixed::CImgList
load_cimg	.\CImg.h	/^    CImgList<T>& load_cimg(std::FILE *const file) {$/;"	f	struct:cimg_library_suffixed::CImgList
load_cimg	.\CImg.h	/^    CImgList<T>& load_cimg(std::FILE *const file,$/;"	f	struct:cimg_library_suffixed::CImgList
load_dcraw_external	.\CImg.h	/^    CImg<T>& load_dcraw_external(const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImg
load_dlm	.\CImg.h	/^    CImg<T>& load_dlm(const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImg
load_dlm	.\CImg.h	/^    CImg<T>& load_dlm(std::FILE *const file) {$/;"	f	struct:cimg_library_suffixed::CImg
load_exr	.\CImg.h	/^    CImg<T>& load_exr(const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImg
load_ffmpeg_external	.\CImg.h	/^    CImg<T>& load_ffmpeg_external(const char *const filename, const char axis='z', const float align=0) {$/;"	f	struct:cimg_library_suffixed::CImg
load_ffmpeg_external	.\CImg.h	/^    CImgList<T>& load_ffmpeg_external(const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImgList
load_gif_external	.\CImg.h	/^    CImg<T>& load_gif_external(const char *const filename,$/;"	f	struct:cimg_library_suffixed::CImg
load_gif_external	.\CImg.h	/^    CImgList<T>& load_gif_external(const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImgList
load_graphicsmagick_external	.\CImg.h	/^    CImg<T>& load_graphicsmagick_external(const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImg
load_gzip_external	.\CImg.h	/^    CImg<T>& load_gzip_external(const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImg
load_gzip_external	.\CImg.h	/^    CImgList<T>& load_gzip_external(const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImgList
load_imagemagick_external	.\CImg.h	/^    CImg<T>& load_imagemagick_external(const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImg
load_inr	.\CImg.h	/^    CImg<T>& load_inr(const char *const filename, float *const voxel_size=0) {$/;"	f	struct:cimg_library_suffixed::CImg
load_inr	.\CImg.h	/^    CImg<T>& load_inr(std::FILE *const file, float *const voxel_size=0) {$/;"	f	struct:cimg_library_suffixed::CImg
load_jpeg	.\CImg.h	/^    CImg<T>& load_jpeg(const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImg
load_jpeg	.\CImg.h	/^    CImg<T>& load_jpeg(std::FILE *const file) {$/;"	f	struct:cimg_library_suffixed::CImg
load_magick	.\CImg.h	/^    CImg<T>& load_magick(const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImg
load_medcon_external	.\CImg.h	/^    CImg<T>& load_medcon_external(const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImg
load_minc2	.\CImg.h	/^    CImg<T>& load_minc2(const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImg
load_network	.\CImg.h	/^  inline char *load_network(const char *const url, char *const filename_local,$/;"	f	namespace:cimg_library_suffixed::cimg
load_off	.\CImg.h	/^    CImg<T>& load_off(CImgList<tf>& primitives, CImgList<tc>& colors, const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImg
load_off	.\CImg.h	/^    CImg<T>& load_off(CImgList<tf>& primitives, CImgList<tc>& colors, std::FILE *const file) {$/;"	f	struct:cimg_library_suffixed::CImg
load_off	.\CImg.h	/^    CImgList<T>& load_off(const char *const filename,$/;"	f	struct:cimg_library_suffixed::CImgList
load_other	.\CImg.h	/^    CImg<T>& load_other(const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImg
load_pandore	.\CImg.h	/^    CImg<T>& load_pandore(const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImg
load_pandore	.\CImg.h	/^    CImg<T>& load_pandore(std::FILE *const file) {$/;"	f	struct:cimg_library_suffixed::CImg
load_parrec	.\CImg.h	/^    CImg<T>& load_parrec(const char *const filename, const char axis='c', const float align=0) {$/;"	f	struct:cimg_library_suffixed::CImg
load_parrec	.\CImg.h	/^    CImgList<T>& load_parrec(const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImgList
load_pfm	.\CImg.h	/^    CImg<T>& load_pfm(const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImg
load_pfm	.\CImg.h	/^    CImg<T>& load_pfm(std::FILE *const file) {$/;"	f	struct:cimg_library_suffixed::CImg
load_png	.\CImg.h	/^    CImg<T>& load_png(const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImg
load_png	.\CImg.h	/^    CImg<T>& load_png(std::FILE *const file) {$/;"	f	struct:cimg_library_suffixed::CImg
load_pnm	.\CImg.h	/^    CImg<T>& load_pnm(const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImg
load_pnm	.\CImg.h	/^    CImg<T>& load_pnm(std::FILE *const file) {$/;"	f	struct:cimg_library_suffixed::CImg
load_raw	.\CImg.h	/^    CImg<T>& load_raw(const char *const filename,$/;"	f	struct:cimg_library_suffixed::CImg
load_raw	.\CImg.h	/^    CImg<T>& load_raw(std::FILE *const file,$/;"	f	struct:cimg_library_suffixed::CImg
load_rgb	.\CImg.h	/^    CImg<T>& load_rgb(const char *const filename, const unsigned int dimw, const unsigned int dimh=1) {$/;"	f	struct:cimg_library_suffixed::CImg
load_rgb	.\CImg.h	/^    CImg<T>& load_rgb(std::FILE *const file, const unsigned int dimw, const unsigned int dimh=1) {$/;"	f	struct:cimg_library_suffixed::CImg
load_rgba	.\CImg.h	/^    CImg<T>& load_rgba(const char *const filename, const unsigned int dimw, const unsigned int dimh=1) {$/;"	f	struct:cimg_library_suffixed::CImg
load_rgba	.\CImg.h	/^    CImg<T>& load_rgba(std::FILE *const file, const unsigned int dimw, const unsigned int dimh=1) {$/;"	f	struct:cimg_library_suffixed::CImg
load_tiff	.\CImg.h	/^    CImg<T>& load_tiff(const char *const filename,$/;"	f	struct:cimg_library_suffixed::CImg
load_tiff	.\CImg.h	/^    CImgList<T>& load_tiff(const char *const filename,$/;"	f	struct:cimg_library_suffixed::CImgList
load_video	.\CImg.h	/^    CImg<T>& load_video(const char *const filename,$/;"	f	struct:cimg_library_suffixed::CImg
load_video	.\CImg.h	/^    CImgList<T>& load_video(const char *const filename,$/;"	f	struct:cimg_library_suffixed::CImgList
load_yuv	.\CImg.h	/^    CImg<T>& load_yuv(const char *const filename,$/;"	f	struct:cimg_library_suffixed::CImg
load_yuv	.\CImg.h	/^    CImg<T>& load_yuv(std::FILE *const file,$/;"	f	struct:cimg_library_suffixed::CImg
load_yuv	.\CImg.h	/^    CImgList<T>& load_yuv(const char *const filename,$/;"	f	struct:cimg_library_suffixed::CImgList
load_yuv	.\CImg.h	/^    CImgList<T>& load_yuv(std::FILE *const file,$/;"	f	struct:cimg_library_suffixed::CImgList
lock	.\CImg.h	/^      void lock(const unsigned int n) { WaitForSingleObject(mutex[n],INFINITE); }$/;"	f	struct:cimg_library_suffixed::cimg::Mutex_info
log	.\CImg.h	/^    CImg<T>& log() {$/;"	f	struct:cimg_library_suffixed::CImg
log	.\CImg.h	/^  inline CImg<_cimg_Tfloat> log(const CImg<T>& instance) {$/;"	f	namespace:cimg_library_suffixed
log10	.\CImg.h	/^    CImg<T>& log10() {$/;"	f	struct:cimg_library_suffixed::CImg
log10	.\CImg.h	/^  inline CImg<_cimg_Tfloat> log10(const CImg<T>& instance) {$/;"	f	namespace:cimg_library_suffixed
log2	.\CImg.h	/^    CImg<T>& log2() {$/;"	f	struct:cimg_library_suffixed::CImg
log2	.\CImg.h	/^    inline double log2(const double x) {$/;"	f	namespace:cimg_library_suffixed::cimg
log2	.\CImg.h	/^  inline CImg<_cimg_Tfloat> log2(const CImg<T>& instance) {$/;"	f	namespace:cimg_library_suffixed
logo40x38	.\CImg.h	/^    static const unsigned char logo40x38[4576] = {$/;"	m	namespace:cimg_library_suffixed::cimg
longT	.\CImg.h	/^    typedef typename cimg::last<T,long>::type longT;$/;"	t	struct:cimg_library_suffixed::CImg
longT	.\CImg.h	/^    typedef typename cimg::last<T,long>::type longT;$/;"	t	struct:cimg_library_suffixed::CImgList
magnitude	.\CImg.h	/^    double magnitude(const int magnitude_type=2) const {$/;"	f	struct:cimg_library_suffixed::CImg
main	.\blocks.cpp	/^int main(int argc, char const **argv) {$/;"	f
main	.\hue.cpp	/^int main(int argc, char const **argv) {$/;"	f
main	.\vision.cpp	/^int main(int argc, char const **argv) {$/;"	f
map	.\CImg.h	/^    CImg<T>& map(const CImg<t>& colormap, const unsigned int boundary_conditions=0) {$/;"	f	struct:cimg_library_suffixed::CImg
matrix	.\CImg.h	/^    CImg<T>& matrix() {$/;"	f	struct:cimg_library_suffixed::CImg
matrix	.\CImg.h	/^    static CImg<T> matrix(const T& a0) {$/;"	f	struct:cimg_library_suffixed::CImg
matrix	.\CImg.h	/^    static CImg<T> matrix(const T& a0, const T& a1, const T& a2, const T& a3, const T& a4,$/;"	f	struct:cimg_library_suffixed::CImg
matrix	.\CImg.h	/^    static CImg<T> matrix(const T& a0, const T& a1, const T& a2, const T& a3,$/;"	f	struct:cimg_library_suffixed::CImg
matrix	.\CImg.h	/^    static CImg<T> matrix(const T& a0, const T& a1, const T& a2,$/;"	f	struct:cimg_library_suffixed::CImg
matrix	.\CImg.h	/^    static CImg<T> matrix(const T& a0, const T& a1,$/;"	f	struct:cimg_library_suffixed::CImg
max	.\CImg.h	/^      static T max() { return (T)(1UL<<(8*sizeof(T) - 1)); }$/;"	f	struct:cimg_library_suffixed::cimg::type
max	.\CImg.h	/^      static bool max() { return true; }$/;"	f	struct:cimg_library_suffixed::cimg::type
max	.\CImg.h	/^      static char max() { return (char)((unsigned char)-1>>1); }$/;"	f	struct:cimg_library_suffixed::cimg::type
max	.\CImg.h	/^      static char max() { return (char)-1; }$/;"	f	struct:cimg_library_suffixed::cimg::type
max	.\CImg.h	/^      static double max() { return DBL_MAX; }$/;"	f	struct:cimg_library_suffixed::cimg::type
max	.\CImg.h	/^      static float max() { return FLT_MAX; }$/;"	f	struct:cimg_library_suffixed::cimg::type
max	.\CImg.h	/^      static int max() { return (int)((unsigned int)-1>>1); }$/;"	f	struct:cimg_library_suffixed::cimg::type
max	.\CImg.h	/^      static long double max() { return LDBL_MAX; }$/;"	f	struct:cimg_library_suffixed::cimg::type
max	.\CImg.h	/^      static long max() { return (long)((unsigned long)-1>>1); }$/;"	f	struct:cimg_library_suffixed::cimg::type
max	.\CImg.h	/^      static short max() { return (short)((unsigned short)-1>>1); }$/;"	f	struct:cimg_library_suffixed::cimg::type
max	.\CImg.h	/^      static signed char max() { return (signed char)((unsigned char)-1>>1); }$/;"	f	struct:cimg_library_suffixed::cimg::type
max	.\CImg.h	/^      static unsigned char max() { return (unsigned char)-1; }$/;"	f	struct:cimg_library_suffixed::cimg::type
max	.\CImg.h	/^      static unsigned int max() { return (unsigned int)-1; }$/;"	f	struct:cimg_library_suffixed::cimg::type
max	.\CImg.h	/^      static unsigned long max() { return (unsigned long)-1; }$/;"	f	struct:cimg_library_suffixed::cimg::type
max	.\CImg.h	/^      static unsigned short max() { return (unsigned short)-1; }$/;"	f	struct:cimg_library_suffixed::cimg::type
max	.\CImg.h	/^    CImg<T>& max(const CImg<t>& img) {$/;"	f	struct:cimg_library_suffixed::CImg
max	.\CImg.h	/^    CImg<T>& max(const T& val) {$/;"	f	struct:cimg_library_suffixed::CImg
max	.\CImg.h	/^    CImg<T>& max(const char *const expression) {$/;"	f	struct:cimg_library_suffixed::CImg
max	.\CImg.h	/^    T& max() {$/;"	f	struct:cimg_library_suffixed::CImg
max	.\CImg.h	/^    T& max() {$/;"	f	struct:cimg_library_suffixed::CImgList
max	.\CImg.h	/^    const T& max() const {$/;"	f	struct:cimg_library_suffixed::CImg
max	.\CImg.h	/^    const T& max() const {$/;"	f	struct:cimg_library_suffixed::CImgList
max	.\CImg.h	/^    inline typename cimg::superset2<t1,t2,t3>::type max(const t1& a, const t2& b, const t3& c) {$/;"	f	namespace:cimg_library_suffixed::cimg
max	.\CImg.h	/^    inline typename cimg::superset3<t1,t2,t3,t4>::type max(const t1& a, const t2& b, const t3& c, const t4& d) {$/;"	f	namespace:cimg_library_suffixed::cimg
max	.\CImg.h	/^    inline typename cimg::superset<t1,t2>::type max(const t1& a, const t2& b) {$/;"	f	namespace:cimg_library_suffixed::cimg
max	.\CImg.h	471;"	d
max	.\CImg.h	55588;"	d
max_min	.\CImg.h	/^    T& max_min(t& min_val) {$/;"	f	struct:cimg_library_suffixed::CImg
max_min	.\CImg.h	/^    T& max_min(t& min_val) {$/;"	f	struct:cimg_library_suffixed::CImgList
max_min	.\CImg.h	/^    const T& max_min(t& min_val) const {$/;"	f	struct:cimg_library_suffixed::CImg
max_min	.\CImg.h	/^    const T& max_min(t& min_val) const {$/;"	f	struct:cimg_library_suffixed::CImgList
mean	.\CImg.h	/^    double mean() const {$/;"	f	struct:cimg_library_suffixed::CImg
medcon_path	.\CImg.h	/^  inline const char* medcon_path(const char *const user_path, const bool reinit_path) {$/;"	f	namespace:cimg_library_suffixed::cimg
median	.\CImg.h	/^    T median() const {$/;"	f	struct:cimg_library_suffixed::CImg
mem	.\CImg.h	/^      CImg<doubleT> mem;$/;"	m	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mem_img_median	.\CImg.h	/^      unsigned int mempos, mem_img_median, debug_indent, init_size, result_dim;$/;"	m	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mem_img_stats	.\CImg.h	/^      CImg<uintT> mem_img_stats;$/;"	m	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mempos	.\CImg.h	/^      unsigned int mempos, mem_img_median, debug_indent, init_size, result_dim;$/;"	m	struct:cimg_library_suffixed::CImg::_cimg_math_parser
memtype	.\CImg.h	/^      CImg<intT> memtype;$/;"	m	struct:cimg_library_suffixed::CImg::_cimg_math_parser
message	.\CImg.h	/^      char message[JMSG_LENGTH_MAX];$/;"	m	struct:cimg_library_suffixed::CImg::_cimg_error_mgr
min	.\CImg.h	/^      static T min() { return ~max(); }$/;"	f	struct:cimg_library_suffixed::cimg::type
min	.\CImg.h	/^      static bool min() { return false; }$/;"	f	struct:cimg_library_suffixed::cimg::type
min	.\CImg.h	/^      static char min() { return 0; }$/;"	f	struct:cimg_library_suffixed::cimg::type
min	.\CImg.h	/^      static char min() { return ~max(); }$/;"	f	struct:cimg_library_suffixed::cimg::type
min	.\CImg.h	/^      static double min() { return -DBL_MAX; }$/;"	f	struct:cimg_library_suffixed::cimg::type
min	.\CImg.h	/^      static float min() { return -FLT_MAX; }$/;"	f	struct:cimg_library_suffixed::cimg::type
min	.\CImg.h	/^      static int min() { return ~max(); }$/;"	f	struct:cimg_library_suffixed::cimg::type
min	.\CImg.h	/^      static long double min() { return -LDBL_MAX; }$/;"	f	struct:cimg_library_suffixed::cimg::type
min	.\CImg.h	/^      static long min() { return ~max(); }$/;"	f	struct:cimg_library_suffixed::cimg::type
min	.\CImg.h	/^      static short min() { return ~max(); }$/;"	f	struct:cimg_library_suffixed::cimg::type
min	.\CImg.h	/^      static signed char min() { return ~max(); }$/;"	f	struct:cimg_library_suffixed::cimg::type
min	.\CImg.h	/^      static unsigned char min() { return 0; }$/;"	f	struct:cimg_library_suffixed::cimg::type
min	.\CImg.h	/^      static unsigned int min() { return 0; }$/;"	f	struct:cimg_library_suffixed::cimg::type
min	.\CImg.h	/^      static unsigned long min() { return 0; }$/;"	f	struct:cimg_library_suffixed::cimg::type
min	.\CImg.h	/^      static unsigned short min() { return 0; }$/;"	f	struct:cimg_library_suffixed::cimg::type
min	.\CImg.h	/^    CImg<T>& min(const CImg<t>& img) {$/;"	f	struct:cimg_library_suffixed::CImg
min	.\CImg.h	/^    CImg<T>& min(const T& val) {$/;"	f	struct:cimg_library_suffixed::CImg
min	.\CImg.h	/^    CImg<T>& min(const char *const expression) {$/;"	f	struct:cimg_library_suffixed::CImg
min	.\CImg.h	/^    T& min() {$/;"	f	struct:cimg_library_suffixed::CImg
min	.\CImg.h	/^    T& min() {$/;"	f	struct:cimg_library_suffixed::CImgList
min	.\CImg.h	/^    const T& min() const {$/;"	f	struct:cimg_library_suffixed::CImg
min	.\CImg.h	/^    const T& min() const {$/;"	f	struct:cimg_library_suffixed::CImgList
min	.\CImg.h	/^    inline typename cimg::superset2<t1,t2,t3>::type min(const t1& a, const t2& b, const t3& c) {$/;"	f	namespace:cimg_library_suffixed::cimg
min	.\CImg.h	/^    inline typename cimg::superset3<t1,t2,t3,t4>::type min(const t1& a, const t2& b, const t3& c, const t4& d) {$/;"	f	namespace:cimg_library_suffixed::cimg
min	.\CImg.h	/^    inline typename cimg::superset<t1,t2>::type min(const t1& a, const t2& b) {$/;"	f	namespace:cimg_library_suffixed::cimg
min	.\CImg.h	467;"	d
min	.\CImg.h	55585;"	d
min_max	.\CImg.h	/^    T& min_max(t& max_val) {$/;"	f	struct:cimg_library_suffixed::CImg
min_max	.\CImg.h	/^    T& min_max(t& max_val) {$/;"	f	struct:cimg_library_suffixed::CImgList
min_max	.\CImg.h	/^    const T& min_max(t& max_val) const {$/;"	f	struct:cimg_library_suffixed::CImg
min_max	.\CImg.h	/^    const T& min_max(t& max_val) const {$/;"	f	struct:cimg_library_suffixed::CImgList
minmod	.\CImg.h	/^    inline T minmod(const T& a, const T& b) {$/;"	f	namespace:cimg_library_suffixed::cimg
mirror	.\CImg.h	/^    CImg<T>& mirror(const char *const axes) {$/;"	f	struct:cimg_library_suffixed::CImg
mirror	.\CImg.h	/^    CImg<T>& mirror(const char axis) {$/;"	f	struct:cimg_library_suffixed::CImg
mod	.\CImg.h	/^    inline T mod(const T& x, const T& m) {$/;"	f	namespace:cimg_library_suffixed::cimg
mod	.\CImg.h	/^    inline int mod(const bool x, const bool m) {$/;"	f	namespace:cimg_library_suffixed::cimg
mod	.\CImg.h	/^    inline int mod(const char x, const char m) {$/;"	f	namespace:cimg_library_suffixed::cimg
mod	.\CImg.h	/^    inline int mod(const int x, const int m) {$/;"	f	namespace:cimg_library_suffixed::cimg
mod	.\CImg.h	/^    inline int mod(const long x, const long m) {$/;"	f	namespace:cimg_library_suffixed::cimg
mod	.\CImg.h	/^    inline int mod(const short x, const short m) {$/;"	f	namespace:cimg_library_suffixed::cimg
mod	.\CImg.h	/^    inline int mod(const unsigned char x, const unsigned char m) {$/;"	f	namespace:cimg_library_suffixed::cimg
mod	.\CImg.h	/^    inline int mod(const unsigned int x, const unsigned int m) {$/;"	f	namespace:cimg_library_suffixed::cimg
mod	.\CImg.h	/^    inline int mod(const unsigned long x, const unsigned long m) {$/;"	f	namespace:cimg_library_suffixed::cimg
mod	.\CImg.h	/^    inline int mod(const unsigned short x, const unsigned short m) {$/;"	f	namespace:cimg_library_suffixed::cimg
mouse_x	.\CImg.h	/^    int mouse_x() const {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
mouse_y	.\CImg.h	/^    int mouse_y() const {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
move	.\CImg.h	/^    CImgDisplay& move(const int pos_x, const int pos_y) {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
move	.\CImg.h	/^    CImgDisplay& move(const int posx, const int posy) {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
move_to	.\CImg.h	/^    CImg<T>& move_to(CImg<T>& img) {$/;"	f	struct:cimg_library_suffixed::CImg
move_to	.\CImg.h	/^    CImg<t>& move_to(CImg<t>& img) {$/;"	f	struct:cimg_library_suffixed::CImg
move_to	.\CImg.h	/^    CImgList<t>& move_to(CImgList<t>& list) {$/;"	f	struct:cimg_library_suffixed::CImgList
move_to	.\CImg.h	/^    CImgList<t>& move_to(CImgList<t>& list, const unsigned int pos) {$/;"	f	struct:cimg_library_suffixed::CImgList
move_to	.\CImg.h	/^    CImgList<t>& move_to(CImgList<t>& list, const unsigned int pos=~0U) {$/;"	f	struct:cimg_library_suffixed::CImg
mp	.\CImg.h	/^      _cimg_math_parser *mp;$/;"	m	struct:cimg_library_suffixed::CImg::_functor2d_expr
mp	.\CImg.h	/^      _cimg_math_parser *mp;$/;"	m	struct:cimg_library_suffixed::CImg::_functor3d_expr
mp	.\CImg.h	/^      _cimg_math_parser *mp;$/;"	m	struct:cimg_library_suffixed::CImg::_functor4d_streamline_expr
mp_Ioff	.\CImg.h	/^      static double mp_Ioff(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_Ixyz	.\CImg.h	/^      static double mp_Ixyz(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_Joff	.\CImg.h	/^      static double mp_Joff(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_Jxyz	.\CImg.h	/^      static double mp_Jxyz(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_abs	.\CImg.h	/^      static double mp_abs(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_acos	.\CImg.h	/^      static double mp_acos(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_add	.\CImg.h	/^      static double mp_add(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_arg	.\CImg.h	/^      static double mp_arg(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_argmax	.\CImg.h	/^      static double mp_argmax(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_argmin	.\CImg.h	/^      static double mp_argmin(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_asin	.\CImg.h	/^      static double mp_asin(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_atan	.\CImg.h	/^      static double mp_atan(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_atan2	.\CImg.h	/^      static double mp_atan2(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_bitwise_and	.\CImg.h	/^      static double mp_bitwise_and(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_bitwise_left_shift	.\CImg.h	/^      static double mp_bitwise_left_shift(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_bitwise_not	.\CImg.h	/^      static double mp_bitwise_not(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_bitwise_or	.\CImg.h	/^      static double mp_bitwise_or(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_bitwise_right_shift	.\CImg.h	/^      static double mp_bitwise_right_shift(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_cbrt	.\CImg.h	/^      static double mp_cbrt(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_complex_conj	.\CImg.h	/^      static double mp_complex_conj(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_complex_div_sv	.\CImg.h	/^      static double mp_complex_div_sv(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_complex_div_vv	.\CImg.h	/^      static double mp_complex_div_vv(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_complex_exp	.\CImg.h	/^      static double mp_complex_exp(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_complex_log	.\CImg.h	/^      static double mp_complex_log(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_complex_mul	.\CImg.h	/^      static double mp_complex_mul(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_complex_pow_sv	.\CImg.h	/^      static double mp_complex_pow_sv(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_complex_pow_vs	.\CImg.h	/^      static double mp_complex_pow_vs(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_complex_pow_vv	.\CImg.h	/^      static double mp_complex_pow_vv(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_copy	.\CImg.h	/^      static double mp_copy(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_cos	.\CImg.h	/^      static double mp_cos(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_cosh	.\CImg.h	/^      static double mp_cosh(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_cross	.\CImg.h	/^      static double mp_cross(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_cut	.\CImg.h	/^      static double mp_cut(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_debug	.\CImg.h	/^      static double mp_debug(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_decrement	.\CImg.h	/^      static double mp_decrement(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_div	.\CImg.h	/^      static double mp_div(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_dot	.\CImg.h	/^      static double mp_dot(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_dowhile	.\CImg.h	/^      static double mp_dowhile(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_eq	.\CImg.h	/^      static double mp_eq(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_exp	.\CImg.h	/^      static double mp_exp(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_func	.\CImg.h	/^      typedef double (*mp_func)(_cimg_math_parser&);$/;"	t	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_g	.\CImg.h	/^      static double mp_g(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_gauss	.\CImg.h	/^      static double mp_gauss(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_gt	.\CImg.h	/^      static double mp_gt(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_gte	.\CImg.h	/^      static double mp_gte(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_hypot	.\CImg.h	/^      static double mp_hypot(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_i	.\CImg.h	/^      static double mp_i(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_if	.\CImg.h	/^      static double mp_if(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_increment	.\CImg.h	/^      static double mp_increment(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_int	.\CImg.h	/^      static double mp_int(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_ioff	.\CImg.h	/^      static double mp_ioff(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_isbool	.\CImg.h	/^      static double mp_isbool(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_isin	.\CImg.h	/^      static double mp_isin(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_isinf	.\CImg.h	/^      static double mp_isinf(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_isint	.\CImg.h	/^      static double mp_isint(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_isnan	.\CImg.h	/^      static double mp_isnan(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_ixyzc	.\CImg.h	/^      static double mp_ixyzc(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_joff	.\CImg.h	/^      static double mp_joff(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_jxyzc	.\CImg.h	/^      static double mp_jxyzc(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_kth	.\CImg.h	/^      static double mp_kth(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_list_Ioff	.\CImg.h	/^      static double mp_list_Ioff(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_list_Ixyz	.\CImg.h	/^      static double mp_list_Ixyz(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_list_Joff	.\CImg.h	/^      static double mp_list_Joff(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_list_Jxyz	.\CImg.h	/^      static double mp_list_Jxyz(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_list_depth	.\CImg.h	/^      static double mp_list_depth(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_list_height	.\CImg.h	/^      static double mp_list_height(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_list_ioff	.\CImg.h	/^      static double mp_list_ioff(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_list_is_shared	.\CImg.h	/^      static double mp_list_is_shared(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_list_ixyzc	.\CImg.h	/^      static double mp_list_ixyzc(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_list_joff	.\CImg.h	/^      static double mp_list_joff(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_list_jxyzc	.\CImg.h	/^      static double mp_list_jxyzc(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_list_median	.\CImg.h	/^      static double mp_list_median(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_list_set_Ioff_s	.\CImg.h	/^      static double mp_list_set_Ioff_s(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_list_set_Ioff_v	.\CImg.h	/^      static double mp_list_set_Ioff_v(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_list_set_Ixyz_s	.\CImg.h	/^      static double mp_list_set_Ixyz_s(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_list_set_Ixyz_v	.\CImg.h	/^      static double mp_list_set_Ixyz_v(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_list_set_Joff_s	.\CImg.h	/^      static double mp_list_set_Joff_s(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_list_set_Joff_v	.\CImg.h	/^      static double mp_list_set_Joff_v(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_list_set_Jxyz_s	.\CImg.h	/^      static double mp_list_set_Jxyz_s(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_list_set_Jxyz_v	.\CImg.h	/^      static double mp_list_set_Jxyz_v(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_list_set_ioff	.\CImg.h	/^      static double mp_list_set_ioff(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_list_set_ixyzc	.\CImg.h	/^      static double mp_list_set_ixyzc(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_list_set_joff	.\CImg.h	/^      static double mp_list_set_joff(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_list_set_jxyzc	.\CImg.h	/^      static double mp_list_set_jxyzc(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_list_spectrum	.\CImg.h	/^      static double mp_list_spectrum(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_list_stats	.\CImg.h	/^      static double mp_list_stats(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_list_wh	.\CImg.h	/^      static double mp_list_wh(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_list_whd	.\CImg.h	/^      static double mp_list_whd(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_list_whds	.\CImg.h	/^      static double mp_list_whds(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_list_width	.\CImg.h	/^      static double mp_list_width(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_log	.\CImg.h	/^      static double mp_log(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_log10	.\CImg.h	/^      static double mp_log10(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_log2	.\CImg.h	/^      static double mp_log2(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_logical_and	.\CImg.h	/^      static double mp_logical_and(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_logical_not	.\CImg.h	/^      static double mp_logical_not(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_logical_or	.\CImg.h	/^      static double mp_logical_or(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_lt	.\CImg.h	/^      static double mp_lt(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_lte	.\CImg.h	/^      static double mp_lte(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_matrix_det	.\CImg.h	/^      static double mp_matrix_det(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_matrix_diag	.\CImg.h	/^      static double mp_matrix_diag(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_matrix_eig	.\CImg.h	/^      static double mp_matrix_eig(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_matrix_eye	.\CImg.h	/^      static double mp_matrix_eye(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_matrix_inv	.\CImg.h	/^      static double mp_matrix_inv(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_matrix_mul	.\CImg.h	/^      static double mp_matrix_mul(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_matrix_rot	.\CImg.h	/^      static double mp_matrix_rot(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_matrix_solve	.\CImg.h	/^      static double mp_matrix_solve(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_matrix_trace	.\CImg.h	/^      static double mp_matrix_trace(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_matrix_trans	.\CImg.h	/^      static double mp_matrix_trans(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_max	.\CImg.h	/^      static double mp_max(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_med	.\CImg.h	/^      static double mp_med(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_min	.\CImg.h	/^      static double mp_min(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_minus	.\CImg.h	/^      static double mp_minus(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_modulo	.\CImg.h	/^      static double mp_modulo(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_mul	.\CImg.h	/^      static double mp_mul(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_neq	.\CImg.h	/^      static double mp_neq(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_norm0	.\CImg.h	/^      static double mp_norm0(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_norm1	.\CImg.h	/^      static double mp_norm1(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_norm2	.\CImg.h	/^      static double mp_norm2(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_norminf	.\CImg.h	/^      static double mp_norminf(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_normp	.\CImg.h	/^      static double mp_normp(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_pow	.\CImg.h	/^      static double mp_pow(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_pow3	.\CImg.h	/^      static double mp_pow3(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_pow4	.\CImg.h	/^      static double mp_pow4(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_print	.\CImg.h	/^      static double mp_print(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_rol	.\CImg.h	/^      static double mp_rol(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_ror	.\CImg.h	/^      static double mp_ror(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_round	.\CImg.h	/^      static double mp_round(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_self_add	.\CImg.h	/^      static double mp_self_add(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_self_bitwise_and	.\CImg.h	/^      static double mp_self_bitwise_and(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_self_bitwise_left_shift	.\CImg.h	/^      static double mp_self_bitwise_left_shift(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_self_bitwise_or	.\CImg.h	/^      static double mp_self_bitwise_or(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_self_bitwise_right_shift	.\CImg.h	/^      static double mp_self_bitwise_right_shift(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_self_decrement	.\CImg.h	/^      static double mp_self_decrement(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_self_div	.\CImg.h	/^      static double mp_self_div(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_self_increment	.\CImg.h	/^      static double mp_self_increment(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_self_map_vector_s	.\CImg.h	/^      static double mp_self_map_vector_s(_cimg_math_parser& mp) { \/\/ Vector += scalar$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_self_map_vector_v	.\CImg.h	/^      static double mp_self_map_vector_v(_cimg_math_parser& mp) { \/\/ Vector += vector$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_self_modulo	.\CImg.h	/^      static double mp_self_modulo(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_self_mul	.\CImg.h	/^      static double mp_self_mul(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_self_pow	.\CImg.h	/^      static double mp_self_pow(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_self_sub	.\CImg.h	/^      static double mp_self_sub(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_set_Ioff_s	.\CImg.h	/^      static double mp_set_Ioff_s(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_set_Ioff_v	.\CImg.h	/^      static double mp_set_Ioff_v(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_set_Ixyz_s	.\CImg.h	/^      static double mp_set_Ixyz_s(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_set_Ixyz_v	.\CImg.h	/^      static double mp_set_Ixyz_v(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_set_Joff_s	.\CImg.h	/^      static double mp_set_Joff_s(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_set_Joff_v	.\CImg.h	/^      static double mp_set_Joff_v(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_set_Jxyz_s	.\CImg.h	/^      static double mp_set_Jxyz_s(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_set_Jxyz_v	.\CImg.h	/^      static double mp_set_Jxyz_v(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_set_ioff	.\CImg.h	/^      static double mp_set_ioff(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_set_ixyzc	.\CImg.h	/^      static double mp_set_ixyzc(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_set_joff	.\CImg.h	/^      static double mp_set_joff(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_set_jxyzc	.\CImg.h	/^      static double mp_set_jxyzc(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_sign	.\CImg.h	/^      static double mp_sign(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_sin	.\CImg.h	/^      static double mp_sin(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_sinc	.\CImg.h	/^      static double mp_sinc(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_sinh	.\CImg.h	/^      static double mp_sinh(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_sqr	.\CImg.h	/^      static double mp_sqr(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_sqrt	.\CImg.h	/^      static double mp_sqrt(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_sub	.\CImg.h	/^      static double mp_sub(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_swap	.\CImg.h	/^      static double mp_swap(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_tan	.\CImg.h	/^      static double mp_tan(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_tanh	.\CImg.h	/^      static double mp_tanh(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_u	.\CImg.h	/^      static double mp_u(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_vector_copy	.\CImg.h	/^      static double mp_vector_copy(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_vector_crop	.\CImg.h	/^      static double mp_vector_crop(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_vector_init	.\CImg.h	/^      static double mp_vector_init(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_vector_map_sv	.\CImg.h	/^      static double mp_vector_map_sv(_cimg_math_parser& mp) { \/\/ Operator(scalar,vector)$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_vector_map_v	.\CImg.h	/^      static double mp_vector_map_v(_cimg_math_parser& mp) { \/\/ Operator(vector)$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_vector_map_vs	.\CImg.h	/^      static double mp_vector_map_vs(_cimg_math_parser& mp) { \/\/ Operator(vector,scalar)$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_vector_map_vss	.\CImg.h	/^      static double mp_vector_map_vss(_cimg_math_parser& mp) { \/\/ Operator(vector,scalar,scalar)$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_vector_map_vv	.\CImg.h	/^      static double mp_vector_map_vv(_cimg_math_parser& mp) { \/\/ Operator(vector,vector)$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_vector_off	.\CImg.h	/^      static double mp_vector_off(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_vector_print	.\CImg.h	/^      static double mp_vector_print(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_vector_set_off	.\CImg.h	/^      static double mp_vector_set_off(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_vector_sort	.\CImg.h	/^      static double mp_vector_sort(_cimg_math_parser& mp) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mp_whiledo	.\CImg.h	/^      static double mp_whiledo(_cimg_math_parser& mp) { \/\/ Used also by 'for()'$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
mul	.\CImg.h	/^    CImg<T>& mul(const CImg<t>& img) {$/;"	f	struct:cimg_library_suffixed::CImg
mutex	.\CImg.h	/^      HANDLE mutex[32];$/;"	m	struct:cimg_library_suffixed::cimg::Mutex_info
mutex	.\CImg.h	/^    inline int mutex(const unsigned int n, const int lock_mode) {$/;"	f	namespace:cimg_library_suffixed::cimg
nan	.\CImg.h	/^      static double nan() {$/;"	f	struct:cimg_library_suffixed::cimg::type
nan	.\CImg.h	/^      static float nan() { return (float)cimg::type<double>::nan(); }$/;"	f	struct:cimg_library_suffixed::cimg::type
nan	.\CImg.h	/^      static long double nan() { const long double val_nan = -std::sqrt(-1.0L); return val_nan; }$/;"	f	struct:cimg_library_suffixed::cimg::type
nb_bits	.\CImg.h	/^      unsigned int nb_bits;$/;"	m	struct:cimg_library_suffixed::cimg::X11_info
nb_cpus	.\CImg.h	/^    inline unsigned int nb_cpus() {$/;"	f	namespace:cimg_library_suffixed::cimg
nb_resolutions	.\CImg.h	/^      unsigned int nb_resolutions;$/;"	m	struct:cimg_library_suffixed::cimg::X11_info
nb_wins	.\CImg.h	/^      unsigned int nb_wins;$/;"	m	struct:cimg_library_suffixed::cimg::X11_info
nearest_pow2	.\CImg.h	/^    inline unsigned long nearest_pow2(const T& x) {$/;"	f	namespace:cimg_library_suffixed::cimg
needs_input_copy	.\CImg.h	/^      static bool needs_input_copy(const char *expression, bool &is_parallelizable) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
noise	.\CImg.h	/^    CImg<T>& noise(const double sigma, const unsigned int noise_type=0) {$/;"	f	struct:cimg_library_suffixed::CImg
norm	.\CImg.h	/^    CImg<T>& norm(const int norm_type=2) {$/;"	f	struct:cimg_library_suffixed::CImg
normalization	.\CImg.h	/^    unsigned int normalization() const {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
normalize	.\CImg.h	/^    CImg<T>& normalize() {$/;"	f	struct:cimg_library_suffixed::CImg
normalize	.\CImg.h	/^    CImg<T>& normalize(const T& min_value, const T& max_value) {$/;"	f	struct:cimg_library_suffixed::CImg
number_filename	.\CImg.h	/^    inline char* number_filename(const char *const filename, const int number,$/;"	f	namespace:cimg_library_suffixed::cimg
object3dtoCImg3d	.\CImg.h	/^    CImg<T>& object3dtoCImg3d(const CImgList<tp>& primitives,$/;"	f	struct:cimg_library_suffixed::CImg
object3dtoCImg3d	.\CImg.h	/^    CImg<T>& object3dtoCImg3d(const bool full_check=true) {$/;"	f	struct:cimg_library_suffixed::CImg
offset	.\CImg.h	/^    long offset(const int x, const int y=0, const int z=0, const int c=0) const {$/;"	f	struct:cimg_library_suffixed::CImg
opcode	.\CImg.h	/^      CImg<uptrT> opcode;$/;"	m	struct:cimg_library_suffixed::CImg::_cimg_math_parser
openmp_mode	.\CImg.h	/^    inline unsigned int& openmp_mode() {$/;"	f	namespace:cimg_library_suffixed::cimg
openmp_mode	.\CImg.h	/^    inline unsigned int& openmp_mode(const unsigned int mode) {$/;"	f	namespace:cimg_library_suffixed::cimg
operator !=	.\CImg.h	/^    bool operator!=(const CImg<t>& img) const {$/;"	f	struct:cimg_library_suffixed::CImg
operator !=	.\CImg.h	/^    bool operator!=(const char *const expression) const {$/;"	f	struct:cimg_library_suffixed::CImg
operator !=	.\CImg.h	/^    bool operator!=(const t value) const {$/;"	f	struct:cimg_library_suffixed::CImg
operator !=	.\CImg.h	/^  inline bool operator!=(const char *const expression, const CImg<T>& img) {$/;"	f	namespace:cimg_library_suffixed
operator %	.\CImg.h	/^    CImg<Tfloat> operator%(const char *const expression) const {$/;"	f	struct:cimg_library_suffixed::CImg
operator %	.\CImg.h	/^    CImg<_cimg_Tt> operator%(const CImg<t>& img) const {$/;"	f	struct:cimg_library_suffixed::CImg
operator %	.\CImg.h	/^    CImg<_cimg_Tt> operator%(const t value) const {$/;"	f	struct:cimg_library_suffixed::CImg
operator %=	.\CImg.h	/^    CImg<T>& operator%=(const CImg<t>& img) {$/;"	f	struct:cimg_library_suffixed::CImg
operator %=	.\CImg.h	/^    CImg<T>& operator%=(const char *const expression) {$/;"	f	struct:cimg_library_suffixed::CImg
operator %=	.\CImg.h	/^    CImg<T>& operator%=(const t value) {$/;"	f	struct:cimg_library_suffixed::CImg
operator &	.\CImg.h	/^    CImg<T> operator&(const CImg<t>& img) const {$/;"	f	struct:cimg_library_suffixed::CImg
operator &	.\CImg.h	/^    CImg<T> operator&(const char *const expression) const {$/;"	f	struct:cimg_library_suffixed::CImg
operator &	.\CImg.h	/^    CImg<T> operator&(const t value) const {$/;"	f	struct:cimg_library_suffixed::CImg
operator &	.\CImg.h	/^  inline CImg<T> operator&(const char *const expression, const CImg<T>& img) {$/;"	f	namespace:cimg_library_suffixed
operator &=	.\CImg.h	/^    CImg<T>& operator&=(const CImg<t>& img) {$/;"	f	struct:cimg_library_suffixed::CImg
operator &=	.\CImg.h	/^    CImg<T>& operator&=(const char *const expression) {$/;"	f	struct:cimg_library_suffixed::CImg
operator &=	.\CImg.h	/^    CImg<T>& operator&=(const t value) {$/;"	f	struct:cimg_library_suffixed::CImg
operator ()	.\CImg.h	/^      double operator()(const double x, const double y, const double z, const double c) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
operator ()	.\CImg.h	/^      float operator()(const float x, const float y) const {$/;"	f	struct:cimg_library_suffixed::CImg::_functor2d_expr
operator ()	.\CImg.h	/^      float operator()(const float x, const float y) const {$/;"	f	struct:cimg_library_suffixed::CImg::_functor2d_float
operator ()	.\CImg.h	/^      float operator()(const float x, const float y) const {$/;"	f	struct:cimg_library_suffixed::CImg::_functor2d_int
operator ()	.\CImg.h	/^      float operator()(const float x, const float y, const float z) const {$/;"	f	struct:cimg_library_suffixed::CImg::_functor3d_expr
operator ()	.\CImg.h	/^      float operator()(const float x, const float y, const float z) const {$/;"	f	struct:cimg_library_suffixed::CImg::_functor3d_float
operator ()	.\CImg.h	/^      float operator()(const float x, const float y, const float z) const {$/;"	f	struct:cimg_library_suffixed::CImg::_functor3d_int
operator ()	.\CImg.h	/^      float operator()(const float x, const float y, const float z, const unsigned int c) const {$/;"	f	struct:cimg_library_suffixed::CImg::_functor4d_int
operator ()	.\CImg.h	/^      float operator()(const float x, const float y, const float z, const unsigned int c) const {$/;"	f	struct:cimg_library_suffixed::CImg::_functor4d_streamline2d_directed
operator ()	.\CImg.h	/^      float operator()(const float x, const float y, const float z, const unsigned int c) const {$/;"	f	struct:cimg_library_suffixed::CImg::_functor4d_streamline2d_oriented
operator ()	.\CImg.h	/^      float operator()(const float x, const float y, const float z, const unsigned int c) const {$/;"	f	struct:cimg_library_suffixed::CImg::_functor4d_streamline3d_directed
operator ()	.\CImg.h	/^      float operator()(const float x, const float y, const float z, const unsigned int c) const {$/;"	f	struct:cimg_library_suffixed::CImg::_functor4d_streamline3d_oriented
operator ()	.\CImg.h	/^      float operator()(const float x, const float y, const float z, const unsigned int c) const {$/;"	f	struct:cimg_library_suffixed::CImg::_functor4d_streamline_expr
operator ()	.\CImg.h	/^      void operator()(const double x, const double y, const double z, const double c, t *const output) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
operator ()	.\CImg.h	/^    CImg<T>& operator()(const unsigned int pos) {$/;"	f	struct:cimg_library_suffixed::CImgList
operator ()	.\CImg.h	/^    T& operator()(const unsigned int pos, const unsigned int x, const unsigned int y=0,$/;"	f	struct:cimg_library_suffixed::CImgList
operator ()	.\CImg.h	/^    T& operator()(const unsigned int x) {$/;"	f	struct:cimg_library_suffixed::CImg
operator ()	.\CImg.h	/^    T& operator()(const unsigned int x, const unsigned int y) {$/;"	f	struct:cimg_library_suffixed::CImg
operator ()	.\CImg.h	/^    T& operator()(const unsigned int x, const unsigned int y, const unsigned int z) {$/;"	f	struct:cimg_library_suffixed::CImg
operator ()	.\CImg.h	/^    T& operator()(const unsigned int x, const unsigned int y, const unsigned int z, const unsigned int c) {$/;"	f	struct:cimg_library_suffixed::CImg
operator ()	.\CImg.h	/^    T& operator()(const unsigned int x, const unsigned int y, const unsigned int z, const unsigned int c,$/;"	f	struct:cimg_library_suffixed::CImg
operator ()	.\CImg.h	/^    T& operator()(const unsigned int x, const unsigned int y, const unsigned int z, const unsigned int,$/;"	f	struct:cimg_library_suffixed::CImg
operator ()	.\CImg.h	/^    T& operator()(const unsigned int x, const unsigned int y=0,$/;"	f	struct:cimg_library_suffixed::CImg
operator ()	.\CImg.h	/^    const CImg<T>& operator()(const unsigned int pos) const {$/;"	f	struct:cimg_library_suffixed::CImgList
operator ()	.\CImg.h	/^    const T& operator()(const unsigned int pos, const unsigned int x, const unsigned int y=0,$/;"	f	struct:cimg_library_suffixed::CImgList
operator ()	.\CImg.h	/^    const T& operator()(const unsigned int x) const {$/;"	f	struct:cimg_library_suffixed::CImg
operator ()	.\CImg.h	/^    const T& operator()(const unsigned int x, const unsigned int y) const {$/;"	f	struct:cimg_library_suffixed::CImg
operator ()	.\CImg.h	/^    const T& operator()(const unsigned int x, const unsigned int y, const unsigned int z) const {$/;"	f	struct:cimg_library_suffixed::CImg
operator ()	.\CImg.h	/^    const T& operator()(const unsigned int x, const unsigned int y, const unsigned int z, const unsigned int c) const {$/;"	f	struct:cimg_library_suffixed::CImg
operator ()	.\CImg.h	/^    const T& operator()(const unsigned int x, const unsigned int y, const unsigned int z, const unsigned int c,$/;"	f	struct:cimg_library_suffixed::CImg
operator ()	.\CImg.h	/^    const T& operator()(const unsigned int x, const unsigned int y, const unsigned int z, const unsigned int,$/;"	f	struct:cimg_library_suffixed::CImg
operator ()	.\CImg.h	/^    const T& operator()(const unsigned int x, const unsigned int y=0,$/;"	f	struct:cimg_library_suffixed::CImg
operator *	.\CImg.h	/^    CImg<Tfloat> operator*(const char *const expression) const {$/;"	f	struct:cimg_library_suffixed::CImg
operator *	.\CImg.h	/^    CImg<_cimg_Tt> operator*(const CImg<t>& img) const {$/;"	f	struct:cimg_library_suffixed::CImg
operator *	.\CImg.h	/^    CImg<_cimg_Tt> operator*(const t value) const {$/;"	f	struct:cimg_library_suffixed::CImg
operator *	.\CImg.h	/^  inline CImg<_cimg_Tfloat> operator*(const char *const expression, const CImg<T>& img) {$/;"	f	namespace:cimg_library_suffixed
operator *=	.\CImg.h	/^    CImg<T>& operator*=(const CImg<t>& img) {$/;"	f	struct:cimg_library_suffixed::CImg
operator *=	.\CImg.h	/^    CImg<T>& operator*=(const char *const expression) {$/;"	f	struct:cimg_library_suffixed::CImg
operator *=	.\CImg.h	/^    CImg<T>& operator*=(const t value) {$/;"	f	struct:cimg_library_suffixed::CImg
operator +	.\CImg.h	/^    CImg<T> operator+() const {$/;"	f	struct:cimg_library_suffixed::CImg
operator +	.\CImg.h	/^    CImg<Tfloat> operator+(const char *const expression) const {$/;"	f	struct:cimg_library_suffixed::CImg
operator +	.\CImg.h	/^    CImg<_cimg_Tt> operator+(const CImg<t>& img) const {$/;"	f	struct:cimg_library_suffixed::CImg
operator +	.\CImg.h	/^    CImg<_cimg_Tt> operator+(const t value) const {$/;"	f	struct:cimg_library_suffixed::CImg
operator +	.\CImg.h	/^    CImgList<T> operator+() const {$/;"	f	struct:cimg_library_suffixed::CImgList
operator +	.\CImg.h	/^  inline CImg<_cimg_Tfloat> operator+(const char *const expression, const CImg<T>& img) {$/;"	f	namespace:cimg_library_suffixed
operator ++	.\CImg.h	/^    CImg<T> operator++(int) {$/;"	f	struct:cimg_library_suffixed::CImg
operator ++	.\CImg.h	/^    CImg<T>& operator++() {$/;"	f	struct:cimg_library_suffixed::CImg
operator +=	.\CImg.h	/^    CImg<T>& operator+=(const CImg<t>& img) {$/;"	f	struct:cimg_library_suffixed::CImg
operator +=	.\CImg.h	/^    CImg<T>& operator+=(const char *const expression) {$/;"	f	struct:cimg_library_suffixed::CImg
operator +=	.\CImg.h	/^    CImg<T>& operator+=(const t value) {$/;"	f	struct:cimg_library_suffixed::CImg
operator ,	.\CImg.h	/^    CImgList<T> operator,(const CImg<t>& img) const {$/;"	f	struct:cimg_library_suffixed::CImgList
operator ,	.\CImg.h	/^    CImgList<T>& operator,(const CImg<t>& img) {$/;"	f	struct:cimg_library_suffixed::CImgList
operator ,	.\CImg.h	/^    CImgList<T>& operator,(const CImgList<t>& list) const {$/;"	f	struct:cimg_library_suffixed::CImgList
operator ,	.\CImg.h	/^    CImgList<T>& operator,(const CImgList<t>& list) {$/;"	f	struct:cimg_library_suffixed::CImgList
operator ,	.\CImg.h	/^    CImgList<_cimg_Tt> operator,(const CImg<t>& img) const {$/;"	f	struct:cimg_library_suffixed::CImg
operator ,	.\CImg.h	/^    CImgList<_cimg_Tt> operator,(const CImgList<t>& list) const {$/;"	f	struct:cimg_library_suffixed::CImg
operator -	.\CImg.h	/^    CImg<T> operator-() const {$/;"	f	struct:cimg_library_suffixed::CImg
operator -	.\CImg.h	/^    CImg<Tfloat> operator-(const char *const expression) const {$/;"	f	struct:cimg_library_suffixed::CImg
operator -	.\CImg.h	/^    CImg<_cimg_Tt> operator-(const CImg<t>& img) const {$/;"	f	struct:cimg_library_suffixed::CImg
operator -	.\CImg.h	/^    CImg<_cimg_Tt> operator-(const t value) const {$/;"	f	struct:cimg_library_suffixed::CImg
operator -	.\CImg.h	/^  inline CImg<_cimg_Tfloat> operator-(const char *const expression, const CImg<T>& img) {$/;"	f	namespace:cimg_library_suffixed
operator --	.\CImg.h	/^    CImg<T> operator--(int) {$/;"	f	struct:cimg_library_suffixed::CImg
operator --	.\CImg.h	/^    CImg<T>& operator--() {$/;"	f	struct:cimg_library_suffixed::CImg
operator -=	.\CImg.h	/^    CImg<T>& operator-=(const CImg<t>& img) {$/;"	f	struct:cimg_library_suffixed::CImg
operator -=	.\CImg.h	/^    CImg<T>& operator-=(const char *const expression) {$/;"	f	struct:cimg_library_suffixed::CImg
operator -=	.\CImg.h	/^    CImg<T>& operator-=(const t value) {$/;"	f	struct:cimg_library_suffixed::CImg
operator /	.\CImg.h	/^    CImg<Tfloat> operator\/(const char *const expression) const {$/;"	f	struct:cimg_library_suffixed::CImg
operator /	.\CImg.h	/^    CImg<_cimg_Tt> operator\/(const CImg<t>& img) const {$/;"	f	struct:cimg_library_suffixed::CImg
operator /	.\CImg.h	/^    CImg<_cimg_Tt> operator\/(const t value) const {$/;"	f	struct:cimg_library_suffixed::CImg
operator /	.\CImg.h	/^  inline CImg<_cimg_Tfloat> operator\/(const char *const expression, const CImg<T>& img) {$/;"	f	namespace:cimg_library_suffixed
operator /=	.\CImg.h	/^    CImg<T>& operator\/=(const CImg<t>& img) {$/;"	f	struct:cimg_library_suffixed::CImg
operator /=	.\CImg.h	/^    CImg<T>& operator\/=(const char *const expression) {$/;"	f	struct:cimg_library_suffixed::CImg
operator /=	.\CImg.h	/^    CImg<T>& operator\/=(const t value) {$/;"	f	struct:cimg_library_suffixed::CImg
operator <	.\CImg.h	/^    CImgList<T> operator<(const char axis) const {$/;"	f	struct:cimg_library_suffixed::CImg
operator <	.\CImg.h	/^    CImgList<T> operator<(const char axis) const {$/;"	f	struct:cimg_library_suffixed::CImgList
operator <<	.\CImg.h	/^    CImg<T> operator<<(const CImg<t>& img) const {$/;"	f	struct:cimg_library_suffixed::CImg
operator <<	.\CImg.h	/^    CImg<T> operator<<(const char *const expression) const {$/;"	f	struct:cimg_library_suffixed::CImg
operator <<	.\CImg.h	/^    CImg<T> operator<<(const t value) const {$/;"	f	struct:cimg_library_suffixed::CImg
operator <<=	.\CImg.h	/^    CImg<T>& operator<<=(const CImg<t>& img) {$/;"	f	struct:cimg_library_suffixed::CImg
operator <<=	.\CImg.h	/^    CImg<T>& operator<<=(const char *const expression) {$/;"	f	struct:cimg_library_suffixed::CImg
operator <<=	.\CImg.h	/^    CImg<T>& operator<<=(const t value) {$/;"	f	struct:cimg_library_suffixed::CImg
operator =	.\CImg.h	/^    CImg<T> & operator=(std::initializer_list<t> values) {$/;"	f	struct:cimg_library_suffixed::CImg
operator =	.\CImg.h	/^    CImg<T>& operator=(CImg<T>&& img) {$/;"	f	struct:cimg_library_suffixed::CImg
operator =	.\CImg.h	/^    CImg<T>& operator=(const CImg<T>& img) {$/;"	f	struct:cimg_library_suffixed::CImg
operator =	.\CImg.h	/^    CImg<T>& operator=(const CImg<t>& img) {$/;"	f	struct:cimg_library_suffixed::CImg
operator =	.\CImg.h	/^    CImg<T>& operator=(const CImgDisplay& disp) {$/;"	f	struct:cimg_library_suffixed::CImg
operator =	.\CImg.h	/^    CImg<T>& operator=(const T& value) {$/;"	f	struct:cimg_library_suffixed::CImg
operator =	.\CImg.h	/^    CImg<T>& operator=(const char *const expression) {$/;"	f	struct:cimg_library_suffixed::CImg
operator =	.\CImg.h	/^    CImgAbortException& operator=(const CImgAbortException& e) {$/;"	f	struct:cimg_library_suffixed::CImgAbortException
operator =	.\CImg.h	/^    CImgDisplay& operator=(const CImg<t>& img) {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
operator =	.\CImg.h	/^    CImgDisplay& operator=(const CImgDisplay& disp) {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
operator =	.\CImg.h	/^    CImgDisplay& operator=(const CImgList<t>& list) {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
operator =	.\CImg.h	/^    CImgException& operator=(const CImgException& e) {$/;"	f	struct:cimg_library_suffixed::CImgException
operator =	.\CImg.h	/^    CImgList<T>& operator=(const CImg<t>& img) {$/;"	f	struct:cimg_library_suffixed::CImgList
operator =	.\CImg.h	/^    CImgList<T>& operator=(const CImgDisplay& disp) {$/;"	f	struct:cimg_library_suffixed::CImgList
operator =	.\CImg.h	/^    CImgList<T>& operator=(const CImgList<T>& list) {$/;"	f	struct:cimg_library_suffixed::CImgList
operator =	.\CImg.h	/^    CImgList<T>& operator=(const CImgList<t>& list) {$/;"	f	struct:cimg_library_suffixed::CImgList
operator =	.\CImg.h	/^    CImgList<T>& operator=(const char *const filename) {$/;"	f	struct:cimg_library_suffixed::CImgList
operator ==	.\CImg.h	/^    bool operator==(const CImg<t>& img) const {$/;"	f	struct:cimg_library_suffixed::CImg
operator ==	.\CImg.h	/^    bool operator==(const char *const expression) const {$/;"	f	struct:cimg_library_suffixed::CImg
operator ==	.\CImg.h	/^    bool operator==(const t value) const {$/;"	f	struct:cimg_library_suffixed::CImg
operator ==	.\CImg.h	/^  inline bool operator==(const char *const expression, const CImg<T>& img) {$/;"	f	namespace:cimg_library_suffixed
operator >	.\CImg.h	/^    CImg<T> operator>(const char axis) const {$/;"	f	struct:cimg_library_suffixed::CImgList
operator >>	.\CImg.h	/^    CImg<T> operator>>(const CImg<t>& img) const {$/;"	f	struct:cimg_library_suffixed::CImg
operator >>	.\CImg.h	/^    CImg<T> operator>>(const char *const expression) const {$/;"	f	struct:cimg_library_suffixed::CImg
operator >>	.\CImg.h	/^    CImg<T> operator>>(const t value) const {$/;"	f	struct:cimg_library_suffixed::CImg
operator >>=	.\CImg.h	/^    CImg<T>& operator>>=(const CImg<t>& img) {$/;"	f	struct:cimg_library_suffixed::CImg
operator >>=	.\CImg.h	/^    CImg<T>& operator>>=(const char *const expression) {$/;"	f	struct:cimg_library_suffixed::CImg
operator >>=	.\CImg.h	/^    CImg<T>& operator>>=(const t value) {$/;"	f	struct:cimg_library_suffixed::CImg
operator CImg<T>*	.\CImg.h	/^    operator CImg<T>*() {$/;"	f	struct:cimg_library_suffixed::CImgList
operator T*	.\CImg.h	/^    operator T*() {$/;"	f	struct:cimg_library_suffixed::CImg
operator []	.\blocks.cpp	/^    inline float &operator[](int a)$/;"	f	struct:HSL
operator []	.\hue.cpp	/^    inline float &operator[](int a)$/;"	f	struct:HSL
operator []	.\vision.cpp	/^    inline float &operator[](int a)$/;"	f	struct:HSL
operator ^	.\CImg.h	/^    CImg<T> operator^(const CImg<t>& img) const {$/;"	f	struct:cimg_library_suffixed::CImg
operator ^	.\CImg.h	/^    CImg<T> operator^(const char *const expression) const {$/;"	f	struct:cimg_library_suffixed::CImg
operator ^	.\CImg.h	/^    CImg<T> operator^(const t value) const {$/;"	f	struct:cimg_library_suffixed::CImg
operator ^	.\CImg.h	/^  inline CImg<T> operator^(const char *const expression, const CImg<T>& img) {$/;"	f	namespace:cimg_library_suffixed
operator ^=	.\CImg.h	/^    CImg<T>& operator^=(const CImg<t>& img) {$/;"	f	struct:cimg_library_suffixed::CImg
operator ^=	.\CImg.h	/^    CImg<T>& operator^=(const char *const expression) {$/;"	f	struct:cimg_library_suffixed::CImg
operator ^=	.\CImg.h	/^    CImg<T>& operator^=(const t value) {$/;"	f	struct:cimg_library_suffixed::CImg
operator bool	.\CImg.h	/^    operator bool() const {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
operator const CImg<T>*	.\CImg.h	/^    operator const CImg<T>*() const {$/;"	f	struct:cimg_library_suffixed::CImgList
operator const T*	.\CImg.h	/^    operator const T*() const {$/;"	f	struct:cimg_library_suffixed::CImg
operator |	.\CImg.h	/^    CImg<T> operator|(const CImg<t>& img) const {$/;"	f	struct:cimg_library_suffixed::CImg
operator |	.\CImg.h	/^    CImg<T> operator|(const char *const expression) const {$/;"	f	struct:cimg_library_suffixed::CImg
operator |	.\CImg.h	/^    CImg<T> operator|(const t value) const {$/;"	f	struct:cimg_library_suffixed::CImg
operator |	.\CImg.h	/^  inline CImg<T> operator|(const char *const expression, const CImg<T>& img) {$/;"	f	namespace:cimg_library_suffixed
operator |=	.\CImg.h	/^    CImg<T>& operator|=(const CImg<t>& img) {$/;"	f	struct:cimg_library_suffixed::CImg
operator |=	.\CImg.h	/^    CImg<T>& operator|=(const char *const expression) {$/;"	f	struct:cimg_library_suffixed::CImg
operator |=	.\CImg.h	/^    CImg<T>& operator|=(const t value) {$/;"	f	struct:cimg_library_suffixed::CImg
operator ~	.\CImg.h	/^    CImg<T> operator~() const {$/;"	f	struct:cimg_library_suffixed::CImg
option	.\CImg.h	/^    inline bool option(const char *const name, const int argc, const char *const *const argv,$/;"	f	namespace:cimg_library_suffixed::cimg
option	.\CImg.h	/^    inline char option(const char *const name, const int argc, const char *const *const argv,$/;"	f	namespace:cimg_library_suffixed::cimg
option	.\CImg.h	/^    inline const char* option(const char *const name, const int argc, const char *const *const argv,$/;"	f	namespace:cimg_library_suffixed::cimg
option	.\CImg.h	/^    inline double option(const char *const name, const int argc, const char *const *const argv,$/;"	f	namespace:cimg_library_suffixed::cimg
option	.\CImg.h	/^    inline float option(const char *const name, const int argc, const char *const *const argv,$/;"	f	namespace:cimg_library_suffixed::cimg
option	.\CImg.h	/^    inline int option(const char *const name, const int argc, const char *const *const argv,$/;"	f	namespace:cimg_library_suffixed::cimg
original	.\CImg.h	/^      struct jpeg_error_mgr original;$/;"	m	struct:cimg_library_suffixed::CImg::_cimg_error_mgr	typeref:struct:cimg_library_suffixed::CImg::_cimg_error_mgr::jpeg_error_mgr
output	.\CImg.h	/^    inline std::FILE* output(std::FILE *file) {$/;"	f	namespace:cimg_library_suffixed::cimg
pI	.\CImg.h	/^      CImg<floatT> *pI;$/;"	m	struct:cimg_library_suffixed::CImg::_functor4d_streamline2d_oriented
pI	.\CImg.h	/^      CImg<floatT> *pI;$/;"	m	struct:cimg_library_suffixed::CImg::_functor4d_streamline3d_oriented
p_code	.\CImg.h	/^      const CImg<uptrT> *p_code_begin, *p_code_end, *p_code;$/;"	m	struct:cimg_library_suffixed::CImg::_cimg_math_parser
p_code_begin	.\CImg.h	/^      const CImg<uptrT> *p_code_begin, *p_code_end, *p_code;$/;"	m	struct:cimg_library_suffixed::CImg::_cimg_math_parser
p_code_end	.\CImg.h	/^      const CImg<uptrT> *p_code_begin, *p_code_end, *p_code;$/;"	m	struct:cimg_library_suffixed::CImg::_cimg_math_parser
paint	.\CImg.h	/^    CImgDisplay& paint() {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
paint	.\CImg.h	/^    CImgDisplay& paint(const bool wait_expose=true) {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
patchmatch	.\CImg.h	/^    CImg<T>& patchmatch(const CImg<T>& patch_image,$/;"	f	struct:cimg_library_suffixed::CImg
permute_axes	.\CImg.h	/^    CImg<T>& permute_axes(const char *const order) {$/;"	f	struct:cimg_library_suffixed::CImg
pexpr	.\CImg.h	/^      CImg<charT> expr, pexpr;$/;"	m	struct:cimg_library_suffixed::CImg::_cimg_math_parser
pixel_type	.\CImg.h	/^    static const char* pixel_type() {$/;"	f	struct:cimg_library_suffixed::CImg
pixel_type	.\CImg.h	/^    static const char* pixel_type() {$/;"	f	struct:cimg_library_suffixed::CImgList
plane3d	.\CImg.h	/^    static CImg<floatT> plane3d(CImgList<tf>& primitives,$/;"	f	struct:cimg_library_suffixed::CImg
pop_back	.\CImg.h	/^    CImgList<T>& pop_back() {$/;"	f	struct:cimg_library_suffixed::CImgList
pop_front	.\CImg.h	/^    CImgList<T>& pop_front() {$/;"	f	struct:cimg_library_suffixed::CImgList
pow	.\CImg.h	/^    CImg<T>& pow(const CImg<t>& img) {$/;"	f	struct:cimg_library_suffixed::CImg
pow	.\CImg.h	/^    CImg<T>& pow(const char *const expression) {$/;"	f	struct:cimg_library_suffixed::CImg
pow	.\CImg.h	/^    CImg<T>& pow(const double p) {$/;"	f	struct:cimg_library_suffixed::CImg
prand	.\CImg.h	/^    inline unsigned int prand(const double z) {$/;"	f	namespace:cimg_library_suffixed::cimg
print	.\CImg.h	/^    const CImg<T>& print(const char *const title=0, const bool display_stats=true) const {$/;"	f	struct:cimg_library_suffixed::CImg
print	.\CImg.h	/^    const CImgList<T>& print(const char *const title=0, const bool display_stats=true) const {$/;"	f	struct:cimg_library_suffixed::CImgList
product	.\CImg.h	/^    double product() const {$/;"	f	struct:cimg_library_suffixed::CImg
programfiles_path	.\CImg.h	/^  inline const char* programfiles_path(const char *const user_path, const bool reinit_path) {$/;"	f	namespace:cimg_library_suffixed::cimg
projections2d	.\CImg.h	/^    CImg<T>& projections2d(const unsigned int x0, const unsigned int y0, const unsigned int z0) {$/;"	f	struct:cimg_library_suffixed::CImg
pseudoinvert	.\CImg.h	/^    CImg<T>& pseudoinvert() {$/;"	f	struct:cimg_library_suffixed::CImg
pseudoinvert	.\CImg.h	/^  inline CImg<_cimg_Tfloat> pseudoinvert(const CImg<T>& instance) {$/;"	f	namespace:cimg_library_suffixed
push_back	.\CImg.h	/^    CImgList<T>& push_back(const CImg<t>& img) {$/;"	f	struct:cimg_library_suffixed::CImgList
push_back	.\CImg.h	/^    CImgList<T>& push_back(const CImgList<t>& list) {$/;"	f	struct:cimg_library_suffixed::CImgList
push_front	.\CImg.h	/^    CImgList<T>& push_front(const CImg<t>& img) {$/;"	f	struct:cimg_library_suffixed::CImgList
push_front	.\CImg.h	/^    CImgList<T>& push_front(const CImgList<t>& list) {$/;"	f	struct:cimg_library_suffixed::CImgList
quantize	.\CImg.h	/^    CImg<T>& quantize(const unsigned int nb_levels, const bool keep_range=true) {$/;"	f	struct:cimg_library_suffixed::CImg
rand	.\CImg.h	/^    CImg<T>& rand(const T& val_min, const T& val_max) {$/;"	f	struct:cimg_library_suffixed::CImg
rand	.\CImg.h	/^    inline double rand(const double val_max=1) {$/;"	f	namespace:cimg_library_suffixed::cimg
rand	.\CImg.h	/^    inline double rand(const double val_min, const double val_max) {$/;"	f	namespace:cimg_library_suffixed::cimg
rdtscp	.\blocks.cpp	/^static inline uint32_t rdtscp( uint32_t & aux )$/;"	f	file:
rdtscp	.\hue.cpp	/^static inline uint32_t rdtscp( uint32_t & aux )$/;"	f	file:
rdtscp	.\vision.cpp	/^static inline uint32_t rdtscp( uint32_t & aux )$/;"	f	file:
ref	.\CImg.h	/^      const CImg<T>& ref;$/;"	m	struct:cimg_library_suffixed::CImg::_functor2d_float
ref	.\CImg.h	/^      const CImg<T>& ref;$/;"	m	struct:cimg_library_suffixed::CImg::_functor2d_int
ref	.\CImg.h	/^      const CImg<T>& ref;$/;"	m	struct:cimg_library_suffixed::CImg::_functor3d_float
ref	.\CImg.h	/^      const CImg<T>& ref;$/;"	m	struct:cimg_library_suffixed::CImg::_functor3d_int
ref	.\CImg.h	/^      const CImg<T>& ref;$/;"	m	struct:cimg_library_suffixed::CImg::_functor4d_int
ref	.\CImg.h	/^      const CImg<T>& ref;$/;"	m	struct:cimg_library_suffixed::CImg::_functor4d_streamline2d_directed
ref	.\CImg.h	/^      const CImg<T>& ref;$/;"	m	struct:cimg_library_suffixed::CImg::_functor4d_streamline2d_oriented
ref	.\CImg.h	/^      const CImg<T>& ref;$/;"	m	struct:cimg_library_suffixed::CImg::_functor4d_streamline3d_directed
ref	.\CImg.h	/^      const CImg<T>& ref;$/;"	m	struct:cimg_library_suffixed::CImg::_functor4d_streamline3d_oriented
released_key	.\CImg.h	/^    unsigned int released_key(const unsigned int pos=0) const {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
remove	.\CImg.h	/^    CImgList<T>& remove() {$/;"	f	struct:cimg_library_suffixed::CImgList
remove	.\CImg.h	/^    CImgList<T>& remove(const unsigned int pos) {$/;"	f	struct:cimg_library_suffixed::CImgList
remove	.\CImg.h	/^    CImgList<T>& remove(const unsigned int pos1, const unsigned int pos2) {$/;"	f	struct:cimg_library_suffixed::CImgList
render	.\CImg.h	/^    CImgDisplay& render(const CImg<T>& img) {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
render	.\CImg.h	/^    CImgDisplay& render(const CImg<T>& img, const bool flag8=false) {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
reqPixelz	.\blocks.cpp	74;"	d	file:
reqPixelz	.\hue.cpp	74;"	d	file:
reqPixelz	.\vision.cpp	73;"	d	file:
reserved_label	.\CImg.h	/^      CImg<uintT> level, labelMpos, reserved_label;$/;"	m	struct:cimg_library_suffixed::CImg::_cimg_math_parser
resize	.\CImg.h	/^    CImg<T>& resize(const CImg<t>& src,$/;"	f	struct:cimg_library_suffixed::CImg
resize	.\CImg.h	/^    CImg<T>& resize(const CImgDisplay& disp,$/;"	f	struct:cimg_library_suffixed::CImg
resize	.\CImg.h	/^    CImg<T>& resize(const int size_x, const int size_y=-100,$/;"	f	struct:cimg_library_suffixed::CImg
resize	.\CImg.h	/^    CImgDisplay& resize(const CImg<T>& img, const bool force_redraw=true) {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
resize	.\CImg.h	/^    CImgDisplay& resize(const CImgDisplay& disp, const bool force_redraw=true) {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
resize	.\CImg.h	/^    CImgDisplay& resize(const bool force_redraw=true) {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
resize	.\CImg.h	/^    CImgDisplay& resize(const int nwidth, const int nheight, const bool force_redraw=true) {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
resize	.\CImg.h	/^    CImgDisplay& resize(const int width, const int height, const bool force_redraw=true) {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
resize_doubleXY	.\CImg.h	/^    CImg<T>& resize_doubleXY() {$/;"	f	struct:cimg_library_suffixed::CImg
resize_halfXY	.\CImg.h	/^    CImg<T>& resize_halfXY() {$/;"	f	struct:cimg_library_suffixed::CImg
resize_object3d	.\CImg.h	/^    CImg<T> resize_object3d() {$/;"	f	struct:cimg_library_suffixed::CImg
resize_object3d	.\CImg.h	/^    CImg<T>& resize_object3d(const float sx, const float sy=-100, const float sz=-100) {$/;"	f	struct:cimg_library_suffixed::CImg
resize_tripleXY	.\CImg.h	/^    CImg<T>& resize_tripleXY() {$/;"	f	struct:cimg_library_suffixed::CImg
resolutions	.\CImg.h	/^      XRRScreenSize *resolutions;$/;"	m	struct:cimg_library_suffixed::cimg::X11_info
result	.\CImg.h	/^      double *result;$/;"	m	struct:cimg_library_suffixed::CImg::_cimg_math_parser
result_dim	.\CImg.h	/^      unsigned int mempos, mem_img_median, debug_indent, init_size, result_dim;$/;"	m	struct:cimg_library_suffixed::CImg::_cimg_math_parser
reverse	.\CImg.h	/^    CImgList<T>& reverse() {$/;"	f	struct:cimg_library_suffixed::CImgList
reverse_object3d	.\CImg.h	/^    CImgList<T>& reverse_object3d() {$/;"	f	struct:cimg_library_suffixed::CImgList
rol	.\CImg.h	/^    CImg<T>& rol(const CImg<t>& img) {$/;"	f	struct:cimg_library_suffixed::CImg
rol	.\CImg.h	/^    CImg<T>& rol(const char *const expression) {$/;"	f	struct:cimg_library_suffixed::CImg
rol	.\CImg.h	/^    CImg<T>& rol(const unsigned int n=1) {$/;"	f	struct:cimg_library_suffixed::CImg
rol	.\CImg.h	/^    inline T rol(const T& a, const unsigned int n=1) {$/;"	f	namespace:cimg_library_suffixed::cimg
rol	.\CImg.h	/^    inline double rol(const double a, const unsigned int n=1) {$/;"	f	namespace:cimg_library_suffixed::cimg
rol	.\CImg.h	/^    inline double rol(const long double a, const unsigned int n=1) {$/;"	f	namespace:cimg_library_suffixed::cimg
rol	.\CImg.h	/^    inline float rol(const float a, const unsigned int n=1) {$/;"	f	namespace:cimg_library_suffixed::cimg
ror	.\CImg.h	/^    CImg<T>& ror(const CImg<t>& img) {$/;"	f	struct:cimg_library_suffixed::CImg
ror	.\CImg.h	/^    CImg<T>& ror(const char *const expression) {$/;"	f	struct:cimg_library_suffixed::CImg
ror	.\CImg.h	/^    CImg<T>& ror(const unsigned int n=1) {$/;"	f	struct:cimg_library_suffixed::CImg
ror	.\CImg.h	/^    inline T ror(const T& a, const unsigned int n=1) {$/;"	f	namespace:cimg_library_suffixed::cimg
ror	.\CImg.h	/^    inline double ror(const double a, const unsigned int n=1) {$/;"	f	namespace:cimg_library_suffixed::cimg
ror	.\CImg.h	/^    inline double ror(const long double a, const unsigned int n=1) {$/;"	f	namespace:cimg_library_suffixed::cimg
ror	.\CImg.h	/^    inline float ror(const float a, const unsigned int n=1) {$/;"	f	namespace:cimg_library_suffixed::cimg
rotate	.\CImg.h	/^    CImg<T>& rotate(const float angle, const float cx, const float cy, const float zoom,$/;"	f	struct:cimg_library_suffixed::CImg
rotate	.\CImg.h	/^    CImg<T>& rotate(const float angle, const unsigned int interpolation=1, const unsigned int boundary=0) {$/;"	f	struct:cimg_library_suffixed::CImg
rotation_matrix	.\CImg.h	/^    static CImg<T> rotation_matrix(const float x, const float y, const float z, const float w,$/;"	f	struct:cimg_library_suffixed::CImg
round	.\CImg.h	/^    CImg<T>& round(const double y=1, const int rounding_type=0) {$/;"	f	struct:cimg_library_suffixed::CImg
round	.\CImg.h	/^    inline T round(const T& x, const double y=1, const int rounding_type=0) {$/;"	f	namespace:cimg_library_suffixed::cimg
row	.\CImg.h	/^    CImg<T>& row(const int y0) {$/;"	f	struct:cimg_library_suffixed::CImg
rows	.\CImg.h	/^    CImg<T>& rows(const int y0, const int y1) {$/;"	f	struct:cimg_library_suffixed::CImg
sRGBtoRGB	.\CImg.h	/^    CImg<T>& sRGBtoRGB() {$/;"	f	struct:cimg_library_suffixed::CImg
s_type	.\CImg.h	/^      CImg<charT> s_type(const unsigned int arg) const {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
save	.\CImg.h	/^    const CImg<T>& save(const char *const filename, const int number=-1, const unsigned int digits=6) const {$/;"	f	struct:cimg_library_suffixed::CImg
save	.\CImg.h	/^    const CImgList<T>& save(const char *const filename, const int number=-1, const unsigned int digits=6) const {$/;"	f	struct:cimg_library_suffixed::CImgList
save_analyze	.\CImg.h	/^    const CImg<T>& save_analyze(const char *const filename, const float *const voxel_size=0) const {$/;"	f	struct:cimg_library_suffixed::CImg
save_ascii	.\CImg.h	/^    const CImg<T>& save_ascii(const char *const filename) const {$/;"	f	struct:cimg_library_suffixed::CImg
save_ascii	.\CImg.h	/^    const CImg<T>& save_ascii(std::FILE *const file) const {$/;"	f	struct:cimg_library_suffixed::CImg
save_bmp	.\CImg.h	/^    const CImg<T>& save_bmp(const char *const filename) const {$/;"	f	struct:cimg_library_suffixed::CImg
save_bmp	.\CImg.h	/^    const CImg<T>& save_bmp(std::FILE *const file) const {$/;"	f	struct:cimg_library_suffixed::CImg
save_cimg	.\CImg.h	/^    const CImg<T>& save_cimg(const char *const filename, const bool is_compressed=false) const {$/;"	f	struct:cimg_library_suffixed::CImg
save_cimg	.\CImg.h	/^    const CImg<T>& save_cimg(const char *const filename,$/;"	f	struct:cimg_library_suffixed::CImg
save_cimg	.\CImg.h	/^    const CImg<T>& save_cimg(std::FILE *const file, const bool is_compressed=false) const {$/;"	f	struct:cimg_library_suffixed::CImg
save_cimg	.\CImg.h	/^    const CImg<T>& save_cimg(std::FILE *const file,$/;"	f	struct:cimg_library_suffixed::CImg
save_cimg	.\CImg.h	/^    const CImgList<T>& save_cimg(const char *const filename, const bool is_compressed=false) const {$/;"	f	struct:cimg_library_suffixed::CImgList
save_cimg	.\CImg.h	/^    const CImgList<T>& save_cimg(const char *const filename,$/;"	f	struct:cimg_library_suffixed::CImgList
save_cimg	.\CImg.h	/^    const CImgList<T>& save_cimg(std::FILE *const file,$/;"	f	struct:cimg_library_suffixed::CImgList
save_cimg	.\CImg.h	/^    const CImgList<T>& save_cimg(std::FILE *file, const bool is_compressed=false) const {$/;"	f	struct:cimg_library_suffixed::CImgList
save_cpp	.\CImg.h	/^    const CImg<T>& save_cpp(const char *const filename) const {$/;"	f	struct:cimg_library_suffixed::CImg
save_cpp	.\CImg.h	/^    const CImg<T>& save_cpp(std::FILE *const file) const {$/;"	f	struct:cimg_library_suffixed::CImg
save_dlm	.\CImg.h	/^    const CImg<T>& save_dlm(const char *const filename) const {$/;"	f	struct:cimg_library_suffixed::CImg
save_dlm	.\CImg.h	/^    const CImg<T>& save_dlm(std::FILE *const file) const {$/;"	f	struct:cimg_library_suffixed::CImg
save_empty_cimg	.\CImg.h	/^    static void save_empty_cimg(const char *const filename,$/;"	f	struct:cimg_library_suffixed::CImg
save_empty_cimg	.\CImg.h	/^    static void save_empty_cimg(const char *const filename,$/;"	f	struct:cimg_library_suffixed::CImgList
save_empty_cimg	.\CImg.h	/^    static void save_empty_cimg(std::FILE *const file,$/;"	f	struct:cimg_library_suffixed::CImg
save_empty_cimg	.\CImg.h	/^    static void save_empty_cimg(std::FILE *const file,$/;"	f	struct:cimg_library_suffixed::CImgList
save_exr	.\CImg.h	/^    const CImg<T>& save_exr(const char *const filename) const {$/;"	f	struct:cimg_library_suffixed::CImg
save_ffmpeg_external	.\CImg.h	/^    const CImg<T>& save_ffmpeg_external(const char *const filename, const unsigned int fps=25,$/;"	f	struct:cimg_library_suffixed::CImg
save_ffmpeg_external	.\CImg.h	/^    const CImgList<T>& save_ffmpeg_external(const char *const filename, const unsigned int fps=25,$/;"	f	struct:cimg_library_suffixed::CImgList
save_gif_external	.\CImg.h	/^    const CImgList<T>& save_gif_external(const char *const filename, const float fps=25,$/;"	f	struct:cimg_library_suffixed::CImgList
save_graphicsmagick_external	.\CImg.h	/^    const CImg<T>& save_graphicsmagick_external(const char *const filename, const unsigned int quality=100) const {$/;"	f	struct:cimg_library_suffixed::CImg
save_gzip_external	.\CImg.h	/^    const CImg<T>& save_gzip_external(const char *const filename) const {$/;"	f	struct:cimg_library_suffixed::CImg
save_gzip_external	.\CImg.h	/^    const CImgList<T>& save_gzip_external(const char *const filename) const {$/;"	f	struct:cimg_library_suffixed::CImgList
save_imagemagick_external	.\CImg.h	/^    const CImg<T>& save_imagemagick_external(const char *const filename, const unsigned int quality=100) const {$/;"	f	struct:cimg_library_suffixed::CImg
save_inr	.\CImg.h	/^    const CImg<T>& save_inr(const char *const filename, const float *const voxel_size=0) const {$/;"	f	struct:cimg_library_suffixed::CImg
save_inr	.\CImg.h	/^    const CImg<T>& save_inr(std::FILE *const file, const float *const voxel_size=0) const {$/;"	f	struct:cimg_library_suffixed::CImg
save_jpeg	.\CImg.h	/^    const CImg<T>& save_jpeg(const char *const filename, const unsigned int quality=100) const {$/;"	f	struct:cimg_library_suffixed::CImg
save_jpeg	.\CImg.h	/^    const CImg<T>& save_jpeg(std::FILE *const file, const unsigned int quality=100) const {$/;"	f	struct:cimg_library_suffixed::CImg
save_magick	.\CImg.h	/^    const CImg<T>& save_magick(const char *const filename, const unsigned int bytes_per_pixel=0) const {$/;"	f	struct:cimg_library_suffixed::CImg
save_medcon_external	.\CImg.h	/^    const CImg<T>& save_medcon_external(const char *const filename) const {$/;"	f	struct:cimg_library_suffixed::CImg
save_minc2	.\CImg.h	/^    const CImg<T>& save_minc2(const char *const filename,$/;"	f	struct:cimg_library_suffixed::CImg
save_off	.\CImg.h	/^    const CImg<T>& save_off(const CImgList<tf>& primitives, const CImgList<tc>& colors,$/;"	f	struct:cimg_library_suffixed::CImg
save_other	.\CImg.h	/^    const CImg<T>& save_other(const char *const filename, const unsigned int quality=100) const {$/;"	f	struct:cimg_library_suffixed::CImg
save_pandore	.\CImg.h	/^    const CImg<T>& save_pandore(const char *const filename, const unsigned int colorspace=0) const {$/;"	f	struct:cimg_library_suffixed::CImg
save_pandore	.\CImg.h	/^    const CImg<T>& save_pandore(std::FILE *const file, const unsigned int colorspace=0) const {$/;"	f	struct:cimg_library_suffixed::CImg
save_pfm	.\CImg.h	/^    const CImg<T>& save_pfm(const char *const filename) const {$/;"	f	struct:cimg_library_suffixed::CImg
save_pfm	.\CImg.h	/^    const CImg<T>& save_pfm(std::FILE *const file) const {$/;"	f	struct:cimg_library_suffixed::CImg
save_png	.\CImg.h	/^    const CImg<T>& save_png(const char *const filename, const unsigned int bytes_per_pixel=0) const {$/;"	f	struct:cimg_library_suffixed::CImg
save_png	.\CImg.h	/^    const CImg<T>& save_png(std::FILE *const file, const unsigned int bytes_per_pixel=0) const {$/;"	f	struct:cimg_library_suffixed::CImg
save_pnk	.\CImg.h	/^    const CImg<T>& save_pnk(const char *const filename) const {$/;"	f	struct:cimg_library_suffixed::CImg
save_pnk	.\CImg.h	/^    const CImg<T>& save_pnk(std::FILE *const file) const {$/;"	f	struct:cimg_library_suffixed::CImg
save_pnm	.\CImg.h	/^    const CImg<T>& save_pnm(const char *const filename, const unsigned int bytes_per_pixel=0) const {$/;"	f	struct:cimg_library_suffixed::CImg
save_pnm	.\CImg.h	/^    const CImg<T>& save_pnm(std::FILE *const file, const unsigned int bytes_per_pixel=0) const {$/;"	f	struct:cimg_library_suffixed::CImg
save_raw	.\CImg.h	/^    const CImg<T>& save_raw(const char *const filename, const bool is_multiplexed=false) const {$/;"	f	struct:cimg_library_suffixed::CImg
save_raw	.\CImg.h	/^    const CImg<T>& save_raw(std::FILE *const file, const bool is_multiplexed=false) const {$/;"	f	struct:cimg_library_suffixed::CImg
save_rgb	.\CImg.h	/^    const CImg<T>& save_rgb(const char *const filename) const {$/;"	f	struct:cimg_library_suffixed::CImg
save_rgb	.\CImg.h	/^    const CImg<T>& save_rgb(std::FILE *const file) const {$/;"	f	struct:cimg_library_suffixed::CImg
save_rgba	.\CImg.h	/^    const CImg<T>& save_rgba(const char *const filename) const {$/;"	f	struct:cimg_library_suffixed::CImg
save_rgba	.\CImg.h	/^    const CImg<T>& save_rgba(std::FILE *const file) const {$/;"	f	struct:cimg_library_suffixed::CImg
save_tiff	.\CImg.h	/^    const CImg<T>& save_tiff(const char *const filename, const unsigned int compression_type=0,$/;"	f	struct:cimg_library_suffixed::CImg
save_tiff	.\CImg.h	/^    const CImgList<T>& save_tiff(const char *const filename, const unsigned int compression_type=0,$/;"	f	struct:cimg_library_suffixed::CImgList
save_video	.\CImg.h	/^    const CImg<T>& save_video(const char *const filename, const unsigned int fps=25,$/;"	f	struct:cimg_library_suffixed::CImg
save_video	.\CImg.h	/^    const CImgList<T>& save_video(const char *const filename, const unsigned int fps=25,$/;"	f	struct:cimg_library_suffixed::CImgList
save_yuv	.\CImg.h	/^    const CImg<T>& save_yuv(const char *const filename, const bool is_rgb=true) const {$/;"	f	struct:cimg_library_suffixed::CImg
save_yuv	.\CImg.h	/^    const CImg<T>& save_yuv(std::FILE *const file, const bool is_rgb=true) const {$/;"	f	struct:cimg_library_suffixed::CImg
save_yuv	.\CImg.h	/^    const CImgList<T>& save_yuv(const char *const filename=0, const bool is_rgb=true) const {$/;"	f	struct:cimg_library_suffixed::CImgList
save_yuv	.\CImg.h	/^    const CImgList<T>& save_yuv(std::FILE *const file, const bool is_rgb=true) const {$/;"	f	struct:cimg_library_suffixed::CImgList
scalar	.\CImg.h	/^      unsigned int scalar() { \/\/ Insert new scalar in memory.$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
scalar0	.\CImg.h	/^      unsigned int scalar0(const mp_func op) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
scalar1	.\CImg.h	/^      unsigned int scalar1(const mp_func op, const unsigned int arg1) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
scalar2	.\CImg.h	/^      unsigned int scalar2(const mp_func op, const unsigned int arg1, const unsigned int arg2) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
scalar3	.\CImg.h	/^      unsigned int scalar3(const mp_func op,$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
scalar6	.\CImg.h	/^      unsigned int scalar6(const mp_func op,$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
scalar7	.\CImg.h	/^      unsigned int scalar7(const mp_func op,$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
screen_height	.\CImg.h	/^    static int screen_height() {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
screen_width	.\CImg.h	/^    static int screen_width() {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
select	.\CImg.h	/^    CImg<T>& select(CImgDisplay &disp,$/;"	f	struct:cimg_library_suffixed::CImg
select	.\CImg.h	/^    CImg<T>& select(const char *const title,$/;"	f	struct:cimg_library_suffixed::CImg
sequence	.\CImg.h	/^    CImg<T>& sequence(const T& a0, const T& a1) {$/;"	f	struct:cimg_library_suffixed::CImg
sequence	.\CImg.h	/^    static CImg<T> sequence(const unsigned int N, const T& a0, const T& a1) {$/;"	f	struct:cimg_library_suffixed::CImg
set_button	.\CImg.h	/^    CImgDisplay& set_button() {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
set_button	.\CImg.h	/^    CImgDisplay& set_button(const unsigned int button, const bool is_pressed=true) {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
set_fullscreen	.\CImg.h	/^    CImgDisplay& set_fullscreen(const bool is_fullscreen, const bool force_redraw=true) {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
set_key	.\CImg.h	/^    CImgDisplay& set_key() {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
set_key	.\CImg.h	/^    CImgDisplay& set_key(const unsigned int keycode, const bool is_pressed=true) {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
set_linear_atX	.\CImg.h	/^    CImg<T>& set_linear_atX(const T& value, const float fx, const int y=0, const int z=0, const int c=0,$/;"	f	struct:cimg_library_suffixed::CImg
set_linear_atXY	.\CImg.h	/^    CImg<T>& set_linear_atXY(const T& value, const float fx, const float fy=0, const int z=0, const int c=0,$/;"	f	struct:cimg_library_suffixed::CImg
set_linear_atXYZ	.\CImg.h	/^    CImg<T>& set_linear_atXYZ(const T& value, const float fx, const float fy=0, const float fz=0, const int c=0,$/;"	f	struct:cimg_library_suffixed::CImg
set_matrix_at	.\CImg.h	/^    CImg<T>& set_matrix_at(const CImg<t>& mat, const unsigned int x=0, const unsigned int y=0, const unsigned int z=0) {$/;"	f	struct:cimg_library_suffixed::CImg
set_mouse	.\CImg.h	/^    CImgDisplay& set_mouse(const int pos_x, const int pos_y) {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
set_mouse	.\CImg.h	/^    CImgDisplay& set_mouse(const int posx, const int posy) {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
set_normalization	.\CImg.h	/^    CImgDisplay& set_normalization(const unsigned int normalization) {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
set_tensor_at	.\CImg.h	/^    CImg<T>& set_tensor_at(const CImg<t>& ten, const unsigned int x=0, const unsigned int y=0, const unsigned int z=0) {$/;"	f	struct:cimg_library_suffixed::CImg
set_title	.\CImg.h	/^    CImgDisplay& set_title(const char *const format, ...) {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
set_variable_vector	.\CImg.h	/^      void set_variable_vector(const unsigned int arg) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
set_vector_at	.\CImg.h	/^    CImg<T>& set_vector_at(const CImg<t>& vec, const unsigned int x, const unsigned int y=0, const unsigned int z=0) {$/;"	f	struct:cimg_library_suffixed::CImg
set_wheel	.\CImg.h	/^    CImgDisplay& set_wheel() {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
set_wheel	.\CImg.h	/^    CImgDisplay& set_wheel(const int amplitude) {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
setjmp_buffer	.\CImg.h	/^      jmp_buf setjmp_buffer;$/;"	m	struct:cimg_library_suffixed::CImg::_cimg_error_mgr
sgels	.\CImg.h	/^    inline void sgels(char & TRANS, int &M, int &N, int &NRHS, T* lapA, int &LDA,$/;"	f	namespace:cimg_library_suffixed::cimg
sgels	.\CImg.h	/^    inline void sgels(char & TRANS, int &M, int &N, int &NRHS, float* lapA, int &LDA,$/;"	f	namespace:cimg_library_suffixed::cimg
sharpen	.\CImg.h	/^    CImg<T>& sharpen(const float amplitude, const bool sharpen_type=false, const float edge=1,$/;"	f	struct:cimg_library_suffixed::CImg
shift	.\CImg.h	/^    CImg<T>& shift(const int delta_x, const int delta_y=0, const int delta_z=0, const int delta_c=0,$/;"	f	struct:cimg_library_suffixed::CImg
shift_object3d	.\CImg.h	/^    CImg<T>& shift_object3d() {$/;"	f	struct:cimg_library_suffixed::CImg
shift_object3d	.\CImg.h	/^    CImg<T>& shift_object3d(const float tx, const float ty=0, const float tz=0) {$/;"	f	struct:cimg_library_suffixed::CImg
shortT	.\CImg.h	/^    typedef typename cimg::last<T,short>::type shortT;$/;"	t	struct:cimg_library_suffixed::CImg
shortT	.\CImg.h	/^    typedef typename cimg::last<T,short>::type shortT;$/;"	t	struct:cimg_library_suffixed::CImgList
show	.\CImg.h	/^    CImgDisplay& show() {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
show_mouse	.\CImg.h	/^    CImgDisplay& show_mouse() {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
sign	.\CImg.h	/^    CImg<T>& sign() {$/;"	f	struct:cimg_library_suffixed::CImg
sign	.\CImg.h	/^    inline T sign(const T& x) {$/;"	f	namespace:cimg_library_suffixed::cimg
sign	.\CImg.h	/^  inline CImg<_cimg_Tfloat> sign(const CImg<T>& instance) {$/;"	f	namespace:cimg_library_suffixed
sin	.\CImg.h	/^    CImg<T>& sin() {$/;"	f	struct:cimg_library_suffixed::CImg
sin	.\CImg.h	/^  inline CImg<_cimg_Tfloat> sin(const CImg<T>& instance) {$/;"	f	namespace:cimg_library_suffixed
sinc	.\CImg.h	/^    CImg<T>& sinc() {$/;"	f	struct:cimg_library_suffixed::CImg
sinc	.\CImg.h	/^    inline double sinc(const double x) {$/;"	f	namespace:cimg_library_suffixed::cimg
sinc	.\CImg.h	/^  inline CImg<_cimg_Tfloat> sinc(const CImg<T>& instance) {$/;"	f	namespace:cimg_library_suffixed
sinh	.\CImg.h	/^    CImg<T>& sinh() {$/;"	f	struct:cimg_library_suffixed::CImg
sinh	.\CImg.h	/^  inline CImg<_cimg_Tfloat> sinh(const CImg<T>& instance) {$/;"	f	namespace:cimg_library_suffixed
size	.\CImg.h	/^    unsigned int size() const {$/;"	f	struct:cimg_library_suffixed::CImgList
size	.\CImg.h	/^    unsigned long size() const {$/;"	f	struct:cimg_library_suffixed::CImg
sleep	.\CImg.h	/^    inline void sleep(const unsigned int milliseconds) {$/;"	f	namespace:cimg_library_suffixed::cimg
slice	.\CImg.h	/^    CImg<T>& slice(const int z0) {$/;"	f	struct:cimg_library_suffixed::CImg
slices	.\CImg.h	/^    CImg<T>& slices(const int z0, const int z1) {$/;"	f	struct:cimg_library_suffixed::CImg
snapshot	.\CImg.h	/^    const CImgDisplay& snapshot(CImg<T>& img) const {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
solve	.\CImg.h	/^    CImg<T>& solve(const CImg<t>& A) {$/;"	f	struct:cimg_library_suffixed::CImg
solve_tridiagonal	.\CImg.h	/^    CImg<T>& solve_tridiagonal(const CImg<t>& A) {$/;"	f	struct:cimg_library_suffixed::CImg
sort	.\CImg.h	/^    CImg<T>& sort(CImg<t>& permutations, const bool is_increasing=true) {$/;"	f	struct:cimg_library_suffixed::CImg
sort	.\CImg.h	/^    CImg<T>& sort(const bool is_increasing=true, const char axis=0) {$/;"	f	struct:cimg_library_suffixed::CImg
spectrum	.\CImg.h	/^    int spectrum() const {$/;"	f	struct:cimg_library_suffixed::CImg
sphere3d	.\CImg.h	/^    static CImg<floatT> sphere3d(CImgList<tf>& primitives,$/;"	f	struct:cimg_library_suffixed::CImg
split	.\CImg.h	/^    CImgList<T>& split(const char axis, const int nb=-1) {$/;"	f	struct:cimg_library_suffixed::CImgList
split_filename	.\CImg.h	/^    inline const char *split_filename(const char *const filename, char *const body=0) {$/;"	f	namespace:cimg_library_suffixed::cimg
sqr	.\CImg.h	/^    CImg<T>& sqr() {$/;"	f	struct:cimg_library_suffixed::CImg
sqr	.\CImg.h	/^    inline T sqr(const T& val) {$/;"	f	namespace:cimg_library_suffixed::cimg
sqr	.\CImg.h	/^  inline CImg<_cimg_Tfloat> sqr(const CImg<T>& instance) {$/;"	f	namespace:cimg_library_suffixed
sqrt	.\CImg.h	/^    CImg<T>& sqrt() {$/;"	f	struct:cimg_library_suffixed::CImg
sqrt	.\CImg.h	/^  inline CImg<_cimg_Tfloat> sqrt(const CImg<T>& instance) {$/;"	f	namespace:cimg_library_suffixed
srand	.\CImg.h	/^    inline void srand() {$/;"	f	namespace:cimg_library_suffixed::cimg
srand	.\CImg.h	/^    inline void srand(const unsigned int seed) {$/;"	f	namespace:cimg_library_suffixed::cimg
stats	.\CImg.h	/^    CImg<T>& stats(const unsigned int variance_method=1) {$/;"	f	struct:cimg_library_suffixed::CImg
strbuffersize	.\CImg.h	/^  inline const char *strbuffersize(const unsigned long size) {$/;"	f	namespace:cimg_library_suffixed::cimg
strcasecmp	.\CImg.h	/^    inline int strcasecmp(const char *const str1, const char *const str2) {$/;"	f	namespace:cimg_library_suffixed::cimg
streamline	.\CImg.h	/^    static CImg<floatT> streamline(const char *const expression,$/;"	f	struct:cimg_library_suffixed::CImg
streamline	.\CImg.h	/^    static CImg<floatT> streamline(const tfunc& func,$/;"	f	struct:cimg_library_suffixed::CImg
strellipsize	.\CImg.h	/^    inline char *strellipsize(char *const str, const unsigned int l=64,$/;"	f	namespace:cimg_library_suffixed::cimg
strellipsize	.\CImg.h	/^    inline char *strellipsize(const char *const str, char *const res, const unsigned int l=64,$/;"	f	namespace:cimg_library_suffixed::cimg
string	.\CImg.h	/^      static const char* string() { static const char *const s = "bool"; return s; }$/;"	f	struct:cimg_library_suffixed::cimg::type
string	.\CImg.h	/^      static const char* string() { static const char *const s = "char"; return s; }$/;"	f	struct:cimg_library_suffixed::cimg::type
string	.\CImg.h	/^      static const char* string() { static const char *const s = "double"; return s; }$/;"	f	struct:cimg_library_suffixed::cimg::type
string	.\CImg.h	/^      static const char* string() { static const char *const s = "float"; return s; }$/;"	f	struct:cimg_library_suffixed::cimg::type
string	.\CImg.h	/^      static const char* string() { static const char *const s = "int"; return s; }$/;"	f	struct:cimg_library_suffixed::cimg::type
string	.\CImg.h	/^      static const char* string() { static const char *const s = "long double"; return s; }$/;"	f	struct:cimg_library_suffixed::cimg::type
string	.\CImg.h	/^      static const char* string() { static const char *const s = "long"; return s; }$/;"	f	struct:cimg_library_suffixed::cimg::type
string	.\CImg.h	/^      static const char* string() { static const char *const s = "short"; return s; }$/;"	f	struct:cimg_library_suffixed::cimg::type
string	.\CImg.h	/^      static const char* string() { static const char *const s = "signed char"; return s; }$/;"	f	struct:cimg_library_suffixed::cimg::type
string	.\CImg.h	/^      static const char* string() { static const char *const s = "unsigned char"; return s; }$/;"	f	struct:cimg_library_suffixed::cimg::type
string	.\CImg.h	/^      static const char* string() { static const char *const s = "unsigned int"; return s; }$/;"	f	struct:cimg_library_suffixed::cimg::type
string	.\CImg.h	/^      static const char* string() { static const char *const s = "unsigned long"; return s; }$/;"	f	struct:cimg_library_suffixed::cimg::type
string	.\CImg.h	/^      static const char* string() { static const char *const s = "unsigned short"; return s; }$/;"	f	struct:cimg_library_suffixed::cimg::type
string	.\CImg.h	/^      static const char* string() {$/;"	f	struct:cimg_library_suffixed::cimg::type
string	.\CImg.h	/^    static CImg<T> string(const char *const str, const bool is_last_zero=true, const bool is_shared=false) {$/;"	f	struct:cimg_library_suffixed::CImg
strncasecmp	.\CImg.h	/^    inline int strncasecmp(const char *const str1, const char *const str2, const int l) {$/;"	f	namespace:cimg_library_suffixed::cimg
stros	.\CImg.h	/^    inline const char *stros() {$/;"	f	namespace:cimg_library_suffixed::cimg
strpare	.\CImg.h	/^    inline bool strpare(char *const str, const char delimiter=' ',$/;"	f	namespace:cimg_library_suffixed::cimg
structure_tensors	.\CImg.h	/^    CImg<T>& structure_tensors(const unsigned int scheme=2) {$/;"	f	struct:cimg_library_suffixed::CImg
strunescape	.\CImg.h	/^    inline void strunescape(char *const str) {$/;"	f	namespace:cimg_library_suffixed::cimg
strwindows_reserved	.\CImg.h	/^    inline void strwindows_reserved(char *const str, const char c='_') {$/;"	f	namespace:cimg_library_suffixed::cimg
sum	.\CImg.h	/^    double sum() const {$/;"	f	struct:cimg_library_suffixed::CImg
superset	.\CImg.h	/^    template<> struct superset<bool,char> { typedef char type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<bool,double> { typedef double type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<bool,float> { typedef float type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<bool,int> { typedef int type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<bool,long> { typedef long type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<bool,short> { typedef short type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<bool,signed char> { typedef signed char type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<bool,unsigned char> { typedef unsigned char type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<bool,unsigned int> { typedef unsigned int type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<bool,unsigned long> { typedef unsigned long type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<bool,unsigned short> { typedef unsigned short type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<char,double> { typedef double type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<char,float> { typedef float type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<char,int> { typedef int type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<char,long> { typedef long type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<char,short> { typedef short type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<char,signed char> { typedef short type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<char,unsigned char> { typedef short type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<char,unsigned int> { typedef long type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<char,unsigned long> { typedef long type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<char,unsigned short> { typedef int type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<float,double> { typedef double type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<int,double> { typedef double type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<int,float> { typedef float type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<int,long> { typedef long type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<int,unsigned int> { typedef long type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<int,unsigned long> { typedef long type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<long,double> { typedef double type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<long,float> { typedef double type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<short,double> { typedef double type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<short,float> { typedef float type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<short,int> { typedef int type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<short,long> { typedef long type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<short,unsigned int> { typedef long type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<short,unsigned long> { typedef long type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<short,unsigned short> { typedef int type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<signed char,char> { typedef short type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<signed char,double> { typedef double type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<signed char,float> { typedef float type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<signed char,int> { typedef int type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<signed char,long> { typedef long type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<signed char,short> { typedef short type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<signed char,unsigned char> { typedef short type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<signed char,unsigned int> { typedef long type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<signed char,unsigned long> { typedef long type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<signed char,unsigned short> { typedef int type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<unsigned char,char> { typedef short type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<unsigned char,double> { typedef double type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<unsigned char,float> { typedef float type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<unsigned char,int> { typedef int type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<unsigned char,long> { typedef long type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<unsigned char,short> { typedef short type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<unsigned char,signed char> { typedef short type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<unsigned char,unsigned int> { typedef unsigned int type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<unsigned char,unsigned long> { typedef unsigned long type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<unsigned char,unsigned short> { typedef unsigned short type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<unsigned int,char> { typedef long type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<unsigned int,double> { typedef double type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<unsigned int,float> { typedef float type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<unsigned int,int> { typedef long type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<unsigned int,long> { typedef long type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<unsigned int,short> { typedef long type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<unsigned int,signed char> { typedef long type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<unsigned int,unsigned long> { typedef unsigned long type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<unsigned long,char> { typedef long type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<unsigned long,double> { typedef double type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<unsigned long,float> { typedef double type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<unsigned long,int> { typedef long type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<unsigned long,long> { typedef long type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<unsigned long,short> { typedef long type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<unsigned long,signed char> { typedef long type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<unsigned short,char> { typedef int type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<unsigned short,double> { typedef double type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<unsigned short,float> { typedef float type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<unsigned short,int> { typedef int type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<unsigned short,long> { typedef long type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<unsigned short,short> { typedef int type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<unsigned short,signed char> { typedef int type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<unsigned short,unsigned int> { typedef unsigned int type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<> struct superset<unsigned short,unsigned long> { typedef unsigned long type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset	.\CImg.h	/^    template<typename T, typename t> struct superset { typedef T type; };$/;"	s	namespace:cimg_library_suffixed::cimg
superset2	.\CImg.h	/^    template<typename t1, typename t2, typename t3> struct superset2 {$/;"	s	namespace:cimg_library_suffixed::cimg
superset3	.\CImg.h	/^    template<typename t1, typename t2, typename t3, typename t4> struct superset3 {$/;"	s	namespace:cimg_library_suffixed::cimg
swap	.\CImg.h	/^    CImg<T>& swap(CImg<T>& img) {$/;"	f	struct:cimg_library_suffixed::CImg
swap	.\CImg.h	/^    CImgList<T>& swap(CImgList<T>& list) {$/;"	f	struct:cimg_library_suffixed::CImgList
swap	.\CImg.h	/^    inline void swap(T& a, T& b) { T t = a; a = b; b = t; }$/;"	f	namespace:cimg_library_suffixed::cimg
swap	.\CImg.h	/^    inline void swap(T1& a1, T1& b1, T2& a2, T2& b2) {$/;"	f	namespace:cimg_library_suffixed::cimg
swap	.\CImg.h	/^    inline void swap(T1& a1, T1& b1, T2& a2, T2& b2, T3& a3, T3& b3) {$/;"	f	namespace:cimg_library_suffixed::cimg
swap	.\CImg.h	/^    inline void swap(T1& a1, T1& b1, T2& a2, T2& b2, T3& a3, T3& b3, T4& a4, T4& b4) {$/;"	f	namespace:cimg_library_suffixed::cimg
swap	.\CImg.h	/^    inline void swap(T1& a1, T1& b1, T2& a2, T2& b2, T3& a3, T3& b3, T4& a4, T4& b4, T5& a5, T5& b5) {$/;"	f	namespace:cimg_library_suffixed::cimg
swap	.\CImg.h	/^    inline void swap(T1& a1, T1& b1, T2& a2, T2& b2, T3& a3, T3& b3, T4& a4, T4& b4, T5& a5, T5& b5, T6& a6, T6& b6) {$/;"	f	namespace:cimg_library_suffixed::cimg
swap	.\CImg.h	/^    inline void swap(T1& a1, T1& b1, T2& a2, T2& b2, T3& a3, T3& b3, T4& a4, T4& b4, T5& a5, T5& b5, T6& a6, T6& b6,$/;"	f	namespace:cimg_library_suffixed::cimg
syev	.\CImg.h	/^    inline void syev(char &JOB, char &UPLO, int &N, T *lapA, T *lapW, T *WORK, int &LWORK, int &INFO) {$/;"	f	namespace:cimg_library_suffixed::cimg
syev	.\CImg.h	/^    inline void syev(char &JOB, char &UPLO, int &N, float *lapA, float *lapW, float *WORK, int &LWORK, int &INFO) {$/;"	f	namespace:cimg_library_suffixed::cimg
symmetric_eigen	.\CImg.h	/^    const CImg<T>& symmetric_eigen(CImg<t>& val, CImg<t>& vec) const {$/;"	f	struct:cimg_library_suffixed::CImg
system	.\CImg.h	/^    inline int system(const char *const command, const char *const module_name=0) {$/;"	f	namespace:cimg_library_suffixed::cimg
t_black	.\CImg.h	/^    static const char t_black[] = { 0x1b, '[', '0', ';', '3', '0', ';', '5', '9', 'm', 0 };$/;"	m	namespace:cimg_library_suffixed::cimg
t_blue	.\CImg.h	/^    static const char t_blue[] = { 0x1b, '[', '0', ';', '3', '4', ';', '5', '9', 'm', 0 };$/;"	m	namespace:cimg_library_suffixed::cimg
t_bold	.\CImg.h	/^    static const char t_bold[] = { 0x1b, '[', '1', 'm', 0 };$/;"	m	namespace:cimg_library_suffixed::cimg
t_cyan	.\CImg.h	/^    static const char t_cyan[] = { 0x1b, '[', '0', ';', '3', '6', ';', '5', '9', 'm', 0 };$/;"	m	namespace:cimg_library_suffixed::cimg
t_green	.\CImg.h	/^    static const char t_green[] = { 0x1b, '[', '0', ';', '3', '2', ';', '5', '9', 'm', 0 };$/;"	m	namespace:cimg_library_suffixed::cimg
t_magenta	.\CImg.h	/^    static const char t_magenta[] = { 0x1b, '[', '0', ';', '3', '5', ';', '5', '9', 'm', 0 };$/;"	m	namespace:cimg_library_suffixed::cimg
t_normal	.\CImg.h	/^    static const char t_normal[] = { 0x1b, '[', '0', ';', '0', ';', '0', 'm', 0 };$/;"	m	namespace:cimg_library_suffixed::cimg
t_red	.\CImg.h	/^    static const char t_red[] = { 0x1b, '[', '0', ';', '3', '1', ';', '5', '9', 'm', 0 };$/;"	m	namespace:cimg_library_suffixed::cimg
t_underscore	.\CImg.h	/^    static const char t_underscore[] = { 0x1b, '[', '4', 'm', 0 };$/;"	m	namespace:cimg_library_suffixed::cimg
t_white	.\CImg.h	/^    static const char t_white[] = { 0x1b, '[', '0', ';', '3', '7', ';', '5', '9', 'm', 0 };$/;"	m	namespace:cimg_library_suffixed::cimg
t_yellow	.\CImg.h	/^    static const char t_yellow[] = { 0x1b, '[', '0', ';', '3', '3', ';', '5', '9', 'm', 0 };$/;"	m	namespace:cimg_library_suffixed::cimg
tan	.\CImg.h	/^    CImg<T>& tan() {$/;"	f	struct:cimg_library_suffixed::CImg
tan	.\CImg.h	/^  inline CImg<_cimg_Tfloat> tan(const CImg<T>& instance) {$/;"	f	namespace:cimg_library_suffixed
tanh	.\CImg.h	/^    CImg<T>& tanh() {$/;"	f	struct:cimg_library_suffixed::CImg
tanh	.\CImg.h	/^  inline CImg<_cimg_Tfloat> tanh(const CImg<T>& instance) {$/;"	f	namespace:cimg_library_suffixed
temporary	.\CImg.h	/^    inline T& temporary(const T&) {$/;"	f	namespace:cimg_library_suffixed::cimg
temporary_path	.\CImg.h	/^  inline const char* temporary_path(const char *const user_path, const bool reinit_path) {$/;"	f	namespace:cimg_library_suffixed::cimg
tensor	.\CImg.h	/^    CImg<T>& tensor() {$/;"	f	struct:cimg_library_suffixed::CImg
tensor	.\CImg.h	/^    static CImg<T> tensor(const T& a0) {$/;"	f	struct:cimg_library_suffixed::CImg
tensor	.\CImg.h	/^    static CImg<T> tensor(const T& a0, const T& a1, const T& a2) {$/;"	f	struct:cimg_library_suffixed::CImg
tensor	.\CImg.h	/^    static CImg<T> tensor(const T& a0, const T& a1, const T& a2, const T& a3, const T& a4, const T& a5) {$/;"	f	struct:cimg_library_suffixed::CImg
texturize_object3d	.\CImg.h	/^    const CImg<T>& texturize_object3d(CImgList<tp>& primitives, CImgList<tc>& colors,$/;"	f	struct:cimg_library_suffixed::CImg
threshold	.\CImg.h	/^    CImg<T>& threshold(const T& value, const bool soft_threshold=false, const bool strict_threshold=false) {$/;"	f	struct:cimg_library_suffixed::CImg
tic	.\CImg.h	/^    inline unsigned long tic() {$/;"	f	namespace:cimg_library_suffixed::cimg
tictoc	.\CImg.h	/^  inline unsigned long tictoc(const bool is_tic) {$/;"	f	namespace:cimg_library_suffixed::cimg
time	.\CImg.h	/^    inline unsigned long time() {$/;"	f	namespace:cimg_library_suffixed::cimg
title	.\CImg.h	/^    const char *title() const {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
toc	.\CImg.h	/^    inline unsigned long toc() {$/;"	f	namespace:cimg_library_suffixed::cimg
toggle_fullscreen	.\CImg.h	/^    CImgDisplay& toggle_fullscreen(const bool force_redraw=true) {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
torus3d	.\CImg.h	/^    static CImg<floatT> torus3d(CImgList<tf>& primitives,$/;"	f	struct:cimg_library_suffixed::CImg
trace	.\CImg.h	/^    double trace() const {$/;"	f	struct:cimg_library_suffixed::CImg
transpose	.\CImg.h	/^    CImg<T>& transpose() {$/;"	f	struct:cimg_library_suffixed::CImg
transpose	.\CImg.h	/^  inline CImg<T> transpose(const CImg<T>& instance) {$/;"	f	namespace:cimg_library_suffixed
trylock	.\CImg.h	/^      int trylock(const unsigned int) { return 0; }$/;"	f	struct:cimg_library_suffixed::cimg::Mutex_info
type	.\CImg.h	/^      typedef typename superset<t1, typename superset2<t2,t3,t4>::type>::type type;$/;"	t	struct:cimg_library_suffixed::cimg::superset3
type	.\CImg.h	/^      typedef typename superset<t1, typename superset<t2,t3>::type>::type type;$/;"	t	struct:cimg_library_suffixed::cimg::superset2
type	.\CImg.h	/^    template<> struct superset<bool,char> { typedef char type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<bool,double> { typedef double type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<bool,float> { typedef float type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<bool,int> { typedef int type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<bool,long> { typedef long type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<bool,short> { typedef short type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<bool,signed char> { typedef signed char type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<bool,unsigned char> { typedef unsigned char type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<bool,unsigned int> { typedef unsigned int type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<bool,unsigned long> { typedef unsigned long type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<bool,unsigned short> { typedef unsigned short type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<char,double> { typedef double type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<char,float> { typedef float type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<char,int> { typedef int type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<char,long> { typedef long type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<char,short> { typedef short type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<char,signed char> { typedef short type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<char,unsigned char> { typedef short type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<char,unsigned int> { typedef long type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<char,unsigned long> { typedef long type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<char,unsigned short> { typedef int type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<float,double> { typedef double type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<int,double> { typedef double type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<int,float> { typedef float type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<int,long> { typedef long type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<int,unsigned int> { typedef long type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<int,unsigned long> { typedef long type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<long,double> { typedef double type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<long,float> { typedef double type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<short,double> { typedef double type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<short,float> { typedef float type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<short,int> { typedef int type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<short,long> { typedef long type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<short,unsigned int> { typedef long type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<short,unsigned long> { typedef long type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<short,unsigned short> { typedef int type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<signed char,char> { typedef short type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<signed char,double> { typedef double type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<signed char,float> { typedef float type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<signed char,int> { typedef int type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<signed char,long> { typedef long type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<signed char,short> { typedef short type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<signed char,unsigned char> { typedef short type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<signed char,unsigned int> { typedef long type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<signed char,unsigned long> { typedef long type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<signed char,unsigned short> { typedef int type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<unsigned char,char> { typedef short type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<unsigned char,double> { typedef double type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<unsigned char,float> { typedef float type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<unsigned char,int> { typedef int type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<unsigned char,long> { typedef long type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<unsigned char,short> { typedef short type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<unsigned char,signed char> { typedef short type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<unsigned char,unsigned int> { typedef unsigned int type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<unsigned char,unsigned long> { typedef unsigned long type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<unsigned char,unsigned short> { typedef unsigned short type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<unsigned int,char> { typedef long type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<unsigned int,double> { typedef double type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<unsigned int,float> { typedef float type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<unsigned int,int> { typedef long type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<unsigned int,long> { typedef long type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<unsigned int,short> { typedef long type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<unsigned int,signed char> { typedef long type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<unsigned int,unsigned long> { typedef unsigned long type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<unsigned long,char> { typedef long type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<unsigned long,double> { typedef double type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<unsigned long,float> { typedef double type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<unsigned long,int> { typedef long type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<unsigned long,long> { typedef long type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<unsigned long,short> { typedef long type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<unsigned long,signed char> { typedef long type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<unsigned short,char> { typedef int type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<unsigned short,double> { typedef double type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<unsigned short,float> { typedef float type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<unsigned short,int> { typedef int type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<unsigned short,long> { typedef long type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<unsigned short,short> { typedef int type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<unsigned short,signed char> { typedef int type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<unsigned short,unsigned int> { typedef unsigned int type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct superset<unsigned short,unsigned long> { typedef unsigned long type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<> struct type<bool> {$/;"	s	namespace:cimg_library_suffixed::cimg
type	.\CImg.h	/^    template<> struct type<char> {$/;"	s	namespace:cimg_library_suffixed::cimg
type	.\CImg.h	/^    template<> struct type<double> {$/;"	s	namespace:cimg_library_suffixed::cimg
type	.\CImg.h	/^    template<> struct type<float> {$/;"	s	namespace:cimg_library_suffixed::cimg
type	.\CImg.h	/^    template<> struct type<int> {$/;"	s	namespace:cimg_library_suffixed::cimg
type	.\CImg.h	/^    template<> struct type<long double> {$/;"	s	namespace:cimg_library_suffixed::cimg
type	.\CImg.h	/^    template<> struct type<long> {$/;"	s	namespace:cimg_library_suffixed::cimg
type	.\CImg.h	/^    template<> struct type<short> {$/;"	s	namespace:cimg_library_suffixed::cimg
type	.\CImg.h	/^    template<> struct type<signed char> {$/;"	s	namespace:cimg_library_suffixed::cimg
type	.\CImg.h	/^    template<> struct type<unsigned char> {$/;"	s	namespace:cimg_library_suffixed::cimg
type	.\CImg.h	/^    template<> struct type<unsigned int> {$/;"	s	namespace:cimg_library_suffixed::cimg
type	.\CImg.h	/^    template<> struct type<unsigned long> {$/;"	s	namespace:cimg_library_suffixed::cimg
type	.\CImg.h	/^    template<> struct type<unsigned short> {$/;"	s	namespace:cimg_library_suffixed::cimg
type	.\CImg.h	/^    template<typename T, typename t> struct superset { typedef T type; };$/;"	t	struct:cimg_library_suffixed::cimg::superset
type	.\CImg.h	/^    template<typename T> struct type {$/;"	s	namespace:cimg_library_suffixed::cimg
type	.\CImg.h	/^    template<typename t1, typename t2> struct last { typedef t2 type; };$/;"	t	struct:cimg_library_suffixed::cimg::last
ucharT	.\CImg.h	/^    typedef typename cimg::last<T,unsigned char>::type ucharT;$/;"	t	struct:cimg_library_suffixed::CImg
ucharT	.\CImg.h	/^    typedef typename cimg::last<T,unsigned char>::type ucharT;$/;"	t	struct:cimg_library_suffixed::CImgList
uint2float	.\CImg.h	/^    inline float uint2float(const unsigned int u) {$/;"	f	namespace:cimg_library_suffixed::cimg
uint64	.\CImg.h	334;"	d
uint64	.\CImg.h	337;"	d
uintT	.\CImg.h	/^    typedef typename cimg::last<T,unsigned int>::type uintT;$/;"	t	struct:cimg_library_suffixed::CImg
uintT	.\CImg.h	/^    typedef typename cimg::last<T,unsigned int>::type uintT;$/;"	t	struct:cimg_library_suffixed::CImgList
ulongT	.\CImg.h	/^    typedef typename cimg::last<T,unsigned long>::type ulongT;$/;"	t	struct:cimg_library_suffixed::CImg
ulongT	.\CImg.h	/^    typedef typename cimg::last<T,unsigned long>::type ulongT;$/;"	t	struct:cimg_library_suffixed::CImgList
uncase	.\CImg.h	/^    inline char uncase(const char x) {$/;"	f	namespace:cimg_library_suffixed::cimg
uncase	.\CImg.h	/^    inline void uncase(char *const str) {$/;"	f	namespace:cimg_library_suffixed::cimg
unlock	.\CImg.h	/^      void unlock(const unsigned int n) { ReleaseMutex(mutex[n]); }$/;"	f	struct:cimg_library_suffixed::cimg::Mutex_info
unroll	.\CImg.h	/^    CImg<T>& unroll(const char axis) {$/;"	f	struct:cimg_library_suffixed::CImg
unused	.\CImg.h	/^    inline void unused(const T&, ...) {}$/;"	f	namespace:cimg_library_suffixed::cimg
uptrT	.\CImg.h	/^    typedef typename cimg::last<T,UINT_PTR>::type uptrT;  \/\/ Unsigned integer type that can store a pointer.$/;"	t	struct:cimg_library_suffixed::CImg
uptrT	.\CImg.h	/^    typedef typename cimg::last<T,unsigned long>::type uptrT;$/;"	t	struct:cimg_library_suffixed::CImg
ushortT	.\CImg.h	/^    typedef typename cimg::last<T,unsigned short>::type ushortT;$/;"	t	struct:cimg_library_suffixed::CImg
ushortT	.\CImg.h	/^    typedef typename cimg::last<T,unsigned short>::type ushortT;$/;"	t	struct:cimg_library_suffixed::CImgList
value_string	.\CImg.h	/^    CImg<charT> value_string(const char separator=',', const unsigned int max_size=0) const {$/;"	f	struct:cimg_library_suffixed::CImgList
value_string	.\CImg.h	/^    CImg<charT> value_string(const char separator=',', const unsigned int max_size=0,$/;"	f	struct:cimg_library_suffixed::CImg
value_type	.\CImg.h	/^    typedef T value_type;$/;"	t	struct:cimg_library_suffixed::CImg
value_type	.\CImg.h	/^    typedef T value_type;$/;"	t	struct:cimg_library_suffixed::CImgList
vanvliet	.\CImg.h	/^    CImg<T>& vanvliet(const float sigma, const unsigned int order, const char axis='x',$/;"	f	struct:cimg_library_suffixed::CImg
variance	.\CImg.h	/^    double variance(const unsigned int variance_method=1) const {$/;"	f	struct:cimg_library_suffixed::CImg
variance_mean	.\CImg.h	/^    double variance_mean(const unsigned int variance_method, t& mean) const {$/;"	f	struct:cimg_library_suffixed::CImg
variance_noise	.\CImg.h	/^    double variance_noise(const unsigned int variance_method=2) const {$/;"	f	struct:cimg_library_suffixed::CImg
vector	.\CImg.h	/^      unsigned int vector(const unsigned int siz) { \/\/ Insert new vector of specified size in memory.$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
vector	.\CImg.h	/^    CImg<T>& vector() {$/;"	f	struct:cimg_library_suffixed::CImg
vector	.\CImg.h	/^    static CImg<T> vector(const T& a0) {$/;"	f	struct:cimg_library_suffixed::CImg
vector	.\CImg.h	/^    static CImg<T> vector(const T& a0, const T& a1) {$/;"	f	struct:cimg_library_suffixed::CImg
vector	.\CImg.h	/^    static CImg<T> vector(const T& a0, const T& a1, const T& a2) {$/;"	f	struct:cimg_library_suffixed::CImg
vector	.\CImg.h	/^    static CImg<T> vector(const T& a0, const T& a1, const T& a2, const T& a3) {$/;"	f	struct:cimg_library_suffixed::CImg
vector	.\CImg.h	/^    static CImg<T> vector(const T& a0, const T& a1, const T& a2, const T& a3, const T& a4) {$/;"	f	struct:cimg_library_suffixed::CImg
vector	.\CImg.h	/^    static CImg<T> vector(const T& a0, const T& a1, const T& a2, const T& a3, const T& a4, const T& a5) {$/;"	f	struct:cimg_library_suffixed::CImg
vector	.\CImg.h	/^    static CImg<T> vector(const T& a0, const T& a1, const T& a2, const T& a3,$/;"	f	struct:cimg_library_suffixed::CImg
vector1_v	.\CImg.h	/^      unsigned int vector1_v(const mp_func op, const unsigned int arg1) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
vector2_sv	.\CImg.h	/^      unsigned int vector2_sv(const mp_func op, const unsigned int arg1, const unsigned int arg2) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
vector2_vs	.\CImg.h	/^      unsigned int vector2_vs(const mp_func op, const unsigned int arg1, const unsigned int arg2) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
vector2_vv	.\CImg.h	/^      unsigned int vector2_vv(const mp_func op, const unsigned int arg1, const unsigned int arg2) {$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
vector3_vss	.\CImg.h	/^      unsigned int vector3_vss(const mp_func op, const unsigned int arg1, const unsigned int arg2,$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
vector_copy	.\CImg.h	/^      unsigned int vector_copy(const unsigned int arg) { \/\/ Insert new copy of specified vector in memory.$/;"	f	struct:cimg_library_suffixed::CImg::_cimg_math_parser
wait	.\CImg.h	/^    CImgDisplay& wait() {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
wait	.\CImg.h	/^    CImgDisplay& wait(const unsigned int milliseconds) {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
wait	.\CImg.h	/^    inline unsigned int wait(const unsigned int milliseconds) {$/;"	f	namespace:cimg_library_suffixed::cimg
wait	.\CImg.h	/^    static void wait(CImgDisplay& disp1) {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
wait	.\CImg.h	/^    static void wait(CImgDisplay& disp1, CImgDisplay& disp2) {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
wait	.\CImg.h	/^    static void wait(CImgDisplay& disp1, CImgDisplay& disp2, CImgDisplay& disp3) {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
wait	.\CImg.h	/^    static void wait(CImgDisplay& disp1, CImgDisplay& disp2, CImgDisplay& disp3, CImgDisplay& disp4) {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
wait	.\CImg.h	/^    static void wait(CImgDisplay& disp1, CImgDisplay& disp2, CImgDisplay& disp3, CImgDisplay& disp4, CImgDisplay& disp5,$/;"	f	struct:cimg_library_suffixed::CImgDisplay
wait	.\CImg.h	/^    static void wait(CImgDisplay& disp1, CImgDisplay& disp2, CImgDisplay& disp3, CImgDisplay& disp4,$/;"	f	struct:cimg_library_suffixed::CImgDisplay
wait_all	.\CImg.h	/^    static void wait_all() {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
wait_event	.\CImg.h	/^      HANDLE wait_event;$/;"	m	struct:cimg_library_suffixed::cimg::Win32_info
wait_event	.\CImg.h	/^      pthread_cond_t wait_event;$/;"	m	struct:cimg_library_suffixed::cimg::X11_info
wait_event_mutex	.\CImg.h	/^      pthread_mutex_t wait_event_mutex;$/;"	m	struct:cimg_library_suffixed::cimg::X11_info
warn	.\CImg.h	/^    inline void warn(const char *const format, ...) {$/;"	f	namespace:cimg_library_suffixed::cimg
warp	.\CImg.h	/^    CImg<T>& warp(const CImg<t>& warp, const unsigned int mode=0,$/;"	f	struct:cimg_library_suffixed::CImg
watershed	.\CImg.h	/^    CImg<T>& watershed(const CImg<t>& priority, const bool fill_lines=true) {$/;"	f	struct:cimg_library_suffixed::CImg
wget_path	.\CImg.h	/^  inline const char *wget_path(const char *const user_path, const bool reinit_path) {$/;"	f	namespace:cimg_library_suffixed::cimg
what	.\CImg.h	/^    const char *what() const throw() { return _message; }$/;"	f	struct:cimg_library_suffixed::CImgAbortException
what	.\CImg.h	/^    const char *what() const throw() { return _message; }$/;"	f	struct:cimg_library_suffixed::CImgException
wheel	.\CImg.h	/^    int wheel() const {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
width	.\CImg.h	/^    int width() const {$/;"	f	struct:cimg_library_suffixed::CImg
width	.\CImg.h	/^    int width() const {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
width	.\CImg.h	/^    int width() const {$/;"	f	struct:cimg_library_suffixed::CImgList
window_height	.\CImg.h	/^    int window_height() const {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
window_width	.\CImg.h	/^    int window_width() const {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
window_x	.\CImg.h	/^    int window_x() const {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
window_y	.\CImg.h	/^    int window_y() const {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
winformat_string	.\CImg.h	/^    inline void winformat_string(char *const str) {$/;"	f	namespace:cimg_library_suffixed::cimg
wins	.\CImg.h	/^      CImgDisplay **wins;$/;"	m	struct:cimg_library_suffixed::cimg::X11_info
xln	.\CImg.h	/^    inline int xln(const int x) {$/;"	f	namespace:cimg_library_suffixed::cimg
xyYtoRGB	.\CImg.h	/^    CImg<T>& xyYtoRGB() {$/;"	f	struct:cimg_library_suffixed::CImg
xyYtoXYZ	.\CImg.h	/^    CImg<T>& xyYtoXYZ() {$/;"	f	struct:cimg_library_suffixed::CImg
~CImg	.\CImg.h	/^    ~CImg() {$/;"	f	struct:cimg_library_suffixed::CImg
~CImgAbortException	.\CImg.h	/^    ~CImgAbortException() throw() { delete[] _message; }$/;"	f	struct:cimg_library_suffixed::CImgAbortException
~CImgDisplay	.\CImg.h	/^    ~CImgDisplay() {$/;"	f	struct:cimg_library_suffixed::CImgDisplay
~CImgException	.\CImg.h	/^    ~CImgException() throw() { delete[] _message; }$/;"	f	struct:cimg_library_suffixed::CImgException
~CImgList	.\CImg.h	/^    ~CImgList() {$/;"	f	struct:cimg_library_suffixed::CImgList
~X11_info	.\CImg.h	/^      ~X11_info() {$/;"	f	struct:cimg_library_suffixed::cimg::X11_info
~_functor2d_expr	.\CImg.h	/^      ~_functor2d_expr() { delete mp; }$/;"	f	struct:cimg_library_suffixed::CImg::_functor2d_expr
~_functor3d_expr	.\CImg.h	/^      ~_functor3d_expr() { delete mp; }$/;"	f	struct:cimg_library_suffixed::CImg::_functor3d_expr
~_functor4d_streamline2d_oriented	.\CImg.h	/^      ~_functor4d_streamline2d_oriented() { delete pI; }$/;"	f	struct:cimg_library_suffixed::CImg::_functor4d_streamline2d_oriented
~_functor4d_streamline3d_oriented	.\CImg.h	/^      ~_functor4d_streamline3d_oriented() { delete pI; }$/;"	f	struct:cimg_library_suffixed::CImg::_functor4d_streamline3d_oriented
~_functor4d_streamline_expr	.\CImg.h	/^      ~_functor4d_streamline_expr() { delete mp; }$/;"	f	struct:cimg_library_suffixed::CImg::_functor4d_streamline_expr
